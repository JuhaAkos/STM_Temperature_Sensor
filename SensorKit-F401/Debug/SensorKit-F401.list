
SensorKit-F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b10  080091c8  080091c8  0000a1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd8  08009cd8  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce0  08009ce0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce0  08009ce0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ce4  08009ce4  0000ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009ce8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  200001dc  08009ec4  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08009ec4  0000b904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001339b  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d0  00000000  00000000  0001e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00021678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e09  00000000  00000000  00022888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eb3  00000000  00000000  00023691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001873c  00000000  00000000  0003d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db96  00000000  00000000  00055c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c14  00000000  00000000  000f385c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f9470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091b0 	.word	0x080091b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080091b0 	.word	0x080091b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <MX_ADC1_Init+0xcc>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ec2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <MX_ADC1_Init+0xd0>)
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	4819      	ldr	r0, [pc, #100]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f0a:	f001 fb1d 	bl	8002548 <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f14:	f000 fd28 	bl	8001968 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f2a:	f001 fc5f 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f34:	f000 fd18 	bl	8001968 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480b      	ldr	r0, [pc, #44]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f42:	f001 fc53 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000f4c:	f000 fd0c 	bl	8001968 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000f50:	2303      	movs	r3, #3
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f5a:	f001 fc47 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000f64:	f000 fd00 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	40012000 	.word	0x40012000
 8000f78:	0f000001 	.word	0x0f000001

08000f7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2f      	ldr	r2, [pc, #188]	@ (8001058 <HAL_ADC_MspInit+0xdc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d157      	bne.n	800104e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <HAL_ADC_MspInit+0xe0>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800105c <HAL_ADC_MspInit+0xe0>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <HAL_ADC_MspInit+0xe0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b27      	ldr	r3, [pc, #156]	@ (800105c <HAL_ADC_MspInit+0xe0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a26      	ldr	r2, [pc, #152]	@ (800105c <HAL_ADC_MspInit+0xe0>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <HAL_ADC_MspInit+0xe0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AMB_LIGHT_Pin;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AMB_LIGHT_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481d      	ldr	r0, [pc, #116]	@ (8001060 <HAL_ADC_MspInit+0xe4>)
 8000fea:	f002 fb21 	bl	8003630 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8001068 <HAL_ADC_MspInit+0xec>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001034:	f001 ff8c 	bl	8002f50 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800103e:	f000 fc93 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 8001046:	639a      	str	r2, [r3, #56]	@ 0x38
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_ADC_MspInit+0xe8>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020400 	.word	0x40020400
 8001064:	20000240 	.word	0x20000240
 8001068:	40026410 	.word	0x40026410

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_DMA_Init+0x3c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <MX_DMA_Init+0x3c>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_DMA_Init+0x3c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2038      	movs	r0, #56	@ 0x38
 8001094:	f001 ff25 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001098:	2038      	movs	r0, #56	@ 0x38
 800109a:	f001 ff3e 	bl	8002f1a <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <a_dht20_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_dht20_iic_read(dht20_handle_t *handle, uint8_t *data, uint16_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80fb      	strh	r3, [r7, #6]
    if (handle->iic_read_cmd(DHT20_ADDRESS, data, len) != 0)        /* read the register */
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	2070      	movs	r0, #112	@ 0x70
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <a_dht20_iic_read+0x24>
    {
        return 1;                                                   /* return error */
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <a_dht20_iic_read+0x26>
    }
    else
    {
        return 0;                                                   /* success return 0 */
 80010d0:	2300      	movs	r3, #0
    }
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <a_dht20_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_dht20_iic_write(dht20_handle_t *handle, uint8_t *data, uint16_t len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80fb      	strh	r3, [r7, #6]
    if (handle->iic_write_cmd(DHT20_ADDRESS, data, len) != 0)        /* write the register */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	2070      	movs	r0, #112	@ 0x70
 80010f2:	4798      	blx	r3
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <a_dht20_iic_write+0x24>
    {
        return 1;                                                    /* return error */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <a_dht20_iic_write+0x26>
    }
    else
    {
        return 0;                                                    /* success return 0 */
 80010fe:	2300      	movs	r3, #0
    }
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <a_dht20_calc_crc>:
 * @param[in] len is the data length
 * @return    crc
 * @note      none
 */
static uint8_t a_dht20_calc_crc(uint8_t *data, uint8_t len)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t byte;
    uint8_t crc = 0xFF;
 8001114:	23ff      	movs	r3, #255	@ 0xff
 8001116:	737b      	strb	r3, [r7, #13]
    
    for (byte = 0; byte < len; byte++)          /* len times */
 8001118:	2300      	movs	r3, #0
 800111a:	73bb      	strb	r3, [r7, #14]
 800111c:	e021      	b.n	8001162 <a_dht20_calc_crc+0x5a>
    {
        crc ^= data[byte];                      /* xor byte */
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	7b7b      	ldrb	r3, [r7, #13]
 8001128:	4053      	eors	r3, r2
 800112a:	737b      	strb	r3, [r7, #13]
        for (i = 8; i > 0; --i)                 /* one byte */
 800112c:	2308      	movs	r3, #8
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e011      	b.n	8001156 <a_dht20_calc_crc+0x4e>
        {
            if ((crc & 0x80) != 0)              /* if high*/
 8001132:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001136:	2b00      	cmp	r3, #0
 8001138:	da07      	bge.n	800114a <a_dht20_calc_crc+0x42>
            {
                crc = (crc << 1) ^ 0x31;        /* xor 0x31 */
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b25b      	sxtb	r3, r3
 8001140:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001144:	b25b      	sxtb	r3, r3
 8001146:	737b      	strb	r3, [r7, #13]
 8001148:	e002      	b.n	8001150 <a_dht20_calc_crc+0x48>
            }
            else
            {
                crc = crc << 1;                 /* skip */
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	737b      	strb	r3, [r7, #13]
        for (i = 8; i > 0; --i)                 /* one byte */
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3b01      	subs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ea      	bne.n	8001132 <a_dht20_calc_crc+0x2a>
    for (byte = 0; byte < len; byte++)          /* len times */
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	3301      	adds	r3, #1
 8001160:	73bb      	strb	r3, [r7, #14]
 8001162:	7bba      	ldrb	r2, [r7, #14]
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3d9      	bcc.n	800111e <a_dht20_calc_crc+0x16>
            }
        }
    }
    
    return crc;                                 /* return crc */
 800116a:	7b7b      	ldrb	r3, [r7, #13]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <a_dht20_jh_reset_reg>:
 *            - 0 success
 *            - 1 reset failed
 * @note      none
 */
static uint8_t a_dht20_jh_reset_reg(dht20_handle_t *handle, uint8_t addr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[3];
    uint8_t regs[3];
    
    buf[0] = addr;                                     /* set the addr */
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	733b      	strb	r3, [r7, #12]
    buf[1] = 0x00;                                     /* set 0x00 */
 8001188:	2300      	movs	r3, #0
 800118a:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;                                     /* set 0x00 */
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
    if (a_dht20_iic_write(handle, buf, 3) != 0)        /* write the command */
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2203      	movs	r2, #3
 8001196:	4619      	mov	r1, r3
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff9e 	bl	80010da <a_dht20_iic_write>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <a_dht20_jh_reset_reg+0x30>
    {
        return 1;                                      /* return error */
 80011a4:	2301      	movs	r3, #1
 80011a6:	e029      	b.n	80011fc <a_dht20_jh_reset_reg+0x84>
    }
    handle->delay_ms(5);                               /* delay 5ms */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2005      	movs	r0, #5
 80011ae:	4798      	blx	r3
    if (a_dht20_iic_read(handle, regs, 3) != 0)        /* read regs */
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2203      	movs	r2, #3
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff77 	bl	80010ac <a_dht20_iic_read>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <a_dht20_jh_reset_reg+0x50>
    {
        return 1;                                      /* return error */
 80011c4:	2301      	movs	r3, #1
 80011c6:	e019      	b.n	80011fc <a_dht20_jh_reset_reg+0x84>
    }
    handle->delay_ms(10);                              /* delay 10ms */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	200a      	movs	r0, #10
 80011ce:	4798      	blx	r3
    buf[0] = 0xB0 | addr;                              /* set addr */
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	733b      	strb	r3, [r7, #12]
    buf[1] = regs[1];                                  /* set regs[1] */
 80011da:	7a7b      	ldrb	r3, [r7, #9]
 80011dc:	737b      	strb	r3, [r7, #13]
    buf[2] = regs[2];                                  /* set regs[2] */
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	73bb      	strb	r3, [r7, #14]
    if (a_dht20_iic_write(handle, buf, 3) != 0)        /* write the data */
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2203      	movs	r2, #3
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff75 	bl	80010da <a_dht20_iic_write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <a_dht20_jh_reset_reg+0x82>
    {
        return 1;                                      /* return error */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <a_dht20_jh_reset_reg+0x84>
    }
    
    return 0;                                          /* success return 0 */
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <dht20_init>:
 *            - 4 read status failed
 *            - 5 reset reg failed
 * @note      none
 */
uint8_t dht20_init(dht20_handle_t *handle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    
    if (handle == NULL)                                                /* check handle */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <dht20_init+0x12>
    {
        return 2;                                                      /* return error */
 8001212:	2302      	movs	r3, #2
 8001214:	e04a      	b.n	80012ac <dht20_init+0xa8>
//    {
//        handle->debug_print("dht20: iic_deinit is null.\n");           /* iic_deinit is null */
//
//        return 3;                                                      /* return error */
//    }
    if (handle->iic_read_cmd == NULL)                                  /* check iic_read_cmd */
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <dht20_init+0x1e>
    {
//        handle->debug_print("dht20: iic_read_cmd is null.\n");         /* iic_read_cmd is null */
        
        return 3;                                                      /* return error */
 800121e:	2303      	movs	r3, #3
 8001220:	e044      	b.n	80012ac <dht20_init+0xa8>
    }
    if (handle->iic_write_cmd == NULL)                                 /* check iic_write_cmd */
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <dht20_init+0x2a>
    {
//        handle->debug_print("dht20: iic_write_cmd is null.\n");        /* iic_write_cmd is null */
        
        return 3;                                                      /* return error */
 800122a:	2303      	movs	r3, #3
 800122c:	e03e      	b.n	80012ac <dht20_init+0xa8>
    }
    if (handle->delay_ms == NULL)                                      /* check delay_ms */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <dht20_init+0x36>
    {
//        handle->debug_print("dht20: delay_ms is null.\n");             /* delay_ms is null */
        
        return 3;                                                      /* return error */
 8001236:	2303      	movs	r3, #3
 8001238:	e038      	b.n	80012ac <dht20_init+0xa8>
//    {
//        handle->debug_print("dht20: iic init failed.\n");              /* iic init failed */
//
//        return 1;                                                      /* return error */
//    }
    handle->delay_ms(500);                                             /* wait for 500 ms */
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001242:	4798      	blx	r3
    if (a_dht20_iic_read(handle, &status, 1) != 0)                     /* read the status */
 8001244:	f107 030f 	add.w	r3, r7, #15
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff2d 	bl	80010ac <a_dht20_iic_read>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <dht20_init+0x58>
    {
//        handle->debug_print("dht20: read status failed.\n");           /* read status failed */
//        (void)handle->iic_deinit();                                    /* close the iic */
        
        return 4;                                                      /* return error */
 8001258:	2304      	movs	r3, #4
 800125a:	e027      	b.n	80012ac <dht20_init+0xa8>
    }
    if ((status & 0x18) != 0x18)                                       /* check the status */
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f003 0318 	and.w	r3, r3, #24
 8001262:	2b18      	cmp	r3, #24
 8001264:	d01a      	beq.n	800129c <dht20_init+0x98>
    {
        if (a_dht20_jh_reset_reg(handle, 0x1B) != 0)                   /* reset the 0x1B */
 8001266:	211b      	movs	r1, #27
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff85 	bl	8001178 <a_dht20_jh_reset_reg>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <dht20_init+0x74>
        {
//            handle->debug_print("dht20: reset reg failed.\n");         /* reset reg failed */
//            (void)handle->iic_deinit();                                /* close the iic */
            
            return 5;                                                  /* return error */
 8001274:	2305      	movs	r3, #5
 8001276:	e019      	b.n	80012ac <dht20_init+0xa8>
        }
        if (a_dht20_jh_reset_reg(handle, 0x1C) != 0)                   /* reset the 0x1C */
 8001278:	211c      	movs	r1, #28
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff7c 	bl	8001178 <a_dht20_jh_reset_reg>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <dht20_init+0x86>
        {
//            handle->debug_print("dht20: reset reg failed.\n");         /* reset reg failed */
//            (void)handle->iic_deinit();                                /* close the iic */
            
            return 5;                                                  /* return error */
 8001286:	2305      	movs	r3, #5
 8001288:	e010      	b.n	80012ac <dht20_init+0xa8>
        }
        if (a_dht20_jh_reset_reg(handle, 0x1E) != 0)                   /* reset the 0x1E */
 800128a:	211e      	movs	r1, #30
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff73 	bl	8001178 <a_dht20_jh_reset_reg>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <dht20_init+0x98>
        {
//            handle->debug_print("dht20: reset reg failed.\n");         /* reset reg failed */
//            (void)handle->iic_deinit();                                /* close the iic */
            
            return 5;                                                  /* return error */
 8001298:	2305      	movs	r3, #5
 800129a:	e007      	b.n	80012ac <dht20_init+0xa8>
        }
    }
    handle->delay_ms(10);                                              /* delay 10ms */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	200a      	movs	r0, #10
 80012a2:	4798      	blx	r3
    handle->inited = 1;                                                /* flag finish initialization */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	731a      	strb	r2, [r3, #12]
    
    return 0;                                                          /* success return 0 */
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <dht20_read_temperature>:
 *             - 4 data is not ready
 *             - 5 crc is error
 * @note       none
 */
uint8_t dht20_read_temperature(dht20_handle_t *handle, uint32_t *temperature_raw, float *temperature_s)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
    uint8_t status;
    uint8_t buf[7];
    
    if (handle == NULL)                                               /* check handle */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <dht20_read_temperature+0x16>
    {
        return 2;                                                     /* return error */
 80012c6:	2302      	movs	r3, #2
 80012c8:	e06b      	b.n	80013a2 <dht20_read_temperature+0xee>
    }
    if (handle->inited != 1)                                          /* check handle initialization */
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	7b1b      	ldrb	r3, [r3, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <dht20_read_temperature+0x22>
    {
        return 3;                                                     /* return error */
 80012d2:	2303      	movs	r3, #3
 80012d4:	e065      	b.n	80013a2 <dht20_read_temperature+0xee>
    }
    
    buf[0] = 0xAC;                                                    /* set the addr */
 80012d6:	23ac      	movs	r3, #172	@ 0xac
 80012d8:	743b      	strb	r3, [r7, #16]
    buf[1] = 0x33;                                                    /* set 0x33 */
 80012da:	2333      	movs	r3, #51	@ 0x33
 80012dc:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x00;                                                    /* set 0x00 */
 80012de:	2300      	movs	r3, #0
 80012e0:	74bb      	strb	r3, [r7, #18]
    if (a_dht20_iic_write(handle, buf, 3) != 0)                       /* write the command */
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2203      	movs	r2, #3
 80012e8:	4619      	mov	r1, r3
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fef5 	bl	80010da <a_dht20_iic_write>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <dht20_read_temperature+0x46>
    {
//        handle->debug_print("dht20: sent command failed.\n");         /* sent command failed */
        
        return 1;                                                     /* return error */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e053      	b.n	80013a2 <dht20_read_temperature+0xee>
    }
    handle->delay_ms(85);                                             /* delay 85ms */
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2055      	movs	r0, #85	@ 0x55
 8001300:	4798      	blx	r3
    if (a_dht20_iic_read(handle, &status, 1) != 0)                    /* read the status */
 8001302:	f107 0317 	add.w	r3, r7, #23
 8001306:	2201      	movs	r2, #1
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fece 	bl	80010ac <a_dht20_iic_read>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <dht20_read_temperature+0x66>
    {
//        handle->debug_print("dht20: read status failed.\n");          /* read status failed */
        
        return 1;                                                     /* return error */
 8001316:	2301      	movs	r3, #1
 8001318:	e043      	b.n	80013a2 <dht20_read_temperature+0xee>
    }
    if ((status & 0x80) == 0)                                         /* check the status */
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	db3e      	blt.n	80013a0 <dht20_read_temperature+0xec>
    {
        if (a_dht20_iic_read(handle, buf, 7) != 0)                    /* read data */
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	2207      	movs	r2, #7
 8001328:	4619      	mov	r1, r3
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff febe 	bl	80010ac <a_dht20_iic_read>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <dht20_read_temperature+0x86>
        {
//            handle->debug_print("dht20: read data failed.\n");        /* read data failed */
            
            return 1;                                                 /* return error */
 8001336:	2301      	movs	r3, #1
 8001338:	e033      	b.n	80013a2 <dht20_read_temperature+0xee>
        }
        if (a_dht20_calc_crc(buf, 6) != buf[6])                       /* check the crc */
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2106      	movs	r1, #6
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fee1 	bl	8001108 <a_dht20_calc_crc>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <dht20_read_temperature+0xa0>
        {
//            handle->debug_print("dht20: crc is error.\n");            /* crc is error */
            
            return 5;                                                 /* return error */
 8001350:	2305      	movs	r3, #5
 8001352:	e026      	b.n	80013a2 <dht20_read_temperature+0xee>
        }
        
        *temperature_raw = (((uint32_t)buf[3]) << 16) |
 8001354:	7cfb      	ldrb	r3, [r7, #19]
 8001356:	041a      	lsls	r2, r3, #16
                           (((uint32_t)buf[4]) << 8) |
 8001358:	7d3b      	ldrb	r3, [r7, #20]
 800135a:	021b      	lsls	r3, r3, #8
        *temperature_raw = (((uint32_t)buf[3]) << 16) |
 800135c:	4313      	orrs	r3, r2
                           (((uint32_t)buf[5]) << 0);                 /* set the temperature */
 800135e:	7d7a      	ldrb	r2, [r7, #21]
                           (((uint32_t)buf[4]) << 8) |
 8001360:	431a      	orrs	r2, r3
        *temperature_raw = (((uint32_t)buf[3]) << 16) |
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	601a      	str	r2, [r3, #0]
        *temperature_raw = (*temperature_raw) & 0xFFFFF;              /* cut the temperature part */
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	601a      	str	r2, [r3, #0]
        *temperature_s = (float)(*temperature_raw) 
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                 / 1048576.0f * 200.0f
 800137e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80013ac <dht20_read_temperature+0xf8>
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013b0 <dht20_read_temperature+0xfc>
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
                                 - 50.0f;                             /* right shift 4 */
 800138e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80013b4 <dht20_read_temperature+0x100>
 8001392:	ee77 7ac7 	vsub.f32	s15, s15, s14
        *temperature_s = (float)(*temperature_raw) 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edc3 7a00 	vstr	s15, [r3]
        
        return 0;                                                     /* success return 0 */
 800139c:	2300      	movs	r3, #0
 800139e:	e000      	b.n	80013a2 <dht20_read_temperature+0xee>
    }
    else
    {
//        handle->debug_print("dht20: data is not ready.\n");           /* data is not ready */
        
        return 4;                                                     /* return error */
 80013a0:	2304      	movs	r3, #4
    }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	49800000 	.word	0x49800000
 80013b0:	43480000 	.word	0x43480000
 80013b4:	42480000 	.word	0x42480000

080013b8 <dht20_read_humidity>:
 *             - 4 data is not ready
 *             - 5 crc is error
 * @note       none
 */
uint8_t dht20_read_humidity(dht20_handle_t *handle, uint32_t *humidity_raw, uint8_t *humidity_s)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
    uint8_t status;
    uint8_t buf[7];
    
    if (handle == NULL)                                               /* check handle */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <dht20_read_humidity+0x16>
    {
        return 2;                                                     /* return error */
 80013ca:	2302      	movs	r3, #2
 80013cc:	e06b      	b.n	80014a6 <dht20_read_humidity+0xee>
    }
    if (handle->inited != 1)                                          /* check handle initialization */
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	7b1b      	ldrb	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <dht20_read_humidity+0x22>
    {
        return 3;                                                     /* return error */
 80013d6:	2303      	movs	r3, #3
 80013d8:	e065      	b.n	80014a6 <dht20_read_humidity+0xee>
    }
    
    buf[0] = 0xAC;                                                    /* set the addr */
 80013da:	23ac      	movs	r3, #172	@ 0xac
 80013dc:	743b      	strb	r3, [r7, #16]
    buf[1] = 0x33;                                                    /* set 0x33 */
 80013de:	2333      	movs	r3, #51	@ 0x33
 80013e0:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x00;                                                    /* set 0x00 */
 80013e2:	2300      	movs	r3, #0
 80013e4:	74bb      	strb	r3, [r7, #18]
    if (a_dht20_iic_write(handle, buf, 3) != 0)                       /* write the command */
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2203      	movs	r2, #3
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fe73 	bl	80010da <a_dht20_iic_write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <dht20_read_humidity+0x46>
    {
//        handle->debug_print("dht20: sent command failed.\n");         /* sent command failed */
        
        return 1;                                                     /* return error */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e053      	b.n	80014a6 <dht20_read_humidity+0xee>
    }
    handle->delay_ms(85);                                             /* delay 85ms */
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2055      	movs	r0, #85	@ 0x55
 8001404:	4798      	blx	r3
    if (a_dht20_iic_read(handle, &status, 1) != 0)                    /* read the status */
 8001406:	f107 0317 	add.w	r3, r7, #23
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff fe4c 	bl	80010ac <a_dht20_iic_read>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <dht20_read_humidity+0x66>
    {
//        handle->debug_print("dht20: read status failed.\n");          /* read status failed */
        
        return 1;                                                     /* return error */
 800141a:	2301      	movs	r3, #1
 800141c:	e043      	b.n	80014a6 <dht20_read_humidity+0xee>
    }
    if ((status & 0x80) == 0)                                         /* check the status */
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	db3e      	blt.n	80014a4 <dht20_read_humidity+0xec>
    {
        if (a_dht20_iic_read(handle, buf, 7) != 0)                    /* read data */
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2207      	movs	r2, #7
 800142c:	4619      	mov	r1, r3
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fe3c 	bl	80010ac <a_dht20_iic_read>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <dht20_read_humidity+0x86>
        {
//            handle->debug_print("dht20: read data failed.\n");        /* read data failed */
            
            return 1;                                                 /* return error */
 800143a:	2301      	movs	r3, #1
 800143c:	e033      	b.n	80014a6 <dht20_read_humidity+0xee>
        }
        if (a_dht20_calc_crc(buf, 6) != buf[6])                       /* check the crc */
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2106      	movs	r1, #6
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe5f 	bl	8001108 <a_dht20_calc_crc>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <dht20_read_humidity+0xa0>
        {
//            handle->debug_print("dht20: crc is error.\n");            /* crc is error */
            
            return 5;                                                 /* return error */
 8001454:	2305      	movs	r3, #5
 8001456:	e026      	b.n	80014a6 <dht20_read_humidity+0xee>
        }
        
        *humidity_raw = (((uint32_t)buf[1]) << 16) |
 8001458:	7c7b      	ldrb	r3, [r7, #17]
 800145a:	041a      	lsls	r2, r3, #16
                        (((uint32_t)buf[2]) << 8) |
 800145c:	7cbb      	ldrb	r3, [r7, #18]
 800145e:	021b      	lsls	r3, r3, #8
        *humidity_raw = (((uint32_t)buf[1]) << 16) |
 8001460:	4313      	orrs	r3, r2
                        (((uint32_t)buf[3]) << 0);                    /* set the humidity */
 8001462:	7cfa      	ldrb	r2, [r7, #19]
                        (((uint32_t)buf[2]) << 8) |
 8001464:	431a      	orrs	r2, r3
        *humidity_raw = (((uint32_t)buf[1]) << 16) |
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	601a      	str	r2, [r3, #0]
        *humidity_raw = (*humidity_raw) >> 4;                         /* right shift 4 */
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	091a      	lsrs	r2, r3, #4
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	601a      	str	r2, [r3, #0]
        *humidity_s = (uint8_t)((float)(*humidity_raw)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                / 1048576.0f * 100.0f);               /* convert the humidity */
 8001480:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80014b0 <dht20_read_humidity+0xf8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80014b4 <dht20_read_humidity+0xfc>
 800148c:	ee67 7a87 	vmul.f32	s15, s15, s14
        *humidity_s = (uint8_t)((float)(*humidity_raw)
 8001490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001494:	edc7 7a00 	vstr	s15, [r7]
 8001498:	783b      	ldrb	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	701a      	strb	r2, [r3, #0]
        
        return 0;                                                     /* success return 0 */
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <dht20_read_humidity+0xee>
    }
    else
    {
//        handle->debug_print("dht20: data is not ready.\n");           /* data is not ready */
        
        return 4;                                                     /* return error */
 80014a4:	2304      	movs	r3, #4
    }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	49800000 	.word	0x49800000
 80014b4:	42c80000 	.word	0x42c80000

080014b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b3e      	ldr	r3, [pc, #248]	@ (80015cc <MX_GPIO_Init+0x114>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a3d      	ldr	r2, [pc, #244]	@ (80015cc <MX_GPIO_Init+0x114>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <MX_GPIO_Init+0x114>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <MX_GPIO_Init+0x114>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <MX_GPIO_Init+0x114>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <MX_GPIO_Init+0x114>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <MX_GPIO_Init+0x114>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a2f      	ldr	r2, [pc, #188]	@ (80015cc <MX_GPIO_Init+0x114>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_GPIO_Init+0x114>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <MX_GPIO_Init+0x114>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <MX_GPIO_Init+0x114>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_GPIO_Init+0x114>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2120      	movs	r1, #32
 8001542:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <MX_GPIO_Init+0x118>)
 8001544:	f002 f9f8 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800154e:	4821      	ldr	r0, [pc, #132]	@ (80015d4 <MX_GPIO_Init+0x11c>)
 8001550:	f002 f9f2 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800155e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	481b      	ldr	r0, [pc, #108]	@ (80015d8 <MX_GPIO_Init+0x120>)
 800156c:	f002 f860 	bl	8003630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001570:	2320      	movs	r3, #32
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4812      	ldr	r0, [pc, #72]	@ (80015d0 <MX_GPIO_Init+0x118>)
 8001588:	f002 f852 	bl	8003630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800158c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <MX_GPIO_Init+0x11c>)
 80015a6:	f002 f843 	bl	8003630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80015aa:	2320      	movs	r3, #32
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_GPIO_Init+0x11c>)
 80015c0:	f002 f836 	bl	8003630 <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800

080015dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_I2C1_Init+0x50>)
 80015e2:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <MX_I2C1_Init+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_I2C1_Init+0x50>)
 80015e8:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_I2C1_Init+0x58>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_I2C1_Init+0x50>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_I2C1_Init+0x50>)
 800161a:	f002 f9a7 	bl	800396c <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 f9a0 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200002a0 	.word	0x200002a0
 8001630:	40005400 	.word	0x40005400
 8001634:	000186a0 	.word	0x000186a0

08001638 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <HAL_I2C_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12c      	bne.n	80016b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001676:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001688:	2304      	movs	r3, #4
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <HAL_I2C_MspInit+0x8c>)
 8001694:	f001 ffcc 	bl	8003630 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 80016a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400

080016c8 <iicWriteData>:
//	htim3.Instance->CCR1 = 0;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
}
*/

void iicWriteData(uint8_t addr, uint8_t *buf, uint16_t len) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, addr, buf, len, 1);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	b299      	uxth	r1, r3
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	9200      	str	r2, [sp, #0]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <iicWriteData+0x2c>)
 80016e6:	f002 fa85 	bl	8003bf4 <HAL_I2C_Master_Transmit>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200002a0 	.word	0x200002a0

080016f8 <iicReadData>:

void iicReadData(uint8_t addr, uint8_t *buf, uint16_t len) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, addr, buf, len, 1);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	b299      	uxth	r1, r3
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <iicReadData+0x2c>)
 8001716:	f002 fb6b 	bl	8003df0 <HAL_I2C_Master_Receive>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002a0 	.word	0x200002a0

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	dht20_handle_t hdth;
	hdth.delay_ms = &HAL_Delay;
 800172e:	4b47      	ldr	r3, [pc, #284]	@ (800184c <main+0x124>)
 8001730:	60bb      	str	r3, [r7, #8]
	hdth.iic_read_cmd = &iicReadData;
 8001732:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <main+0x128>)
 8001734:	603b      	str	r3, [r7, #0]
	hdth.iic_write_cmd = &iicWriteData;
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <main+0x12c>)
 8001738:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173a:	f000 fe6f 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173e:	f000 f8a9 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f7ff feb9 	bl	80014b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001746:	f7ff fc91 	bl	800106c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800174a:	f000 fdcb 	bl	80022e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800174e:	f7ff fbab 	bl	8000ea8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001752:	f000 fcf5 	bl	8002140 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001756:	f7ff ff41 	bl	80015dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	dht20_init(&hdth);
 800175a:	463b      	mov	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fd51 	bl	8001204 <dht20_init>

	//SSD1315_DisplayOn(&ahogyszeretnemcsillagnelegyenott);
	//SSD1315_SetBrightness(&ahogyszeretnemcsillagnelegyenott, 10);
	//SSD1315_FillRGBRect(&ahogyszeretnemcsillagnelegyenott, 0, 0, , 7, 8);
	//SSD1315_FillRect(&ahogyszeretnemcsillagnelegyenott, 10, 10, 100, 100, 0);
	ssd1306_Init(&hi2c1);
 8001762:	483d      	ldr	r0, [pc, #244]	@ (8001858 <main+0x130>)
 8001764:	f000 f91e 	bl	80019a4 <ssd1306_Init>
	ssd1306_Fill(Black);
 8001768:	2000      	movs	r0, #0
 800176a:	f000 fa3b 	bl	8001be4 <ssd1306_Fill>

	//ssd1306_WriteString("Ho: ", Font_7x10, White);
	//ssd1306_WriteString(&temperatureString, Font_7x10, White);
	ssd1306_UpdateScreen(&hi2c1);
 800176e:	483a      	ldr	r0, [pc, #232]	@ (8001858 <main+0x130>)
 8001770:	f000 fa5c 	bl	8001c2c <ssd1306_UpdateScreen>

	MX_ADC1_Init();
 8001774:	f7ff fb98 	bl	8000ea8 <MX_ADC1_Init>

	HAL_ADC_Start_DMA(&hadc1, adcValues, 1);
 8001778:	2201      	movs	r2, #1
 800177a:	4938      	ldr	r1, [pc, #224]	@ (800185c <main+0x134>)
 800177c:	4838      	ldr	r0, [pc, #224]	@ (8001860 <main+0x138>)
 800177e:	f000 ff27 	bl	80025d0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		dht20_read_temperature(&hdth, &temp_raw, &temperature);
 8001782:	463b      	mov	r3, r7
 8001784:	4a37      	ldr	r2, [pc, #220]	@ (8001864 <main+0x13c>)
 8001786:	4938      	ldr	r1, [pc, #224]	@ (8001868 <main+0x140>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fd93 	bl	80012b4 <dht20_read_temperature>
		dht20_read_humidity(&hdth, &hum_raw, &humidity);
 800178e:	463b      	mov	r3, r7
 8001790:	4a36      	ldr	r2, [pc, #216]	@ (800186c <main+0x144>)
 8001792:	4937      	ldr	r1, [pc, #220]	@ (8001870 <main+0x148>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe0f 	bl	80013b8 <dht20_read_humidity>

		ssd1306_SetCursor(10,10);
 800179a:	210a      	movs	r1, #10
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fb7d 	bl	8001e9c <ssd1306_SetCursor>
		ssd1306_WriteString("Temp: ", Font_7x10, White);
 80017a2:	4a34      	ldr	r2, [pc, #208]	@ (8001874 <main+0x14c>)
 80017a4:	2301      	movs	r3, #1
 80017a6:	ca06      	ldmia	r2, {r1, r2}
 80017a8:	4833      	ldr	r0, [pc, #204]	@ (8001878 <main+0x150>)
 80017aa:	f000 fb51 	bl	8001e50 <ssd1306_WriteString>
		//sprintf(temperatureString, "%f", temperature);
		snprintf(temperatureString, sizeof(temperatureString), "%f", temperature);
 80017ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001864 <main+0x13c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed0 	bl	8000558 <__aeabi_f2d>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	e9cd 2300 	strd	r2, r3, [sp]
 80017c0:	4a2e      	ldr	r2, [pc, #184]	@ (800187c <main+0x154>)
 80017c2:	210a      	movs	r1, #10
 80017c4:	482e      	ldr	r0, [pc, #184]	@ (8001880 <main+0x158>)
 80017c6:	f005 fbb1 	bl	8006f2c <sniprintf>
		ssd1306_WriteString(temperatureString, Font_7x10, White);
 80017ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001874 <main+0x14c>)
 80017cc:	2301      	movs	r3, #1
 80017ce:	ca06      	ldmia	r2, {r1, r2}
 80017d0:	482b      	ldr	r0, [pc, #172]	@ (8001880 <main+0x158>)
 80017d2:	f000 fb3d 	bl	8001e50 <ssd1306_WriteString>


		ssd1306_SetCursor(10,30);
 80017d6:	211e      	movs	r1, #30
 80017d8:	200a      	movs	r0, #10
 80017da:	f000 fb5f 	bl	8001e9c <ssd1306_SetCursor>
		ssd1306_WriteString("Hum: ", Font_7x10, White);
 80017de:	4a25      	ldr	r2, [pc, #148]	@ (8001874 <main+0x14c>)
 80017e0:	2301      	movs	r3, #1
 80017e2:	ca06      	ldmia	r2, {r1, r2}
 80017e4:	4827      	ldr	r0, [pc, #156]	@ (8001884 <main+0x15c>)
 80017e6:	f000 fb33 	bl	8001e50 <ssd1306_WriteString>
		humidity3 = humidity;
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <main+0x144>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f6:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <main+0x160>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
		//sprintf(humidityString, "%f", humidity);
		snprintf(humidityString, sizeof(humidityString), "%f", humidity3);
 80017fc:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <main+0x160>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fea9 	bl	8000558 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	e9cd 2300 	strd	r2, r3, [sp]
 800180e:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <main+0x154>)
 8001810:	2103      	movs	r1, #3
 8001812:	481e      	ldr	r0, [pc, #120]	@ (800188c <main+0x164>)
 8001814:	f005 fb8a 	bl	8006f2c <sniprintf>

		ssd1306_WriteString(humidityString, Font_7x10, White);
 8001818:	4a16      	ldr	r2, [pc, #88]	@ (8001874 <main+0x14c>)
 800181a:	2301      	movs	r3, #1
 800181c:	ca06      	ldmia	r2, {r1, r2}
 800181e:	481b      	ldr	r0, [pc, #108]	@ (800188c <main+0x164>)
 8001820:	f000 fb16 	bl	8001e50 <ssd1306_WriteString>
		//temp hum OLED end

		//HAL_ADC_Start()
		//HAL_ADC_PollForConversion(&hadc1, 1);

		lightLevel = adcValues[0];
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <main+0x134>)
 8001826:	881a      	ldrh	r2, [r3, #0]
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <main+0x168>)
 800182a:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(lightLevelString, Font_7x10, White);
		*/



		ssd1306_UpdateScreen(&hi2c1);
 800182c:	480a      	ldr	r0, [pc, #40]	@ (8001858 <main+0x130>)
 800182e:	f000 f9fd 	bl	8001c2c <ssd1306_UpdateScreen>
		ssd1306_Fill(Black);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f9d6 	bl	8001be4 <ssd1306_Fill>
		ssd1306_SetCursor(10,10);
 8001838:	210a      	movs	r1, #10
 800183a:	200a      	movs	r0, #10
 800183c:	f000 fb2e 	bl	8001e9c <ssd1306_SetCursor>

		HAL_Delay(1000);
 8001840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001844:	f000 fe5c 	bl	8002500 <HAL_Delay>
		dht20_read_temperature(&hdth, &temp_raw, &temperature);
 8001848:	bf00      	nop
 800184a:	e79a      	b.n	8001782 <main+0x5a>
 800184c:	08002501 	.word	0x08002501
 8001850:	080016f9 	.word	0x080016f9
 8001854:	080016c9 	.word	0x080016c9
 8001858:	200002a0 	.word	0x200002a0
 800185c:	20000318 	.word	0x20000318
 8001860:	200001f8 	.word	0x200001f8
 8001864:	200002f8 	.word	0x200002f8
 8001868:	200002f4 	.word	0x200002f4
 800186c:	2000030c 	.word	0x2000030c
 8001870:	20000308 	.word	0x20000308
 8001874:	20000000 	.word	0x20000000
 8001878:	080091c8 	.word	0x080091c8
 800187c:	080091d0 	.word	0x080091d0
 8001880:	200002fc 	.word	0x200002fc
 8001884:	080091d4 	.word	0x080091d4
 8001888:	20000310 	.word	0x20000310
 800188c:	20000314 	.word	0x20000314
 8001890:	20000306 	.word	0x20000306

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	@ 0x50
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2230      	movs	r2, #48	@ 0x30
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 fbb9 	bl	800701a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <SystemClock_Config+0xcc>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	4a27      	ldr	r2, [pc, #156]	@ (8001960 <SystemClock_Config+0xcc>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <SystemClock_Config+0xcc>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <SystemClock_Config+0xd0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <SystemClock_Config+0xd0>)
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fe:	2302      	movs	r3, #2
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001908:	2308      	movs	r3, #8
 800190a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800190c:	23a8      	movs	r3, #168	@ 0xa8
 800190e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001914:	2307      	movs	r3, #7
 8001916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4618      	mov	r0, r3
 800191e:	f003 f94b 	bl	8004bb8 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001928:	f000 f81e 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2102      	movs	r1, #2
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fbad 	bl	80050a8 <HAL_RCC_ClockConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001954:	f000 f808 	bl	8001968 <Error_Handler>
  }
}
 8001958:	bf00      	nop
 800195a:	3750      	adds	r7, #80	@ 0x50
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <Error_Handler+0x8>

08001974 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af04      	add	r7, sp, #16
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001980:	230a      	movs	r3, #10
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	2301      	movs	r3, #1
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	1cfb      	adds	r3, r7, #3
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	2200      	movs	r2, #0
 8001990:	2178      	movs	r1, #120	@ 0x78
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f002 fc52 	bl	800423c <HAL_I2C_Mem_Write>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80019ac:	2064      	movs	r0, #100	@ 0x64
 80019ae:	f000 fda7 	bl	8002500 <HAL_Delay>
    int status = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80019b6:	21ae      	movs	r1, #174	@ 0xae
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ffdb 	bl	8001974 <ssd1306_WriteCommand>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80019c8:	2120      	movs	r1, #32
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffd2 	bl	8001974 <ssd1306_WriteCommand>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019da:	2110      	movs	r1, #16
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffc9 	bl	8001974 <ssd1306_WriteCommand>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80019ec:	21b0      	movs	r1, #176	@ 0xb0
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffc0 	bl	8001974 <ssd1306_WriteCommand>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80019fe:	21c8      	movs	r1, #200	@ 0xc8
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffb7 	bl	8001974 <ssd1306_WriteCommand>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001a10:	2100      	movs	r1, #0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffae 	bl	8001974 <ssd1306_WriteCommand>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001a22:	2110      	movs	r1, #16
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffa5 	bl	8001974 <ssd1306_WriteCommand>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001a34:	2140      	movs	r1, #64	@ 0x40
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff9c 	bl	8001974 <ssd1306_WriteCommand>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001a46:	2181      	movs	r1, #129	@ 0x81
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff93 	bl	8001974 <ssd1306_WriteCommand>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001a58:	21ff      	movs	r1, #255	@ 0xff
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff8a 	bl	8001974 <ssd1306_WriteCommand>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001a6a:	21a1      	movs	r1, #161	@ 0xa1
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff81 	bl	8001974 <ssd1306_WriteCommand>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001a7c:	21a6      	movs	r1, #166	@ 0xa6
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff78 	bl	8001974 <ssd1306_WriteCommand>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001a8e:	21a8      	movs	r1, #168	@ 0xa8
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff6f 	bl	8001974 <ssd1306_WriteCommand>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001aa0:	213f      	movs	r1, #63	@ 0x3f
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff66 	bl	8001974 <ssd1306_WriteCommand>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ab2:	21a4      	movs	r1, #164	@ 0xa4
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff5d 	bl	8001974 <ssd1306_WriteCommand>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001ac4:	21d3      	movs	r1, #211	@ 0xd3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff54 	bl	8001974 <ssd1306_WriteCommand>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff4b 	bl	8001974 <ssd1306_WriteCommand>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001ae8:	21d5      	movs	r1, #213	@ 0xd5
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff42 	bl	8001974 <ssd1306_WriteCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001afa:	21f0      	movs	r1, #240	@ 0xf0
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff39 	bl	8001974 <ssd1306_WriteCommand>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001b0c:	21d9      	movs	r1, #217	@ 0xd9
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff30 	bl	8001974 <ssd1306_WriteCommand>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001b1e:	2122      	movs	r1, #34	@ 0x22
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff27 	bl	8001974 <ssd1306_WriteCommand>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001b30:	21da      	movs	r1, #218	@ 0xda
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff1e 	bl	8001974 <ssd1306_WriteCommand>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001b42:	2112      	movs	r1, #18
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff15 	bl	8001974 <ssd1306_WriteCommand>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001b54:	21db      	movs	r1, #219	@ 0xdb
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ff0c 	bl	8001974 <ssd1306_WriteCommand>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001b66:	2120      	movs	r1, #32
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff03 	bl	8001974 <ssd1306_WriteCommand>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001b78:	218d      	movs	r1, #141	@ 0x8d
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fefa 	bl	8001974 <ssd1306_WriteCommand>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001b8a:	2114      	movs	r1, #20
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fef1 	bl	8001974 <ssd1306_WriteCommand>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001b9c:	21af      	movs	r1, #175	@ 0xaf
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fee8 	bl	8001974 <ssd1306_WriteCommand>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <ssd1306_Init+0x214>
        return 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e00f      	b.n	8001bd8 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 f813 	bl	8001be4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f834 	bl	8001c2c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <ssd1306_Init+0x23c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <ssd1306_Init+0x23c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <ssd1306_Init+0x23c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	715a      	strb	r2, [r3, #5]

    return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000071c 	.word	0x2000071c

08001be4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e00d      	b.n	8001c10 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <ssd1306_Fill+0x1a>
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	e000      	b.n	8001c00 <ssd1306_Fill+0x1c>
 8001bfe:	21ff      	movs	r1, #255	@ 0xff
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <ssd1306_Fill+0x44>)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4413      	add	r3, r2
 8001c06:	460a      	mov	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c16:	d3ed      	bcc.n	8001bf4 <ssd1306_Fill+0x10>
    }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000031c 	.word	0x2000031c

08001c2c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af04      	add	r7, sp, #16
 8001c32:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e020      	b.n	8001c7c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3b50      	subs	r3, #80	@ 0x50
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fe96 	bl	8001974 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fe92 	bl	8001974 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001c50:	2110      	movs	r1, #16
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fe8e 	bl	8001974 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	01db      	lsls	r3, r3, #7
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <ssd1306_UpdateScreen+0x60>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	2264      	movs	r2, #100	@ 0x64
 8001c62:	9202      	str	r2, [sp, #8]
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	9201      	str	r2, [sp, #4]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2240      	movs	r2, #64	@ 0x40
 8001c6e:	2178      	movs	r1, #120	@ 0x78
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f002 fae3 	bl	800423c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	d9db      	bls.n	8001c3a <ssd1306_UpdateScreen+0xe>
    }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000031c 	.word	0x2000031c

08001c90 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	71bb      	strb	r3, [r7, #6]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db48      	blt.n	8001d3c <ssd1306_DrawPixel+0xac>
 8001caa:	79bb      	ldrb	r3, [r7, #6]
 8001cac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cae:	d845      	bhi.n	8001d3c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <ssd1306_DrawPixel+0xb8>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d11a      	bne.n	8001d02 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	b2d8      	uxtb	r0, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	01db      	lsls	r3, r3, #7
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <ssd1306_DrawPixel+0xbc>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	b25a      	sxtb	r2, r3
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b259      	sxtb	r1, r3
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2c9      	uxtb	r1, r1
 8001cfc:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <ssd1306_DrawPixel+0xbc>)
 8001cfe:	54d1      	strb	r1, [r2, r3]
 8001d00:	e01d      	b.n	8001d3e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d02:	79fa      	ldrb	r2, [r7, #7]
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	08db      	lsrs	r3, r3, #3
 8001d08:	b2d8      	uxtb	r0, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	01db      	lsls	r3, r3, #7
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <ssd1306_DrawPixel+0xbc>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	b25a      	sxtb	r2, r3
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b259      	sxtb	r1, r3
 8001d2c:	79fa      	ldrb	r2, [r7, #7]
 8001d2e:	4603      	mov	r3, r0
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	4413      	add	r3, r2
 8001d34:	b2c9      	uxtb	r1, r1
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <ssd1306_DrawPixel+0xbc>)
 8001d38:	54d1      	strb	r1, [r2, r3]
 8001d3a:	e000      	b.n	8001d3e <ssd1306_DrawPixel+0xae>
        return;
 8001d3c:	bf00      	nop
    }
}
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	2000071c 	.word	0x2000071c
 8001d4c:	2000031c 	.word	0x2000031c

08001d50 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4604      	mov	r4, r0
 8001d58:	1d38      	adds	r0, r7, #4
 8001d5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4623      	mov	r3, r4
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	4613      	mov	r3, r2
 8001d66:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	793b      	ldrb	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d74:	dc06      	bgt.n	8001d84 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001d76:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	797b      	ldrb	r3, [r7, #5]
 8001d7e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d82:	dd01      	ble.n	8001d88 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e05c      	b.n	8001e42 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	e04c      	b.n	8001e28 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	3b20      	subs	r3, #32
 8001d94:	7979      	ldrb	r1, [r7, #5]
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	440b      	add	r3, r1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e034      	b.n	8001e18 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b2d8      	uxtb	r0, r3
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001dce:	885b      	ldrh	r3, [r3, #2]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	7bba      	ldrb	r2, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7ff ff57 	bl	8001c90 <ssd1306_DrawPixel>
 8001de2:	e016      	b.n	8001e12 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	b2d8      	uxtb	r0, r3
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001df4:	885b      	ldrh	r3, [r3, #2]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b2d9      	uxtb	r1, r3
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f7ff ff3f 	bl	8001c90 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	793b      	ldrb	r3, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d3c5      	bcc.n	8001dae <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d3ad      	bcc.n	8001d8e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	793a      	ldrb	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <ssd1306_WriteChar+0xfc>)
 8001e3e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000071c 	.word	0x2000071c

08001e50 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	1d38      	adds	r0, r7, #4
 8001e5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e5e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001e60:	e012      	b.n	8001e88 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	7818      	ldrb	r0, [r3, #0]
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	1d3a      	adds	r2, r7, #4
 8001e6a:	ca06      	ldmia	r2, {r1, r2}
 8001e6c:	f7ff ff70 	bl	8001d50 <ssd1306_WriteChar>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d002      	beq.n	8001e82 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	e008      	b.n	8001e94 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e8      	bne.n	8001e62 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	781b      	ldrb	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <ssd1306_SetCursor+0x2c>)
 8001eb2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <ssd1306_SetCursor+0x2c>)
 8001eba:	805a      	strh	r2, [r3, #2]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	2000071c 	.word	0x2000071c

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a0f      	ldr	r2, [pc, #60]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f0a:	2007      	movs	r0, #7
 8001f0c:	f000 ffde 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f000 faa5 	bl	80024c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f80:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <DMA2_Stream0_IRQHandler+0x10>)
 8001f82:	f001 f8eb 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000240 	.word	0x20000240

08001f90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return 1;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_kill>:

int _kill(int pid, int sig)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001faa:	f005 f889 	bl	80070c0 <__errno>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2216      	movs	r2, #22
 8001fb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_exit>:

void _exit (int status)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffe7 	bl	8001fa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fd2:	bf00      	nop
 8001fd4:	e7fd      	b.n	8001fd2 <_exit+0x12>

08001fd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e00a      	b.n	8001ffe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe8:	f3af 8000 	nop.w
 8001fec:	4601      	mov	r1, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	60ba      	str	r2, [r7, #8]
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	dbf0      	blt.n	8001fe8 <_read+0x12>
  }

  return len;
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e009      	b.n	8002036 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	60ba      	str	r2, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	dbf1      	blt.n	8002022 <_write+0x12>
  }
  return len;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_close>:

int _close(int file)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002070:	605a      	str	r2, [r3, #4]
  return 0;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_isatty>:

int _isatty(int file)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <_sbrk+0x5c>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <_sbrk+0x60>)
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <_sbrk+0x64>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <_sbrk+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e0:	f004 ffee 	bl	80070c0 <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	220c      	movs	r2, #12
 80020e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	e009      	b.n	8002104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <_sbrk+0x64>)
 8002100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20018000 	.word	0x20018000
 8002110:	00000400 	.word	0x00000400
 8002114:	20000724 	.word	0x20000724
 8002118:	20000908 	.word	0x20000908

0800211c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <SystemInit+0x20>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	4a05      	ldr	r2, [pc, #20]	@ (800213c <SystemInit+0x20>)
 8002128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800212c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	@ 0x38
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
 800216c:	615a      	str	r2, [r3, #20]
 800216e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002170:	4b2c      	ldr	r3, [pc, #176]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002172:	4a2d      	ldr	r2, [pc, #180]	@ (8002228 <MX_TIM3_Init+0xe8>)
 8002174:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2097;
 8002176:	4b2b      	ldr	r3, [pc, #172]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002178:	f640 0231 	movw	r2, #2097	@ 0x831
 800217c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8002184:	4b27      	ldr	r3, [pc, #156]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002186:	220a      	movs	r2, #10
 8002188:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218a:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <MX_TIM3_Init+0xe4>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002196:	4823      	ldr	r0, [pc, #140]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002198:	f003 f9a6 	bl	80054e8 <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80021a2:	f7ff fbe1 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021b0:	4619      	mov	r1, r3
 80021b2:	481c      	ldr	r0, [pc, #112]	@ (8002224 <MX_TIM3_Init+0xe4>)
 80021b4:	f003 fb02 	bl	80057bc <HAL_TIM_ConfigClockSource>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80021be:	f7ff fbd3 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021c2:	4818      	ldr	r0, [pc, #96]	@ (8002224 <MX_TIM3_Init+0xe4>)
 80021c4:	f003 f9df 	bl	8005586 <HAL_TIM_PWM_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80021ce:	f7ff fbcb 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	4619      	mov	r1, r3
 80021e0:	4810      	ldr	r0, [pc, #64]	@ (8002224 <MX_TIM3_Init+0xe4>)
 80021e2:	f003 fe59 	bl	8005e98 <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80021ec:	f7ff fbbc 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f0:	2360      	movs	r3, #96	@ 0x60
 80021f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	4619      	mov	r1, r3
 8002206:	4807      	ldr	r0, [pc, #28]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002208:	f003 fa16 	bl	8005638 <HAL_TIM_PWM_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002212:	f7ff fba9 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002216:	4803      	ldr	r0, [pc, #12]	@ (8002224 <MX_TIM3_Init+0xe4>)
 8002218:	f000 f82a 	bl	8002270 <HAL_TIM_MspPostInit>

}
 800221c:	bf00      	nop
 800221e:	3738      	adds	r7, #56	@ 0x38
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000728 	.word	0x20000728
 8002228:	40000400 	.word	0x40000400

0800222c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <HAL_TIM_Base_MspInit+0x3c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10d      	bne.n	800225a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_TIM_Base_MspInit+0x40>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <HAL_TIM_Base_MspInit+0x40>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_TIM_Base_MspInit+0x40>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40000400 	.word	0x40000400
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <HAL_TIM_MspPostInit+0x68>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11d      	bne.n	80022ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_TIM_MspPostInit+0x6c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_TIM_MspPostInit+0x6c>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <HAL_TIM_MspPostInit+0x6c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022ae:	2310      	movs	r3, #16
 80022b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <HAL_TIM_MspPostInit+0x70>)
 80022ca:	f001 f9b1 	bl	8003630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020400 	.word	0x40020400

080022e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <MX_USART2_UART_Init+0x50>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	@ (8002330 <MX_USART2_UART_Init+0x4c>)
 800231c:	f003 fe2a 	bl	8005f74 <HAL_UART_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002326:	f7ff fb1f 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000770 	.word	0x20000770
 8002334:	40004400 	.word	0x40004400

08002338 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_UART_MspInit+0x84>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12b      	bne.n	80023b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_UART_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002392:	230c      	movs	r3, #12
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a2:	2307      	movs	r3, #7
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <HAL_UART_MspInit+0x8c>)
 80023ae:	f001 f93f 	bl	8003630 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	@ 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ce:	490e      	ldr	r1, [pc, #56]	@ (8002408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d0:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e4:	4c0b      	ldr	r4, [pc, #44]	@ (8002414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f2:	f7ff fe93 	bl	800211c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f6:	f004 fe69 	bl	80070cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7ff f995 	bl	8001728 <main>
  bx  lr    
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800240c:	08009ce8 	.word	0x08009ce8
  ldr r2, =_sbss
 8002410:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002414:	20000904 	.word	0x20000904

08002418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002420:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <HAL_Init+0x40>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <HAL_Init+0x40>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a07      	ldr	r2, [pc, #28]	@ (800245c <HAL_Init+0x40>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002444:	2003      	movs	r0, #3
 8002446:	f000 fd41 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244a:	2000      	movs	r0, #0
 800244c:	f000 f808 	bl	8002460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002450:	f7ff fd3c 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_InitTick+0x54>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_InitTick+0x58>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002476:	fbb3 f3f1 	udiv	r3, r3, r1
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fd59 	bl	8002f36 <HAL_SYSTICK_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e00e      	b.n	80024ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d80a      	bhi.n	80024aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 fd21 	bl	8002ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a0:	4a06      	ldr	r2, [pc, #24]	@ (80024bc <HAL_InitTick+0x5c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000008 	.word	0x20000008
 80024b8:	20000010 	.word	0x20000010
 80024bc:	2000000c 	.word	0x2000000c

080024c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_IncTick+0x20>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_IncTick+0x24>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <HAL_IncTick+0x24>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000010 	.word	0x20000010
 80024e4:	200007b4 	.word	0x200007b4

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200007b4 	.word	0x200007b4

08002500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff ffee 	bl	80024e8 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d005      	beq.n	8002526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_Delay+0x44>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002526:	bf00      	nop
 8002528:	f7ff ffde 	bl	80024e8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d8f7      	bhi.n	8002528 <HAL_Delay+0x28>
  {
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000010 	.word	0x20000010

08002548 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e033      	b.n	80025c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fd08 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800258e:	f023 0302 	bic.w	r3, r3, #2
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa48 	bl	8002a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80025b6:	e001      	b.n	80025bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_Start_DMA+0x1e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0ce      	b.n	800278c <HAL_ADC_Start_DMA+0x1bc>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d018      	beq.n	8002636 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002614:	4b5f      	ldr	r3, [pc, #380]	@ (8002794 <HAL_ADC_Start_DMA+0x1c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5f      	ldr	r2, [pc, #380]	@ (8002798 <HAL_ADC_Start_DMA+0x1c8>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9a      	lsrs	r2, r3, #18
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3b01      	subs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002644:	d107      	bne.n	8002656 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002654:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 8086 	bne.w	8002772 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002690:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f023 0206 	bic.w	r2, r3, #6
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80026b2:	e002      	b.n	80026ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c2:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_ADC_Start_DMA+0x1cc>)
 80026c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	4a35      	ldr	r2, [pc, #212]	@ (80027a0 <HAL_ADC_Start_DMA+0x1d0>)
 80026cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <HAL_ADC_Start_DMA+0x1d4>)
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	4a33      	ldr	r2, [pc, #204]	@ (80027a8 <HAL_ADC_Start_DMA+0x1d8>)
 80026dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002706:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	334c      	adds	r3, #76	@ 0x4c
 8002712:	4619      	mov	r1, r3
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f000 fcc8 	bl	80030ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d129      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	e020      	b.n	800278a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_ADC_Start_DMA+0x1dc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d11b      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ba>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d114      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e00b      	b.n	800278a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f043 0210 	orr.w	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000008 	.word	0x20000008
 8002798:	431bde83 	.word	0x431bde83
 800279c:	40012300 	.word	0x40012300
 80027a0:	08002c29 	.word	0x08002c29
 80027a4:	08002ce3 	.word	0x08002ce3
 80027a8:	08002cff 	.word	0x08002cff
 80027ac:	40012000 	.word	0x40012000

080027b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e105      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x228>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d925      	bls.n	8002864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68d9      	ldr	r1, [r3, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	3b1e      	subs	r3, #30
 800282e:	2207      	movs	r2, #7
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43da      	mvns	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	400a      	ands	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68d9      	ldr	r1, [r3, #12]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	4603      	mov	r3, r0
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4403      	add	r3, r0
 8002856:	3b1e      	subs	r3, #30
 8002858:	409a      	lsls	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	e022      	b.n	80028aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	2207      	movs	r2, #7
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	400a      	ands	r2, r1
 8002886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	4603      	mov	r3, r0
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4403      	add	r3, r0
 80028a0:	409a      	lsls	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d824      	bhi.n	80028fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b05      	subs	r3, #5
 80028c4:	221f      	movs	r2, #31
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3b05      	subs	r3, #5
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80028fa:	e04c      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d824      	bhi.n	800294e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b23      	subs	r3, #35	@ 0x23
 8002916:	221f      	movs	r2, #31
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43da      	mvns	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	400a      	ands	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b23      	subs	r3, #35	@ 0x23
 8002940:	fa00 f203 	lsl.w	r2, r0, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
 800294c:	e023      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b41      	subs	r3, #65	@ 0x41
 8002960:	221f      	movs	r2, #31
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	400a      	ands	r2, r1
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b41      	subs	r3, #65	@ 0x41
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002996:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <HAL_ADC_ConfigChannel+0x234>)
 8002998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <HAL_ADC_ConfigChannel+0x238>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d109      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1cc>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b12      	cmp	r3, #18
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <HAL_ADC_ConfigChannel+0x238>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d123      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d003      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x1e6>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b11      	cmp	r3, #17
 80029d0:	d11b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_ADC_ConfigChannel+0x23c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <HAL_ADC_ConfigChannel+0x240>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	0c9a      	lsrs	r2, r3, #18
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012300 	.word	0x40012300
 8002a24:	40012000 	.word	0x40012000
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a38:	4b79      	ldr	r3, [pc, #484]	@ (8002c20 <ADC_Init+0x1f0>)
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	4a58      	ldr	r2, [pc, #352]	@ (8002c24 <ADC_Init+0x1f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	e00f      	b.n	8002b2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	005a      	lsls	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	3b01      	subs	r3, #1
 8002b88:	035a      	lsls	r2, r3, #13
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	e007      	b.n	8002ba4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	051a      	lsls	r2, r3, #20
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002be6:	025a      	lsls	r2, r3, #9
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	029a      	lsls	r2, r3, #10
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	0f000001 	.word	0x0f000001

08002c28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d13c      	bne.n	8002cbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12b      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d127      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d119      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0220 	bic.w	r2, r2, #32
 8002c8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd7b 	bl	80027b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cba:	e00e      	b.n	8002cda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fd85 	bl	80027d8 <HAL_ADC_ErrorCallback>
}
 8002cce:	e004      	b.n	8002cda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff fd67 	bl	80027c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fd5a 	bl	80027d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	@ (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	@ (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	@ (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff29 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff3e 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff8e 	bl	8002e20 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5d 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff31 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ffa2 	bl	8002e88 <SysTick_Config>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fac4 	bl	80024e8 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e099      	b.n	80030a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8c:	e00f      	b.n	8002fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8e:	f7ff faab 	bl	80024e8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d908      	bls.n	8002fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e078      	b.n	80030a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e8      	bne.n	8002f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4b38      	ldr	r3, [pc, #224]	@ (80030a8 <HAL_DMA_Init+0x158>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2b04      	cmp	r3, #4
 8003006:	d107      	bne.n	8003018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	4313      	orrs	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	2b04      	cmp	r3, #4
 8003040:	d117      	bne.n	8003072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fa6f 	bl	8003538 <DMA_CheckFifoParam>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	@ 0x40
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800306e:	2301      	movs	r3, #1
 8003070:	e016      	b.n	80030a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa26 	bl	80034cc <DMA_CalcBaseAndBitshift>
 8003080:	4603      	mov	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	223f      	movs	r2, #63	@ 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	f010803f 	.word	0xf010803f

080030ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Start_IT+0x26>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e040      	b.n	8003154 <HAL_DMA_Start_IT+0xa8>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12f      	bne.n	8003146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f9b8 	bl	8003470 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	223f      	movs	r2, #63	@ 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0216 	orr.w	r2, r2, #22
 800311a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0208 	orr.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003168:	4b8e      	ldr	r3, [pc, #568]	@ (80033a4 <HAL_DMA_IRQHandler+0x248>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a8e      	ldr	r2, [pc, #568]	@ (80033a8 <HAL_DMA_IRQHandler+0x24c>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0a9b      	lsrs	r3, r3, #10
 8003174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	2208      	movs	r2, #8
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01a      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	2208      	movs	r2, #8
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	2201      	movs	r2, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	2204      	movs	r2, #4
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2204      	movs	r2, #4
 8003222:	409a      	lsls	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322c:	f043 0204 	orr.w	r2, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	2210      	movs	r2, #16
 800323a:	409a      	lsls	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d043      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d03c      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	2210      	movs	r2, #16
 8003258:	409a      	lsls	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d018      	beq.n	800329e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d108      	bne.n	800328c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d024      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	e01f      	b.n	80032cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e016      	b.n	80032cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0208 	bic.w	r2, r2, #8
 80032ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2220      	movs	r2, #32
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 808f 	beq.w	80033fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8087 	beq.w	80033fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	2220      	movs	r2, #32
 80032f4:	409a      	lsls	r2, r3
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b05      	cmp	r3, #5
 8003304:	d136      	bne.n	8003374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0216 	bic.w	r2, r2, #22
 8003314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_DMA_IRQHandler+0x1da>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0208 	bic.w	r2, r2, #8
 8003344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	223f      	movs	r2, #63	@ 0x3f
 800334c:	409a      	lsls	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003366:	2b00      	cmp	r3, #0
 8003368:	d07e      	beq.n	8003468 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
        }
        return;
 8003372:	e079      	b.n	8003468 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01d      	beq.n	80033be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	2b00      	cmp	r3, #0
 8003396:	d031      	beq.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
 80033a0:	e02c      	b.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
 80033a2:	bf00      	nop
 80033a4:	20000008 	.word	0x20000008
 80033a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d023      	beq.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
 80033bc:	e01e      	b.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0210 	bic.w	r2, r2, #16
 80033da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d032      	beq.n	800346a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d022      	beq.n	8003456 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2205      	movs	r2, #5
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	3301      	adds	r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	d307      	bcc.n	8003444 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f2      	bne.n	8003428 <HAL_DMA_IRQHandler+0x2cc>
 8003442:	e000      	b.n	8003446 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003444:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e000      	b.n	800346a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003468:	bf00      	nop
    }
  }
}
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800348c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d108      	bne.n	80034b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ae:	e007      	b.n	80034c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	3b10      	subs	r3, #16
 80034dc:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <DMA_CalcBaseAndBitshift+0x64>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034e6:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <DMA_CalcBaseAndBitshift+0x68>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d909      	bls.n	800350e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	659a      	str	r2, [r3, #88]	@ 0x58
 800350c:	e007      	b.n	800351e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	aaaaaaab 	.word	0xaaaaaaab
 8003534:	08009960 	.word	0x08009960

08003538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11f      	bne.n	8003592 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d856      	bhi.n	8003606 <DMA_CheckFifoParam+0xce>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <DMA_CheckFifoParam+0x28>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003571 	.word	0x08003571
 8003564:	08003583 	.word	0x08003583
 8003568:	08003571 	.word	0x08003571
 800356c:	08003607 	.word	0x08003607
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d046      	beq.n	800360a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003580:	e043      	b.n	800360a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800358a:	d140      	bne.n	800360e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003590:	e03d      	b.n	800360e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359a:	d121      	bne.n	80035e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d837      	bhi.n	8003612 <DMA_CheckFifoParam+0xda>
 80035a2:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <DMA_CheckFifoParam+0x70>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035b9 	.word	0x080035b9
 80035ac:	080035bf 	.word	0x080035bf
 80035b0:	080035b9 	.word	0x080035b9
 80035b4:	080035d1 	.word	0x080035d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e030      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d025      	beq.n	8003616 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ce:	e022      	b.n	8003616 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035d8:	d11f      	bne.n	800361a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035de:	e01c      	b.n	800361a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d903      	bls.n	80035ee <DMA_CheckFifoParam+0xb6>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d003      	beq.n	80035f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035ec:	e018      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      break;
 80035f2:	e015      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e00b      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;
 8003606:	bf00      	nop
 8003608:	e00a      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e008      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e006      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      break;
 8003612:	bf00      	nop
 8003614:	e004      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
 8003618:	e002      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      break;   
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
      break;
 800361e:	bf00      	nop
    }
  } 
  
  return status; 
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop

08003630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	@ 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e159      	b.n	8003900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	f040 8148 	bne.w	80038fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d005      	beq.n	8003682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367e:	2b02      	cmp	r3, #2
 8003680:	d130      	bne.n	80036e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	2203      	movs	r2, #3
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b8:	2201      	movs	r2, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 0201 	and.w	r2, r3, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d017      	beq.n	8003720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d123      	bne.n	8003774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	08da      	lsrs	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3208      	adds	r2, #8
 8003734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	08da      	lsrs	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3208      	adds	r2, #8
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0203 	and.w	r2, r3, #3
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a2 	beq.w	80038fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b57      	ldr	r3, [pc, #348]	@ (8003918 <HAL_GPIO_Init+0x2e8>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	4a56      	ldr	r2, [pc, #344]	@ (8003918 <HAL_GPIO_Init+0x2e8>)
 80037c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037c6:	4b54      	ldr	r3, [pc, #336]	@ (8003918 <HAL_GPIO_Init+0x2e8>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d2:	4a52      	ldr	r2, [pc, #328]	@ (800391c <HAL_GPIO_Init+0x2ec>)
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	3302      	adds	r3, #2
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a49      	ldr	r2, [pc, #292]	@ (8003920 <HAL_GPIO_Init+0x2f0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x202>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a48      	ldr	r2, [pc, #288]	@ (8003924 <HAL_GPIO_Init+0x2f4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x1fe>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a47      	ldr	r2, [pc, #284]	@ (8003928 <HAL_GPIO_Init+0x2f8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x1fa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a46      	ldr	r2, [pc, #280]	@ (800392c <HAL_GPIO_Init+0x2fc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x1f6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a45      	ldr	r2, [pc, #276]	@ (8003930 <HAL_GPIO_Init+0x300>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x1f2>
 800381e:	2304      	movs	r3, #4
 8003820:	e008      	b.n	8003834 <HAL_GPIO_Init+0x204>
 8003822:	2307      	movs	r3, #7
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x204>
 8003826:	2303      	movs	r3, #3
 8003828:	e004      	b.n	8003834 <HAL_GPIO_Init+0x204>
 800382a:	2302      	movs	r3, #2
 800382c:	e002      	b.n	8003834 <HAL_GPIO_Init+0x204>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x204>
 8003832:	2300      	movs	r3, #0
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	f002 0203 	and.w	r2, r2, #3
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	4093      	lsls	r3, r2
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003844:	4935      	ldr	r1, [pc, #212]	@ (800391c <HAL_GPIO_Init+0x2ec>)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003852:	4b38      	ldr	r3, [pc, #224]	@ (8003934 <HAL_GPIO_Init+0x304>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003876:	4a2f      	ldr	r2, [pc, #188]	@ (8003934 <HAL_GPIO_Init+0x304>)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800387c:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_GPIO_Init+0x304>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a0:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <HAL_GPIO_Init+0x304>)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038a6:	4b23      	ldr	r3, [pc, #140]	@ (8003934 <HAL_GPIO_Init+0x304>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003934 <HAL_GPIO_Init+0x304>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d0:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <HAL_GPIO_Init+0x304>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003934 <HAL_GPIO_Init+0x304>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b0f      	cmp	r3, #15
 8003904:	f67f aea2 	bls.w	800364c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3724      	adds	r7, #36	@ 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	40013800 	.word	0x40013800
 8003920:	40020000 	.word	0x40020000
 8003924:	40020400 	.word	0x40020400
 8003928:	40020800 	.word	0x40020800
 800392c:	40020c00 	.word	0x40020c00
 8003930:	40021000 	.word	0x40021000
 8003934:	40013c00 	.word	0x40013c00

08003938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003954:	e003      	b.n	800395e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	041a      	lsls	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	619a      	str	r2, [r3, #24]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e12b      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fe50 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	@ 0x24
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d0:	f001 fd62 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a81      	ldr	r2, [pc, #516]	@ (8003be0 <HAL_I2C_Init+0x274>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d807      	bhi.n	80039f0 <HAL_I2C_Init+0x84>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a80      	ldr	r2, [pc, #512]	@ (8003be4 <HAL_I2C_Init+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e006      	b.n	80039fe <HAL_I2C_Init+0x92>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a7d      	ldr	r2, [pc, #500]	@ (8003be8 <HAL_I2C_Init+0x27c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0e7      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a78      	ldr	r2, [pc, #480]	@ (8003bec <HAL_I2C_Init+0x280>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	@ (8003be0 <HAL_I2C_Init+0x274>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <HAL_I2C_Init+0xd4>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	e009      	b.n	8003a54 <HAL_I2C_Init+0xe8>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	4a69      	ldr	r2, [pc, #420]	@ (8003bf0 <HAL_I2C_Init+0x284>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	495c      	ldr	r1, [pc, #368]	@ (8003be0 <HAL_I2C_Init+0x274>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d819      	bhi.n	8003aa8 <HAL_I2C_Init+0x13c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e59      	subs	r1, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a88:	400b      	ands	r3, r1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_I2C_Init+0x138>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e59      	subs	r1, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa2:	e051      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	e04f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <HAL_I2C_Init+0x168>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e012      	b.n	8003afa <HAL_I2C_Init+0x18e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x196>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <HAL_I2C_Init+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e58      	subs	r0, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	440b      	add	r3, r1
 8003b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b26:	e00f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6809      	ldr	r1, [r1, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6911      	ldr	r1, [r2, #16]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	000186a0 	.word	0x000186a0
 8003be4:	001e847f 	.word	0x001e847f
 8003be8:	003d08ff 	.word	0x003d08ff
 8003bec:	431bde83 	.word	0x431bde83
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	460b      	mov	r3, r1
 8003c02:	817b      	strh	r3, [r7, #10]
 8003c04:	4613      	mov	r3, r2
 8003c06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7fe fc6e 	bl	80024e8 <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	f040 80e0 	bne.w	8003ddc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	4970      	ldr	r1, [pc, #448]	@ (8003de8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fde8 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0d3      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2C_Master_Transmit+0x50>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0cc      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d007      	beq.n	8003c6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	@ 0x21
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2210      	movs	r2, #16
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	893a      	ldrh	r2, [r7, #8]
 8003c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a50      	ldr	r2, [pc, #320]	@ (8003dec <HAL_I2C_Master_Transmit+0x1f8>)
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cac:	8979      	ldrh	r1, [r7, #10]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fbbc 	bl	8004430 <I2C_MasterRequestWrite>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e08d      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cd8:	e066      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	6a39      	ldr	r1, [r7, #32]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fe62 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06b      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d11b      	bne.n	8003d7c <HAL_I2C_Master_Transmit+0x188>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	6a39      	ldr	r1, [r7, #32]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fe52 	bl	8004a2a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d107      	bne.n	8003da4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e01a      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d194      	bne.n	8003cda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000

08003df0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	@ 0x30
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	817b      	strh	r3, [r7, #10]
 8003e00:	4613      	mov	r3, r2
 8003e02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7fe fb70 	bl	80024e8 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	f040 820b 	bne.w	800422e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2319      	movs	r3, #25
 8003e1e:	2201      	movs	r2, #1
 8003e20:	497c      	ldr	r1, [pc, #496]	@ (8004014 <HAL_I2C_Master_Receive+0x224>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fcea 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e1fe      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_I2C_Master_Receive+0x50>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e1f7      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d007      	beq.n	8003e66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2222      	movs	r2, #34	@ 0x22
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2210      	movs	r2, #16
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	893a      	ldrh	r2, [r7, #8]
 8003e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a5c      	ldr	r2, [pc, #368]	@ (8004018 <HAL_I2C_Master_Receive+0x228>)
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fb40 	bl	8004534 <I2C_MasterRequestRead>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1b8      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e18c      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d11b      	bne.n	8003f2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e16c      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d11b      	bne.n	8003f6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	e14c      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f94:	e138      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	f200 80f1 	bhi.w	8004182 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d123      	bne.n	8003ff0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fd7d 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e139      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fee:	e10b      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d14e      	bne.n	8004096 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	2200      	movs	r2, #0
 8004000:	4906      	ldr	r1, [pc, #24]	@ (800401c <HAL_I2C_Master_Receive+0x22c>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fbfa 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e10e      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
 8004012:	bf00      	nop
 8004014:	00100002 	.word	0x00100002
 8004018:	ffff0000 	.word	0xffff0000
 800401c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004094:	e0b8      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	2200      	movs	r2, #0
 800409e:	4966      	ldr	r1, [pc, #408]	@ (8004238 <HAL_I2C_Master_Receive+0x448>)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fbab 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0bf      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	2200      	movs	r2, #0
 80040fa:	494f      	ldr	r1, [pc, #316]	@ (8004238 <HAL_I2C_Master_Receive+0x448>)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fb7d 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e091      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004180:	e042      	b.n	8004208 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fc90 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e04c      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d118      	bne.n	8004208 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	f47f aec2 	bne.w	8003f96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3728      	adds	r7, #40	@ 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	00010004 	.word	0x00010004

0800423c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004256:	f7fe f947 	bl	80024e8 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 80d9 	bne.w	800441c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2319      	movs	r3, #25
 8004270:	2201      	movs	r2, #1
 8004272:	496d      	ldr	r1, [pc, #436]	@ (8004428 <HAL_I2C_Mem_Write+0x1ec>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fac1 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
 8004282:	e0cc      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Mem_Write+0x56>
 800428e:	2302      	movs	r3, #2
 8004290:	e0c5      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d007      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2221      	movs	r2, #33	@ 0x21
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	@ 0x40
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a3a      	ldr	r2, [r7, #32]
 80042e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a4d      	ldr	r2, [pc, #308]	@ (800442c <HAL_I2C_Mem_Write+0x1f0>)
 80042f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042fa:	88f8      	ldrh	r0, [r7, #6]
 80042fc:	893a      	ldrh	r2, [r7, #8]
 80042fe:	8979      	ldrh	r1, [r7, #10]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	4603      	mov	r3, r0
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f9e0 	bl	80046d0 <I2C_RequestMemoryWrite>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d052      	beq.n	80043bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e081      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fb42 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	2b04      	cmp	r3, #4
 8004330:	d107      	bne.n	8004342 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06b      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11b      	bne.n	80043bc <HAL_I2C_Mem_Write+0x180>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1aa      	bne.n	800431a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fb2e 	bl	8004a2a <I2C_WaitOnBTFFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d107      	bne.n	80043ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e016      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	00100002 	.word	0x00100002
 800442c:	ffff0000 	.word	0xffff0000

08004430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	460b      	mov	r3, r1
 800443e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d006      	beq.n	800445a <I2C_MasterRequestWrite+0x2a>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <I2C_MasterRequestWrite+0x2a>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004458:	d108      	bne.n	800446c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e00b      	b.n	8004484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004470:	2b12      	cmp	r3, #18
 8004472:	d107      	bne.n	8004484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f9b3 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044aa:	d103      	bne.n	80044b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e035      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c0:	d108      	bne.n	80044d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	e01b      	b.n	800450c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	11db      	asrs	r3, r3, #7
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0306 	and.w	r3, r3, #6
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f063 030f 	orn	r3, r3, #15
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	490e      	ldr	r1, [pc, #56]	@ (800452c <I2C_MasterRequestWrite+0xfc>)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f9d9 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e010      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4907      	ldr	r1, [pc, #28]	@ (8004530 <I2C_MasterRequestWrite+0x100>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f9c9 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	00010008 	.word	0x00010008
 8004530:	00010002 	.word	0x00010002

08004534 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	460b      	mov	r3, r1
 8004542:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004558:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d006      	beq.n	800456e <I2C_MasterRequestRead+0x3a>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d003      	beq.n	800456e <I2C_MasterRequestRead+0x3a>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800456c:	d108      	bne.n	8004580 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e00b      	b.n	8004598 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	2b11      	cmp	r3, #17
 8004586:	d107      	bne.n	8004598 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004596:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f929 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045be:	d103      	bne.n	80045c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e079      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d4:	d108      	bne.n	80045e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]
 80045e6:	e05f      	b.n	80046a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045e8:	897b      	ldrh	r3, [r7, #10]
 80045ea:	11db      	asrs	r3, r3, #7
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0306 	and.w	r3, r3, #6
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f063 030f 	orn	r3, r3, #15
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4930      	ldr	r1, [pc, #192]	@ (80046c8 <I2C_MasterRequestRead+0x194>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f94f 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e054      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4929      	ldr	r1, [pc, #164]	@ (80046cc <I2C_MasterRequestRead+0x198>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f93f 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e044      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800465a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f8c7 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004682:	d103      	bne.n	800468c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e017      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004690:	897b      	ldrh	r3, [r7, #10]
 8004692:	11db      	asrs	r3, r3, #7
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f063 030e 	orn	r3, r3, #14
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4907      	ldr	r1, [pc, #28]	@ (80046cc <I2C_MasterRequestRead+0x198>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8fb 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	00010008 	.word	0x00010008
 80046cc:	00010002 	.word	0x00010002

080046d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f878 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d103      	bne.n	800472a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e05f      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800473c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	492d      	ldr	r1, [pc, #180]	@ (80047f8 <I2C_RequestMemoryWrite+0x128>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8b0 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e04c      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f91a 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02b      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	e021      	b.n	80047ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f8f4 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d107      	bne.n	80047de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e005      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800480c:	e025      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d021      	beq.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fd fe67 	bl	80024e8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d116      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e023      	b.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10d      	bne.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	43da      	mvns	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	e00c      	b.n	800489a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0b6      	beq.n	800480e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b8:	e051      	b.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c8:	d123      	bne.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f043 0204 	orr.w	r2, r3, #4
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e046      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d021      	beq.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fd fde5 	bl	80024e8 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d116      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e020      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10c      	bne.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e00b      	b.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d18d      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b4:	e02d      	b.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f8ce 	bl	8004b58 <I2C_IsAcknowledgeFailed>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e02d      	b.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fd fd8b 	bl	80024e8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e007      	b.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	2b80      	cmp	r3, #128	@ 0x80
 8004a1e:	d1ca      	bne.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a36:	e02d      	b.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f88d 	bl	8004b58 <I2C_IsAcknowledgeFailed>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e02d      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d021      	beq.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fd fd4a 	bl	80024e8 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d1ca      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab8:	e042      	b.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d119      	bne.n	8004afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e029      	b.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afc:	f7fd fcf4 	bl	80024e8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d116      	bne.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e007      	b.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d1b5      	bne.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b6e:	d11b      	bne.n	8004ba8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e267      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d075      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bd6:	4b88      	ldr	r3, [pc, #544]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d00c      	beq.n	8004bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b85      	ldr	r3, [pc, #532]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d112      	bne.n	8004c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bee:	4b82      	ldr	r3, [pc, #520]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bfa:	d10b      	bne.n	8004c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05b      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x108>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d157      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e242      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCC_OscConfig+0x74>
 8004c1e:	4b76      	ldr	r3, [pc, #472]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a75      	ldr	r2, [pc, #468]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e01d      	b.n	8004c68 <HAL_RCC_OscConfig+0xb0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x98>
 8004c36:	4b70      	ldr	r3, [pc, #448]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b6d      	ldr	r3, [pc, #436]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a6c      	ldr	r2, [pc, #432]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCC_OscConfig+0xb0>
 8004c50:	4b69      	ldr	r3, [pc, #420]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a68      	ldr	r2, [pc, #416]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	4b66      	ldr	r3, [pc, #408]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a65      	ldr	r2, [pc, #404]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d013      	beq.n	8004c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fd fc3a 	bl	80024e8 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fd fc36 	bl	80024e8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	@ 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e207      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0xc0>
 8004c96:	e014      	b.n	8004cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fd fc26 	bl	80024e8 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fd fc22 	bl	80024e8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	@ 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e1f3      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	4b51      	ldr	r3, [pc, #324]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xe8>
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d063      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cce:	4b4a      	ldr	r3, [pc, #296]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d11c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce6:	4b44      	ldr	r3, [pc, #272]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_RCC_OscConfig+0x152>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e1c7      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4937      	ldr	r1, [pc, #220]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	e03a      	b.n	8004d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d28:	4b34      	ldr	r3, [pc, #208]	@ (8004dfc <HAL_RCC_OscConfig+0x244>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fd fbdb 	bl	80024e8 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d36:	f7fd fbd7 	bl	80024e8 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1a8      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d48:	4b2b      	ldr	r3, [pc, #172]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d54:	4b28      	ldr	r3, [pc, #160]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4925      	ldr	r1, [pc, #148]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
 8004d68:	e015      	b.n	8004d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6a:	4b24      	ldr	r3, [pc, #144]	@ (8004dfc <HAL_RCC_OscConfig+0x244>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd fbba 	bl	80024e8 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d78:	f7fd fbb6 	bl	80024e8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e187      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d036      	beq.n	8004e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <HAL_RCC_OscConfig+0x248>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fd fb9a 	bl	80024e8 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db8:	f7fd fb96 	bl	80024e8 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e167      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x200>
 8004dd6:	e01b      	b.n	8004e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_RCC_OscConfig+0x248>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dde:	f7fd fb83 	bl	80024e8 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de4:	e00e      	b.n	8004e04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de6:	f7fd fb7f 	bl	80024e8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d907      	bls.n	8004e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e150      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	42470000 	.word	0x42470000
 8004e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e04:	4b88      	ldr	r3, [pc, #544]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ea      	bne.n	8004de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8097 	beq.w	8004f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e22:	4b81      	ldr	r3, [pc, #516]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	4b7d      	ldr	r3, [pc, #500]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	4a7c      	ldr	r2, [pc, #496]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	4b77      	ldr	r3, [pc, #476]	@ (800502c <HAL_RCC_OscConfig+0x474>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d118      	bne.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5a:	4b74      	ldr	r3, [pc, #464]	@ (800502c <HAL_RCC_OscConfig+0x474>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a73      	ldr	r2, [pc, #460]	@ (800502c <HAL_RCC_OscConfig+0x474>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e66:	f7fd fb3f 	bl	80024e8 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fd fb3b 	bl	80024e8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e10c      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	4b6a      	ldr	r3, [pc, #424]	@ (800502c <HAL_RCC_OscConfig+0x474>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x2ea>
 8004e94:	4b64      	ldr	r3, [pc, #400]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a63      	ldr	r2, [pc, #396]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	e01c      	b.n	8004edc <HAL_RCC_OscConfig+0x324>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x30c>
 8004eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eae:	4a5e      	ldr	r2, [pc, #376]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	4a5b      	ldr	r2, [pc, #364]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0x324>
 8004ec4:	4b58      	ldr	r3, [pc, #352]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec8:	4a57      	ldr	r2, [pc, #348]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed0:	4b55      	ldr	r3, [pc, #340]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	4a54      	ldr	r2, [pc, #336]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fd fb00 	bl	80024e8 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fd fafc 	bl	80024e8 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0cb      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f02:	4b49      	ldr	r3, [pc, #292]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0ee      	beq.n	8004eec <HAL_RCC_OscConfig+0x334>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f10:	f7fd faea 	bl	80024e8 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f16:	e00a      	b.n	8004f2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fd fae6 	bl	80024e8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e0b5      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ee      	bne.n	8004f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b39      	ldr	r3, [pc, #228]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	4a38      	ldr	r2, [pc, #224]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80a1 	beq.w	8005098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f56:	4b34      	ldr	r3, [pc, #208]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d05c      	beq.n	800501c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d141      	bne.n	8004fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6a:	4b31      	ldr	r3, [pc, #196]	@ (8005030 <HAL_RCC_OscConfig+0x478>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fd faba 	bl	80024e8 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fd fab6 	bl	80024e8 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e087      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	491b      	ldr	r1, [pc, #108]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <HAL_RCC_OscConfig+0x478>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fd fa8f 	bl	80024e8 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fce:	f7fd fa8b 	bl	80024e8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e05c      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe0:	4b11      	ldr	r3, [pc, #68]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x416>
 8004fec:	e054      	b.n	8005098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fee:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <HAL_RCC_OscConfig+0x478>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fa78 	bl	80024e8 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffc:	f7fd fa74 	bl	80024e8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e045      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_OscConfig+0x470>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x444>
 800501a:	e03d      	b.n	8005098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e038      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
 8005028:	40023800 	.word	0x40023800
 800502c:	40007000 	.word	0x40007000
 8005030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x4ec>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d028      	beq.n	8005094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d121      	bne.n	8005094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d11a      	bne.n	8005094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005064:	4013      	ands	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800506a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800506c:	4293      	cmp	r3, r2
 800506e:	d111      	bne.n	8005094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	3b01      	subs	r3, #1
 800507e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d107      	bne.n	8005094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800

080050a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0cc      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050bc:	4b68      	ldr	r3, [pc, #416]	@ (8005260 <HAL_RCC_ClockConfig+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d90c      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b65      	ldr	r3, [pc, #404]	@ (8005260 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	4b63      	ldr	r3, [pc, #396]	@ (8005260 <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0b8      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050fc:	4b59      	ldr	r3, [pc, #356]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a58      	ldr	r2, [pc, #352]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005114:	4b53      	ldr	r3, [pc, #332]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a52      	ldr	r2, [pc, #328]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800511e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005120:	4b50      	ldr	r3, [pc, #320]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	494d      	ldr	r1, [pc, #308]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d044      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b47      	ldr	r3, [pc, #284]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d119      	bne.n	8005186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07f      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d003      	beq.n	8005166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005162:	2b03      	cmp	r3, #3
 8005164:	d107      	bne.n	8005176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005166:	4b3f      	ldr	r3, [pc, #252]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e06f      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005176:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e067      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005186:	4b37      	ldr	r3, [pc, #220]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4934      	ldr	r1, [pc, #208]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005198:	f7fd f9a6 	bl	80024e8 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a0:	f7fd f9a2 	bl	80024e8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e04f      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 020c 	and.w	r2, r3, #12
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d1eb      	bne.n	80051a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c8:	4b25      	ldr	r3, [pc, #148]	@ (8005260 <HAL_RCC_ClockConfig+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d20c      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b22      	ldr	r3, [pc, #136]	@ (8005260 <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_RCC_ClockConfig+0x1b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e032      	b.n	8005256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051fc:	4b19      	ldr	r3, [pc, #100]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4916      	ldr	r1, [pc, #88]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521a:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	490e      	ldr	r1, [pc, #56]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800522e:	f000 f821 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8005232:	4602      	mov	r2, r0
 8005234:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	490a      	ldr	r1, [pc, #40]	@ (8005268 <HAL_RCC_ClockConfig+0x1c0>)
 8005240:	5ccb      	ldrb	r3, [r1, r3]
 8005242:	fa22 f303 	lsr.w	r3, r2, r3
 8005246:	4a09      	ldr	r2, [pc, #36]	@ (800526c <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800524a:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd f906 	bl	8002460 <HAL_InitTick>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40023c00 	.word	0x40023c00
 8005264:	40023800 	.word	0x40023800
 8005268:	08009948 	.word	0x08009948
 800526c:	20000008 	.word	0x20000008
 8005270:	2000000c 	.word	0x2000000c

08005274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005278:	b094      	sub	sp, #80	@ 0x50
 800527a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005280:	2300      	movs	r3, #0
 8005282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005284:	2300      	movs	r3, #0
 8005286:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800528c:	4b79      	ldr	r3, [pc, #484]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	2b08      	cmp	r3, #8
 8005296:	d00d      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005298:	2b08      	cmp	r3, #8
 800529a:	f200 80e1 	bhi.w	8005460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x34>
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d003      	beq.n	80052ae <HAL_RCC_GetSysClockFreq+0x3a>
 80052a6:	e0db      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a8:	4b73      	ldr	r3, [pc, #460]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x204>)
 80052aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80052ac:	e0db      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ae:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_GetSysClockFreq+0x208>)
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b2:	e0d8      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052be:	4b6d      	ldr	r3, [pc, #436]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d063      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	099b      	lsrs	r3, r3, #6
 80052d0:	2200      	movs	r2, #0
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052de:	2300      	movs	r3, #0
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	f04f 0000 	mov.w	r0, #0
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	0159      	lsls	r1, r3, #5
 80052f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f8:	0150      	lsls	r0, r2, #5
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4621      	mov	r1, r4
 8005300:	1a51      	subs	r1, r2, r1
 8005302:	6139      	str	r1, [r7, #16]
 8005304:	4629      	mov	r1, r5
 8005306:	eb63 0301 	sbc.w	r3, r3, r1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005318:	4659      	mov	r1, fp
 800531a:	018b      	lsls	r3, r1, #6
 800531c:	4651      	mov	r1, sl
 800531e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005322:	4651      	mov	r1, sl
 8005324:	018a      	lsls	r2, r1, #6
 8005326:	4651      	mov	r1, sl
 8005328:	ebb2 0801 	subs.w	r8, r2, r1
 800532c:	4659      	mov	r1, fp
 800532e:	eb63 0901 	sbc.w	r9, r3, r1
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800533e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005346:	4690      	mov	r8, r2
 8005348:	4699      	mov	r9, r3
 800534a:	4623      	mov	r3, r4
 800534c:	eb18 0303 	adds.w	r3, r8, r3
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	462b      	mov	r3, r5
 8005354:	eb49 0303 	adc.w	r3, r9, r3
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005366:	4629      	mov	r1, r5
 8005368:	024b      	lsls	r3, r1, #9
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005370:	4621      	mov	r1, r4
 8005372:	024a      	lsls	r2, r1, #9
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537a:	2200      	movs	r2, #0
 800537c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800537e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005384:	f7fb fc18 	bl	8000bb8 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	e058      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005392:	4b38      	ldr	r3, [pc, #224]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	2200      	movs	r2, #0
 800539a:	4618      	mov	r0, r3
 800539c:	4611      	mov	r1, r2
 800539e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053ac:	4642      	mov	r2, r8
 80053ae:	464b      	mov	r3, r9
 80053b0:	f04f 0000 	mov.w	r0, #0
 80053b4:	f04f 0100 	mov.w	r1, #0
 80053b8:	0159      	lsls	r1, r3, #5
 80053ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053be:	0150      	lsls	r0, r2, #5
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4641      	mov	r1, r8
 80053c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ca:	4649      	mov	r1, r9
 80053cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e4:	ebb2 040a 	subs.w	r4, r2, sl
 80053e8:	eb63 050b 	sbc.w	r5, r3, fp
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	00eb      	lsls	r3, r5, #3
 80053f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fa:	00e2      	lsls	r2, r4, #3
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	4643      	mov	r3, r8
 8005402:	18e3      	adds	r3, r4, r3
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	464b      	mov	r3, r9
 8005408:	eb45 0303 	adc.w	r3, r5, r3
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541a:	4629      	mov	r1, r5
 800541c:	028b      	lsls	r3, r1, #10
 800541e:	4621      	mov	r1, r4
 8005420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005424:	4621      	mov	r1, r4
 8005426:	028a      	lsls	r2, r1, #10
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800542e:	2200      	movs	r2, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	61fa      	str	r2, [r7, #28]
 8005434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005438:	f7fb fbbe 	bl	8000bb8 <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4613      	mov	r3, r2
 8005442:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005444:	4b0b      	ldr	r3, [pc, #44]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x200>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	3301      	adds	r3, #1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005454:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800545e:	e002      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x204>)
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005468:	4618      	mov	r0, r3
 800546a:	3750      	adds	r7, #80	@ 0x50
 800546c:	46bd      	mov	sp, r7
 800546e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	00f42400 	.word	0x00f42400
 800547c:	007a1200 	.word	0x007a1200

08005480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005484:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <HAL_RCC_GetHCLKFreq+0x14>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000008 	.word	0x20000008

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff0 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0a9b      	lsrs	r3, r3, #10
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4903      	ldr	r1, [pc, #12]	@ (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	08009958 	.word	0x08009958

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054c4:	f7ff ffdc 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0b5b      	lsrs	r3, r3, #13
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4903      	ldr	r1, [pc, #12]	@ (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	08009958 	.word	0x08009958

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e041      	b.n	800557e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fe8c 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 fa10 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e041      	b.n	800561c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f839 	bl	8005624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 f9c1 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005652:	2302      	movs	r3, #2
 8005654:	e0ae      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	f200 809f 	bhi.w	80057a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005666:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080057a5 	.word	0x080057a5
 8005674:	080057a5 	.word	0x080057a5
 8005678:	080057a5 	.word	0x080057a5
 800567c:	080056e1 	.word	0x080056e1
 8005680:	080057a5 	.word	0x080057a5
 8005684:	080057a5 	.word	0x080057a5
 8005688:	080057a5 	.word	0x080057a5
 800568c:	08005723 	.word	0x08005723
 8005690:	080057a5 	.word	0x080057a5
 8005694:	080057a5 	.word	0x080057a5
 8005698:	080057a5 	.word	0x080057a5
 800569c:	08005763 	.word	0x08005763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f9d0 	bl	8005a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0204 	bic.w	r2, r2, #4
 80056ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
      break;
 80056de:	e064      	b.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fa16 	bl	8005b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
      break;
 8005720:	e043      	b.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fa61 	bl	8005bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0208 	orr.w	r2, r2, #8
 800573c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0204 	bic.w	r2, r2, #4
 800574c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69d9      	ldr	r1, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
      break;
 8005760:	e023      	b.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 faab 	bl	8005cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
      break;
 80057a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0b4      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x186>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005810:	d03e      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0xd4>
 8005812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005816:	f200 8087 	bhi.w	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581e:	f000 8086 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x172>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005826:	d87f      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b70      	cmp	r3, #112	@ 0x70
 800582a:	d01a      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0xa6>
 800582c:	2b70      	cmp	r3, #112	@ 0x70
 800582e:	d87b      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b60      	cmp	r3, #96	@ 0x60
 8005832:	d050      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005834:	2b60      	cmp	r3, #96	@ 0x60
 8005836:	d877      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b50      	cmp	r3, #80	@ 0x50
 800583a:	d03c      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xfa>
 800583c:	2b50      	cmp	r3, #80	@ 0x50
 800583e:	d873      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d058      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d86f      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b30      	cmp	r3, #48	@ 0x30
 800584a:	d064      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b30      	cmp	r3, #48	@ 0x30
 800584e:	d86b      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d060      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d867      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05c      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	2b10      	cmp	r3, #16
 800585e:	d05a      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	e062      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6899      	ldr	r1, [r3, #8]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f000 faf1 	bl	8005e58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	609a      	str	r2, [r3, #8]
      break;
 800588e:	e04f      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f000 fada 	bl	8005e58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058b2:	609a      	str	r2, [r3, #8]
      break;
 80058b4:	e03c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fa4e 	bl	8005d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2150      	movs	r1, #80	@ 0x50
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 faa7 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 80058d4:	e02c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 fa6d 	bl	8005dc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2160      	movs	r1, #96	@ 0x60
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fa97 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 80058f4:	e01c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	461a      	mov	r2, r3
 8005904:	f000 fa2e 	bl	8005d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2140      	movs	r1, #64	@ 0x40
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fa87 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005914:	e00c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 fa7e 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005926:	e003      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      break;
 800592c:	e000      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800592e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a34      	ldr	r2, [pc, #208]	@ (8005a30 <TIM_Base_SetConfig+0xe4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <TIM_Base_SetConfig+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a30      	ldr	r2, [pc, #192]	@ (8005a38 <TIM_Base_SetConfig+0xec>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a3c <TIM_Base_SetConfig+0xf0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a25      	ldr	r2, [pc, #148]	@ (8005a30 <TIM_Base_SetConfig+0xe4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01b      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a4:	d017      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a22      	ldr	r2, [pc, #136]	@ (8005a34 <TIM_Base_SetConfig+0xe8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <TIM_Base_SetConfig+0xec>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a20      	ldr	r2, [pc, #128]	@ (8005a3c <TIM_Base_SetConfig+0xf0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a40 <TIM_Base_SetConfig+0xf4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a44 <TIM_Base_SetConfig+0xf8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a48 <TIM_Base_SetConfig+0xfc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a08      	ldr	r2, [pc, #32]	@ (8005a30 <TIM_Base_SetConfig+0xe4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d103      	bne.n	8005a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	615a      	str	r2, [r3, #20]
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800

08005a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 0302 	bic.w	r3, r3, #2
 8005a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b14 <TIM_OC1_SetConfig+0xc8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d10c      	bne.n	8005ac2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 0308 	bic.w	r3, r3, #8
 8005aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f023 0304 	bic.w	r3, r3, #4
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <TIM_OC1_SetConfig+0xc8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d111      	bne.n	8005aee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	621a      	str	r2, [r3, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40010000 	.word	0x40010000

08005b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0320 	bic.w	r3, r3, #32
 8005b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1e      	ldr	r2, [pc, #120]	@ (8005bec <TIM_OC2_SetConfig+0xd4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10d      	bne.n	8005b94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <TIM_OC2_SetConfig+0xd4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d113      	bne.n	8005bc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40010000 	.word	0x40010000

08005bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <TIM_OC3_SetConfig+0xd0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10d      	bne.n	8005c6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a14      	ldr	r2, [pc, #80]	@ (8005cc0 <TIM_OC3_SetConfig+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d113      	bne.n	8005c9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40010000 	.word	0x40010000

08005cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a10      	ldr	r2, [pc, #64]	@ (8005d60 <TIM_OC4_SetConfig+0x9c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d109      	bne.n	8005d38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000

08005d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b087      	sub	sp, #28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0210 	bic.w	r2, r3, #16
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f043 0307 	orr.w	r3, r3, #7
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e050      	b.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d013      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a16      	ldr	r2, [pc, #88]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a13      	ldr	r2, [pc, #76]	@ (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10c      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800
 8005f6c:	40000c00 	.word	0x40000c00
 8005f70:	40014000 	.word	0x40014000

08005f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e03f      	b.n	8006006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fc f9cc 	bl	8002338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	@ 0x24
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f829 	bl	8006010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006014:	b0c0      	sub	sp, #256	@ 0x100
 8006016:	af00      	add	r7, sp, #0
 8006018:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	68d9      	ldr	r1, [r3, #12]
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	ea40 0301 	orr.w	r3, r0, r1
 8006038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	431a      	orrs	r2, r3
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006068:	f021 010c 	bic.w	r1, r1, #12
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006076:	430b      	orrs	r3, r1
 8006078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	6999      	ldr	r1, [r3, #24]
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	ea40 0301 	orr.w	r3, r0, r1
 8006096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b8f      	ldr	r3, [pc, #572]	@ (80062dc <UART_SetConfig+0x2cc>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d005      	beq.n	80060b0 <UART_SetConfig+0xa0>
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b8d      	ldr	r3, [pc, #564]	@ (80062e0 <UART_SetConfig+0x2d0>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d104      	bne.n	80060ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b0:	f7ff fa06 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 80060b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060b8:	e003      	b.n	80060c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ba:	f7ff f9ed 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80060be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060cc:	f040 810c 	bne.w	80062e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060e2:	4622      	mov	r2, r4
 80060e4:	462b      	mov	r3, r5
 80060e6:	1891      	adds	r1, r2, r2
 80060e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060ea:	415b      	adcs	r3, r3
 80060ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060f2:	4621      	mov	r1, r4
 80060f4:	eb12 0801 	adds.w	r8, r2, r1
 80060f8:	4629      	mov	r1, r5
 80060fa:	eb43 0901 	adc.w	r9, r3, r1
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800610a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800610e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006112:	4690      	mov	r8, r2
 8006114:	4699      	mov	r9, r3
 8006116:	4623      	mov	r3, r4
 8006118:	eb18 0303 	adds.w	r3, r8, r3
 800611c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006120:	462b      	mov	r3, r5
 8006122:	eb49 0303 	adc.w	r3, r9, r3
 8006126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006136:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800613a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800613e:	460b      	mov	r3, r1
 8006140:	18db      	adds	r3, r3, r3
 8006142:	653b      	str	r3, [r7, #80]	@ 0x50
 8006144:	4613      	mov	r3, r2
 8006146:	eb42 0303 	adc.w	r3, r2, r3
 800614a:	657b      	str	r3, [r7, #84]	@ 0x54
 800614c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006154:	f7fa fd30 	bl	8000bb8 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4b61      	ldr	r3, [pc, #388]	@ (80062e4 <UART_SetConfig+0x2d4>)
 800615e:	fba3 2302 	umull	r2, r3, r3, r2
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	011c      	lsls	r4, r3, #4
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006170:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006178:	4642      	mov	r2, r8
 800617a:	464b      	mov	r3, r9
 800617c:	1891      	adds	r1, r2, r2
 800617e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006180:	415b      	adcs	r3, r3
 8006182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006188:	4641      	mov	r1, r8
 800618a:	eb12 0a01 	adds.w	sl, r2, r1
 800618e:	4649      	mov	r1, r9
 8006190:	eb43 0b01 	adc.w	fp, r3, r1
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a8:	4692      	mov	sl, r2
 80061aa:	469b      	mov	fp, r3
 80061ac:	4643      	mov	r3, r8
 80061ae:	eb1a 0303 	adds.w	r3, sl, r3
 80061b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061b6:	464b      	mov	r3, r9
 80061b8:	eb4b 0303 	adc.w	r3, fp, r3
 80061bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061d4:	460b      	mov	r3, r1
 80061d6:	18db      	adds	r3, r3, r3
 80061d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80061da:	4613      	mov	r3, r2
 80061dc:	eb42 0303 	adc.w	r3, r2, r3
 80061e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061ea:	f7fa fce5 	bl	8000bb8 <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	4b3b      	ldr	r3, [pc, #236]	@ (80062e4 <UART_SetConfig+0x2d4>)
 80061f6:	fba3 2301 	umull	r2, r3, r3, r1
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2264      	movs	r2, #100	@ 0x64
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	1acb      	subs	r3, r1, r3
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800620a:	4b36      	ldr	r3, [pc, #216]	@ (80062e4 <UART_SetConfig+0x2d4>)
 800620c:	fba3 2302 	umull	r2, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006218:	441c      	add	r4, r3
 800621a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006224:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	1891      	adds	r1, r2, r2
 8006232:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006234:	415b      	adcs	r3, r3
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800623c:	4641      	mov	r1, r8
 800623e:	1851      	adds	r1, r2, r1
 8006240:	6339      	str	r1, [r7, #48]	@ 0x30
 8006242:	4649      	mov	r1, r9
 8006244:	414b      	adcs	r3, r1
 8006246:	637b      	str	r3, [r7, #52]	@ 0x34
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006254:	4659      	mov	r1, fp
 8006256:	00cb      	lsls	r3, r1, #3
 8006258:	4651      	mov	r1, sl
 800625a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800625e:	4651      	mov	r1, sl
 8006260:	00ca      	lsls	r2, r1, #3
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	4603      	mov	r3, r0
 8006268:	4642      	mov	r2, r8
 800626a:	189b      	adds	r3, r3, r2
 800626c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006270:	464b      	mov	r3, r9
 8006272:	460a      	mov	r2, r1
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006288:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800628c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006290:	460b      	mov	r3, r1
 8006292:	18db      	adds	r3, r3, r3
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006296:	4613      	mov	r3, r2
 8006298:	eb42 0303 	adc.w	r3, r2, r3
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800629e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062a6:	f7fa fc87 	bl	8000bb8 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <UART_SetConfig+0x2d4>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	@ 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	3332      	adds	r3, #50	@ 0x32
 80062c2:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <UART_SetConfig+0x2d4>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 0207 	and.w	r2, r3, #7
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4422      	add	r2, r4
 80062d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062d8:	e106      	b.n	80064e8 <UART_SetConfig+0x4d8>
 80062da:	bf00      	nop
 80062dc:	40011000 	.word	0x40011000
 80062e0:	40011400 	.word	0x40011400
 80062e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062fa:	4642      	mov	r2, r8
 80062fc:	464b      	mov	r3, r9
 80062fe:	1891      	adds	r1, r2, r2
 8006300:	6239      	str	r1, [r7, #32]
 8006302:	415b      	adcs	r3, r3
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
 8006306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800630a:	4641      	mov	r1, r8
 800630c:	1854      	adds	r4, r2, r1
 800630e:	4649      	mov	r1, r9
 8006310:	eb43 0501 	adc.w	r5, r3, r1
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	00eb      	lsls	r3, r5, #3
 800631e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006322:	00e2      	lsls	r2, r4, #3
 8006324:	4614      	mov	r4, r2
 8006326:	461d      	mov	r5, r3
 8006328:	4643      	mov	r3, r8
 800632a:	18e3      	adds	r3, r4, r3
 800632c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006330:	464b      	mov	r3, r9
 8006332:	eb45 0303 	adc.w	r3, r5, r3
 8006336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006346:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006356:	4629      	mov	r1, r5
 8006358:	008b      	lsls	r3, r1, #2
 800635a:	4621      	mov	r1, r4
 800635c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006360:	4621      	mov	r1, r4
 8006362:	008a      	lsls	r2, r1, #2
 8006364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006368:	f7fa fc26 	bl	8000bb8 <__aeabi_uldivmod>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4b60      	ldr	r3, [pc, #384]	@ (80064f4 <UART_SetConfig+0x4e4>)
 8006372:	fba3 2302 	umull	r2, r3, r3, r2
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	011c      	lsls	r4, r3, #4
 800637a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006384:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	1891      	adds	r1, r2, r2
 8006392:	61b9      	str	r1, [r7, #24]
 8006394:	415b      	adcs	r3, r3
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800639c:	4641      	mov	r1, r8
 800639e:	1851      	adds	r1, r2, r1
 80063a0:	6139      	str	r1, [r7, #16]
 80063a2:	4649      	mov	r1, r9
 80063a4:	414b      	adcs	r3, r1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063b4:	4659      	mov	r1, fp
 80063b6:	00cb      	lsls	r3, r1, #3
 80063b8:	4651      	mov	r1, sl
 80063ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063be:	4651      	mov	r1, sl
 80063c0:	00ca      	lsls	r2, r1, #3
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	4642      	mov	r2, r8
 80063ca:	189b      	adds	r3, r3, r2
 80063cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063d0:	464b      	mov	r3, r9
 80063d2:	460a      	mov	r2, r1
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063f4:	4649      	mov	r1, r9
 80063f6:	008b      	lsls	r3, r1, #2
 80063f8:	4641      	mov	r1, r8
 80063fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fe:	4641      	mov	r1, r8
 8006400:	008a      	lsls	r2, r1, #2
 8006402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006406:	f7fa fbd7 	bl	8000bb8 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4611      	mov	r1, r2
 8006410:	4b38      	ldr	r3, [pc, #224]	@ (80064f4 <UART_SetConfig+0x4e4>)
 8006412:	fba3 2301 	umull	r2, r3, r3, r1
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2264      	movs	r2, #100	@ 0x64
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	3332      	adds	r3, #50	@ 0x32
 8006424:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <UART_SetConfig+0x4e4>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006430:	441c      	add	r4, r3
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	673b      	str	r3, [r7, #112]	@ 0x70
 800643a:	677a      	str	r2, [r7, #116]	@ 0x74
 800643c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	1891      	adds	r1, r2, r2
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	415b      	adcs	r3, r3
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006450:	4641      	mov	r1, r8
 8006452:	1851      	adds	r1, r2, r1
 8006454:	6039      	str	r1, [r7, #0]
 8006456:	4649      	mov	r1, r9
 8006458:	414b      	adcs	r3, r1
 800645a:	607b      	str	r3, [r7, #4]
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006468:	4659      	mov	r1, fp
 800646a:	00cb      	lsls	r3, r1, #3
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006472:	4651      	mov	r1, sl
 8006474:	00ca      	lsls	r2, r1, #3
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	4603      	mov	r3, r0
 800647c:	4642      	mov	r2, r8
 800647e:	189b      	adds	r3, r3, r2
 8006480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006482:	464b      	mov	r3, r9
 8006484:	460a      	mov	r2, r1
 8006486:	eb42 0303 	adc.w	r3, r2, r3
 800648a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	663b      	str	r3, [r7, #96]	@ 0x60
 8006496:	667a      	str	r2, [r7, #100]	@ 0x64
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064a4:	4649      	mov	r1, r9
 80064a6:	008b      	lsls	r3, r1, #2
 80064a8:	4641      	mov	r1, r8
 80064aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ae:	4641      	mov	r1, r8
 80064b0:	008a      	lsls	r2, r1, #2
 80064b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064b6:	f7fa fb7f 	bl	8000bb8 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <UART_SetConfig+0x4e4>)
 80064c0:	fba3 1302 	umull	r1, r3, r3, r2
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	2164      	movs	r1, #100	@ 0x64
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	3332      	adds	r3, #50	@ 0x32
 80064d2:	4a08      	ldr	r2, [pc, #32]	@ (80064f4 <UART_SetConfig+0x4e4>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	f003 020f 	and.w	r2, r3, #15
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4422      	add	r2, r4
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064ee:	46bd      	mov	sp, r7
 80064f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064f4:	51eb851f 	.word	0x51eb851f

080064f8 <__cvt>:
 80064f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	ec57 6b10 	vmov	r6, r7, d0
 8006500:	2f00      	cmp	r7, #0
 8006502:	460c      	mov	r4, r1
 8006504:	4619      	mov	r1, r3
 8006506:	463b      	mov	r3, r7
 8006508:	bfbb      	ittet	lt
 800650a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800650e:	461f      	movlt	r7, r3
 8006510:	2300      	movge	r3, #0
 8006512:	232d      	movlt	r3, #45	@ 0x2d
 8006514:	700b      	strb	r3, [r1, #0]
 8006516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006518:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800651c:	4691      	mov	r9, r2
 800651e:	f023 0820 	bic.w	r8, r3, #32
 8006522:	bfbc      	itt	lt
 8006524:	4632      	movlt	r2, r6
 8006526:	4616      	movlt	r6, r2
 8006528:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800652c:	d005      	beq.n	800653a <__cvt+0x42>
 800652e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006532:	d100      	bne.n	8006536 <__cvt+0x3e>
 8006534:	3401      	adds	r4, #1
 8006536:	2102      	movs	r1, #2
 8006538:	e000      	b.n	800653c <__cvt+0x44>
 800653a:	2103      	movs	r1, #3
 800653c:	ab03      	add	r3, sp, #12
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	ab02      	add	r3, sp, #8
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	ec47 6b10 	vmov	d0, r6, r7
 8006548:	4653      	mov	r3, sl
 800654a:	4622      	mov	r2, r4
 800654c:	f000 fe70 	bl	8007230 <_dtoa_r>
 8006550:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006554:	4605      	mov	r5, r0
 8006556:	d119      	bne.n	800658c <__cvt+0x94>
 8006558:	f019 0f01 	tst.w	r9, #1
 800655c:	d00e      	beq.n	800657c <__cvt+0x84>
 800655e:	eb00 0904 	add.w	r9, r0, r4
 8006562:	2200      	movs	r2, #0
 8006564:	2300      	movs	r3, #0
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800656e:	b108      	cbz	r0, 8006574 <__cvt+0x7c>
 8006570:	f8cd 900c 	str.w	r9, [sp, #12]
 8006574:	2230      	movs	r2, #48	@ 0x30
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	454b      	cmp	r3, r9
 800657a:	d31e      	bcc.n	80065ba <__cvt+0xc2>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006580:	1b5b      	subs	r3, r3, r5
 8006582:	4628      	mov	r0, r5
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	b004      	add	sp, #16
 8006588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006590:	eb00 0904 	add.w	r9, r0, r4
 8006594:	d1e5      	bne.n	8006562 <__cvt+0x6a>
 8006596:	7803      	ldrb	r3, [r0, #0]
 8006598:	2b30      	cmp	r3, #48	@ 0x30
 800659a:	d10a      	bne.n	80065b2 <__cvt+0xba>
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7fa fa98 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a8:	b918      	cbnz	r0, 80065b2 <__cvt+0xba>
 80065aa:	f1c4 0401 	rsb	r4, r4, #1
 80065ae:	f8ca 4000 	str.w	r4, [sl]
 80065b2:	f8da 3000 	ldr.w	r3, [sl]
 80065b6:	4499      	add	r9, r3
 80065b8:	e7d3      	b.n	8006562 <__cvt+0x6a>
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	9103      	str	r1, [sp, #12]
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e7d9      	b.n	8006576 <__cvt+0x7e>

080065c2 <__exponent>:
 80065c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c4:	2900      	cmp	r1, #0
 80065c6:	bfba      	itte	lt
 80065c8:	4249      	neglt	r1, r1
 80065ca:	232d      	movlt	r3, #45	@ 0x2d
 80065cc:	232b      	movge	r3, #43	@ 0x2b
 80065ce:	2909      	cmp	r1, #9
 80065d0:	7002      	strb	r2, [r0, #0]
 80065d2:	7043      	strb	r3, [r0, #1]
 80065d4:	dd29      	ble.n	800662a <__exponent+0x68>
 80065d6:	f10d 0307 	add.w	r3, sp, #7
 80065da:	461d      	mov	r5, r3
 80065dc:	270a      	movs	r7, #10
 80065de:	461a      	mov	r2, r3
 80065e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80065e4:	fb07 1416 	mls	r4, r7, r6, r1
 80065e8:	3430      	adds	r4, #48	@ 0x30
 80065ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065ee:	460c      	mov	r4, r1
 80065f0:	2c63      	cmp	r4, #99	@ 0x63
 80065f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80065f6:	4631      	mov	r1, r6
 80065f8:	dcf1      	bgt.n	80065de <__exponent+0x1c>
 80065fa:	3130      	adds	r1, #48	@ 0x30
 80065fc:	1e94      	subs	r4, r2, #2
 80065fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006602:	1c41      	adds	r1, r0, #1
 8006604:	4623      	mov	r3, r4
 8006606:	42ab      	cmp	r3, r5
 8006608:	d30a      	bcc.n	8006620 <__exponent+0x5e>
 800660a:	f10d 0309 	add.w	r3, sp, #9
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	42ac      	cmp	r4, r5
 8006612:	bf88      	it	hi
 8006614:	2300      	movhi	r3, #0
 8006616:	3302      	adds	r3, #2
 8006618:	4403      	add	r3, r0
 800661a:	1a18      	subs	r0, r3, r0
 800661c:	b003      	add	sp, #12
 800661e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006620:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006624:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006628:	e7ed      	b.n	8006606 <__exponent+0x44>
 800662a:	2330      	movs	r3, #48	@ 0x30
 800662c:	3130      	adds	r1, #48	@ 0x30
 800662e:	7083      	strb	r3, [r0, #2]
 8006630:	70c1      	strb	r1, [r0, #3]
 8006632:	1d03      	adds	r3, r0, #4
 8006634:	e7f1      	b.n	800661a <__exponent+0x58>
	...

08006638 <_printf_float>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	b08d      	sub	sp, #52	@ 0x34
 800663e:	460c      	mov	r4, r1
 8006640:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006644:	4616      	mov	r6, r2
 8006646:	461f      	mov	r7, r3
 8006648:	4605      	mov	r5, r0
 800664a:	f000 fcef 	bl	800702c <_localeconv_r>
 800664e:	6803      	ldr	r3, [r0, #0]
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	4618      	mov	r0, r3
 8006654:	f7f9 fe14 	bl	8000280 <strlen>
 8006658:	2300      	movs	r3, #0
 800665a:	930a      	str	r3, [sp, #40]	@ 0x28
 800665c:	f8d8 3000 	ldr.w	r3, [r8]
 8006660:	9005      	str	r0, [sp, #20]
 8006662:	3307      	adds	r3, #7
 8006664:	f023 0307 	bic.w	r3, r3, #7
 8006668:	f103 0208 	add.w	r2, r3, #8
 800666c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006670:	f8d4 b000 	ldr.w	fp, [r4]
 8006674:	f8c8 2000 	str.w	r2, [r8]
 8006678:	e9d3 8900 	ldrd	r8, r9, [r3]
 800667c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006680:	9307      	str	r3, [sp, #28]
 8006682:	f8cd 8018 	str.w	r8, [sp, #24]
 8006686:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800668a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668e:	4b9c      	ldr	r3, [pc, #624]	@ (8006900 <_printf_float+0x2c8>)
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	f7fa fa52 	bl	8000b3c <__aeabi_dcmpun>
 8006698:	bb70      	cbnz	r0, 80066f8 <_printf_float+0xc0>
 800669a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800669e:	4b98      	ldr	r3, [pc, #608]	@ (8006900 <_printf_float+0x2c8>)
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	f7fa fa2c 	bl	8000b00 <__aeabi_dcmple>
 80066a8:	bb30      	cbnz	r0, 80066f8 <_printf_float+0xc0>
 80066aa:	2200      	movs	r2, #0
 80066ac:	2300      	movs	r3, #0
 80066ae:	4640      	mov	r0, r8
 80066b0:	4649      	mov	r1, r9
 80066b2:	f7fa fa1b 	bl	8000aec <__aeabi_dcmplt>
 80066b6:	b110      	cbz	r0, 80066be <_printf_float+0x86>
 80066b8:	232d      	movs	r3, #45	@ 0x2d
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066be:	4a91      	ldr	r2, [pc, #580]	@ (8006904 <_printf_float+0x2cc>)
 80066c0:	4b91      	ldr	r3, [pc, #580]	@ (8006908 <_printf_float+0x2d0>)
 80066c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066c6:	bf94      	ite	ls
 80066c8:	4690      	movls	r8, r2
 80066ca:	4698      	movhi	r8, r3
 80066cc:	2303      	movs	r3, #3
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	f02b 0304 	bic.w	r3, fp, #4
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	f04f 0900 	mov.w	r9, #0
 80066da:	9700      	str	r7, [sp, #0]
 80066dc:	4633      	mov	r3, r6
 80066de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066e0:	4621      	mov	r1, r4
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 f9d2 	bl	8006a8c <_printf_common>
 80066e8:	3001      	adds	r0, #1
 80066ea:	f040 808d 	bne.w	8006808 <_printf_float+0x1d0>
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295
 80066f2:	b00d      	add	sp, #52	@ 0x34
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	4640      	mov	r0, r8
 80066fe:	4649      	mov	r1, r9
 8006700:	f7fa fa1c 	bl	8000b3c <__aeabi_dcmpun>
 8006704:	b140      	cbz	r0, 8006718 <_printf_float+0xe0>
 8006706:	464b      	mov	r3, r9
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbc      	itt	lt
 800670c:	232d      	movlt	r3, #45	@ 0x2d
 800670e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006712:	4a7e      	ldr	r2, [pc, #504]	@ (800690c <_printf_float+0x2d4>)
 8006714:	4b7e      	ldr	r3, [pc, #504]	@ (8006910 <_printf_float+0x2d8>)
 8006716:	e7d4      	b.n	80066c2 <_printf_float+0x8a>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800671e:	9206      	str	r2, [sp, #24]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	d13b      	bne.n	800679c <_printf_float+0x164>
 8006724:	2306      	movs	r3, #6
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800672c:	2300      	movs	r3, #0
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	9303      	str	r3, [sp, #12]
 8006732:	ab0a      	add	r3, sp, #40	@ 0x28
 8006734:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006738:	ab09      	add	r3, sp, #36	@ 0x24
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	ec49 8b10 	vmov	d0, r8, r9
 8006742:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006746:	4628      	mov	r0, r5
 8006748:	f7ff fed6 	bl	80064f8 <__cvt>
 800674c:	9b06      	ldr	r3, [sp, #24]
 800674e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006750:	2b47      	cmp	r3, #71	@ 0x47
 8006752:	4680      	mov	r8, r0
 8006754:	d129      	bne.n	80067aa <_printf_float+0x172>
 8006756:	1cc8      	adds	r0, r1, #3
 8006758:	db02      	blt.n	8006760 <_printf_float+0x128>
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	4299      	cmp	r1, r3
 800675e:	dd41      	ble.n	80067e4 <_printf_float+0x1ac>
 8006760:	f1aa 0a02 	sub.w	sl, sl, #2
 8006764:	fa5f fa8a 	uxtb.w	sl, sl
 8006768:	3901      	subs	r1, #1
 800676a:	4652      	mov	r2, sl
 800676c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006770:	9109      	str	r1, [sp, #36]	@ 0x24
 8006772:	f7ff ff26 	bl	80065c2 <__exponent>
 8006776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006778:	1813      	adds	r3, r2, r0
 800677a:	2a01      	cmp	r2, #1
 800677c:	4681      	mov	r9, r0
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	dc02      	bgt.n	8006788 <_printf_float+0x150>
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	07d2      	lsls	r2, r2, #31
 8006786:	d501      	bpl.n	800678c <_printf_float+0x154>
 8006788:	3301      	adds	r3, #1
 800678a:	6123      	str	r3, [r4, #16]
 800678c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0a2      	beq.n	80066da <_printf_float+0xa2>
 8006794:	232d      	movs	r3, #45	@ 0x2d
 8006796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800679a:	e79e      	b.n	80066da <_printf_float+0xa2>
 800679c:	9a06      	ldr	r2, [sp, #24]
 800679e:	2a47      	cmp	r2, #71	@ 0x47
 80067a0:	d1c2      	bne.n	8006728 <_printf_float+0xf0>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1c0      	bne.n	8006728 <_printf_float+0xf0>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7bd      	b.n	8006726 <_printf_float+0xee>
 80067aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067ae:	d9db      	bls.n	8006768 <_printf_float+0x130>
 80067b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067b4:	d118      	bne.n	80067e8 <_printf_float+0x1b0>
 80067b6:	2900      	cmp	r1, #0
 80067b8:	6863      	ldr	r3, [r4, #4]
 80067ba:	dd0b      	ble.n	80067d4 <_printf_float+0x19c>
 80067bc:	6121      	str	r1, [r4, #16]
 80067be:	b913      	cbnz	r3, 80067c6 <_printf_float+0x18e>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	07d0      	lsls	r0, r2, #31
 80067c4:	d502      	bpl.n	80067cc <_printf_float+0x194>
 80067c6:	3301      	adds	r3, #1
 80067c8:	440b      	add	r3, r1
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067ce:	f04f 0900 	mov.w	r9, #0
 80067d2:	e7db      	b.n	800678c <_printf_float+0x154>
 80067d4:	b913      	cbnz	r3, 80067dc <_printf_float+0x1a4>
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	07d2      	lsls	r2, r2, #31
 80067da:	d501      	bpl.n	80067e0 <_printf_float+0x1a8>
 80067dc:	3302      	adds	r3, #2
 80067de:	e7f4      	b.n	80067ca <_printf_float+0x192>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e7f2      	b.n	80067ca <_printf_float+0x192>
 80067e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ea:	4299      	cmp	r1, r3
 80067ec:	db05      	blt.n	80067fa <_printf_float+0x1c2>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	6121      	str	r1, [r4, #16]
 80067f2:	07d8      	lsls	r0, r3, #31
 80067f4:	d5ea      	bpl.n	80067cc <_printf_float+0x194>
 80067f6:	1c4b      	adds	r3, r1, #1
 80067f8:	e7e7      	b.n	80067ca <_printf_float+0x192>
 80067fa:	2900      	cmp	r1, #0
 80067fc:	bfd4      	ite	le
 80067fe:	f1c1 0202 	rsble	r2, r1, #2
 8006802:	2201      	movgt	r2, #1
 8006804:	4413      	add	r3, r2
 8006806:	e7e0      	b.n	80067ca <_printf_float+0x192>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	055a      	lsls	r2, r3, #21
 800680c:	d407      	bmi.n	800681e <_printf_float+0x1e6>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	4642      	mov	r2, r8
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	d12b      	bne.n	8006874 <_printf_float+0x23c>
 800681c:	e767      	b.n	80066ee <_printf_float+0xb6>
 800681e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006822:	f240 80dd 	bls.w	80069e0 <_printf_float+0x3a8>
 8006826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800682a:	2200      	movs	r2, #0
 800682c:	2300      	movs	r3, #0
 800682e:	f7fa f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8006832:	2800      	cmp	r0, #0
 8006834:	d033      	beq.n	800689e <_printf_float+0x266>
 8006836:	4a37      	ldr	r2, [pc, #220]	@ (8006914 <_printf_float+0x2dc>)
 8006838:	2301      	movs	r3, #1
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f af54 	beq.w	80066ee <_printf_float+0xb6>
 8006846:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800684a:	4543      	cmp	r3, r8
 800684c:	db02      	blt.n	8006854 <_printf_float+0x21c>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	07d8      	lsls	r0, r3, #31
 8006852:	d50f      	bpl.n	8006874 <_printf_float+0x23c>
 8006854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af45 	beq.w	80066ee <_printf_float+0xb6>
 8006864:	f04f 0900 	mov.w	r9, #0
 8006868:	f108 38ff 	add.w	r8, r8, #4294967295
 800686c:	f104 0a1a 	add.w	sl, r4, #26
 8006870:	45c8      	cmp	r8, r9
 8006872:	dc09      	bgt.n	8006888 <_printf_float+0x250>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	f100 8103 	bmi.w	8006a82 <_printf_float+0x44a>
 800687c:	68e0      	ldr	r0, [r4, #12]
 800687e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006880:	4298      	cmp	r0, r3
 8006882:	bfb8      	it	lt
 8006884:	4618      	movlt	r0, r3
 8006886:	e734      	b.n	80066f2 <_printf_float+0xba>
 8006888:	2301      	movs	r3, #1
 800688a:	4652      	mov	r2, sl
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f af2b 	beq.w	80066ee <_printf_float+0xb6>
 8006898:	f109 0901 	add.w	r9, r9, #1
 800689c:	e7e8      	b.n	8006870 <_printf_float+0x238>
 800689e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dc39      	bgt.n	8006918 <_printf_float+0x2e0>
 80068a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <_printf_float+0x2dc>)
 80068a6:	2301      	movs	r3, #1
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f af1d 	beq.w	80066ee <_printf_float+0xb6>
 80068b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80068b8:	ea59 0303 	orrs.w	r3, r9, r3
 80068bc:	d102      	bne.n	80068c4 <_printf_float+0x28c>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	07d9      	lsls	r1, r3, #31
 80068c2:	d5d7      	bpl.n	8006874 <_printf_float+0x23c>
 80068c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	47b8      	blx	r7
 80068ce:	3001      	adds	r0, #1
 80068d0:	f43f af0d 	beq.w	80066ee <_printf_float+0xb6>
 80068d4:	f04f 0a00 	mov.w	sl, #0
 80068d8:	f104 0b1a 	add.w	fp, r4, #26
 80068dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068de:	425b      	negs	r3, r3
 80068e0:	4553      	cmp	r3, sl
 80068e2:	dc01      	bgt.n	80068e8 <_printf_float+0x2b0>
 80068e4:	464b      	mov	r3, r9
 80068e6:	e793      	b.n	8006810 <_printf_float+0x1d8>
 80068e8:	2301      	movs	r3, #1
 80068ea:	465a      	mov	r2, fp
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f aefb 	beq.w	80066ee <_printf_float+0xb6>
 80068f8:	f10a 0a01 	add.w	sl, sl, #1
 80068fc:	e7ee      	b.n	80068dc <_printf_float+0x2a4>
 80068fe:	bf00      	nop
 8006900:	7fefffff 	.word	0x7fefffff
 8006904:	08009968 	.word	0x08009968
 8006908:	0800996c 	.word	0x0800996c
 800690c:	08009970 	.word	0x08009970
 8006910:	08009974 	.word	0x08009974
 8006914:	08009978 	.word	0x08009978
 8006918:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800691a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800691e:	4553      	cmp	r3, sl
 8006920:	bfa8      	it	ge
 8006922:	4653      	movge	r3, sl
 8006924:	2b00      	cmp	r3, #0
 8006926:	4699      	mov	r9, r3
 8006928:	dc36      	bgt.n	8006998 <_printf_float+0x360>
 800692a:	f04f 0b00 	mov.w	fp, #0
 800692e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006932:	f104 021a 	add.w	r2, r4, #26
 8006936:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006938:	9306      	str	r3, [sp, #24]
 800693a:	eba3 0309 	sub.w	r3, r3, r9
 800693e:	455b      	cmp	r3, fp
 8006940:	dc31      	bgt.n	80069a6 <_printf_float+0x36e>
 8006942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006944:	459a      	cmp	sl, r3
 8006946:	dc3a      	bgt.n	80069be <_printf_float+0x386>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	07da      	lsls	r2, r3, #31
 800694c:	d437      	bmi.n	80069be <_printf_float+0x386>
 800694e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006950:	ebaa 0903 	sub.w	r9, sl, r3
 8006954:	9b06      	ldr	r3, [sp, #24]
 8006956:	ebaa 0303 	sub.w	r3, sl, r3
 800695a:	4599      	cmp	r9, r3
 800695c:	bfa8      	it	ge
 800695e:	4699      	movge	r9, r3
 8006960:	f1b9 0f00 	cmp.w	r9, #0
 8006964:	dc33      	bgt.n	80069ce <_printf_float+0x396>
 8006966:	f04f 0800 	mov.w	r8, #0
 800696a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800696e:	f104 0b1a 	add.w	fp, r4, #26
 8006972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006974:	ebaa 0303 	sub.w	r3, sl, r3
 8006978:	eba3 0309 	sub.w	r3, r3, r9
 800697c:	4543      	cmp	r3, r8
 800697e:	f77f af79 	ble.w	8006874 <_printf_float+0x23c>
 8006982:	2301      	movs	r3, #1
 8006984:	465a      	mov	r2, fp
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f aeae 	beq.w	80066ee <_printf_float+0xb6>
 8006992:	f108 0801 	add.w	r8, r8, #1
 8006996:	e7ec      	b.n	8006972 <_printf_float+0x33a>
 8006998:	4642      	mov	r2, r8
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	d1c2      	bne.n	800692a <_printf_float+0x2f2>
 80069a4:	e6a3      	b.n	80066ee <_printf_float+0xb6>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	9206      	str	r2, [sp, #24]
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f ae9c 	beq.w	80066ee <_printf_float+0xb6>
 80069b6:	9a06      	ldr	r2, [sp, #24]
 80069b8:	f10b 0b01 	add.w	fp, fp, #1
 80069bc:	e7bb      	b.n	8006936 <_printf_float+0x2fe>
 80069be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	d1c0      	bne.n	800694e <_printf_float+0x316>
 80069cc:	e68f      	b.n	80066ee <_printf_float+0xb6>
 80069ce:	9a06      	ldr	r2, [sp, #24]
 80069d0:	464b      	mov	r3, r9
 80069d2:	4442      	add	r2, r8
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	d1c3      	bne.n	8006966 <_printf_float+0x32e>
 80069de:	e686      	b.n	80066ee <_printf_float+0xb6>
 80069e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069e4:	f1ba 0f01 	cmp.w	sl, #1
 80069e8:	dc01      	bgt.n	80069ee <_printf_float+0x3b6>
 80069ea:	07db      	lsls	r3, r3, #31
 80069ec:	d536      	bpl.n	8006a5c <_printf_float+0x424>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4642      	mov	r2, r8
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f ae78 	beq.w	80066ee <_printf_float+0xb6>
 80069fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae70 	beq.w	80066ee <_printf_float+0xb6>
 8006a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a12:	2200      	movs	r2, #0
 8006a14:	2300      	movs	r3, #0
 8006a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a1a:	f7fa f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a1e:	b9c0      	cbnz	r0, 8006a52 <_printf_float+0x41a>
 8006a20:	4653      	mov	r3, sl
 8006a22:	f108 0201 	add.w	r2, r8, #1
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d10c      	bne.n	8006a4a <_printf_float+0x412>
 8006a30:	e65d      	b.n	80066ee <_printf_float+0xb6>
 8006a32:	2301      	movs	r3, #1
 8006a34:	465a      	mov	r2, fp
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f ae56 	beq.w	80066ee <_printf_float+0xb6>
 8006a42:	f108 0801 	add.w	r8, r8, #1
 8006a46:	45d0      	cmp	r8, sl
 8006a48:	dbf3      	blt.n	8006a32 <_printf_float+0x3fa>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a50:	e6df      	b.n	8006812 <_printf_float+0x1da>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0b1a 	add.w	fp, r4, #26
 8006a5a:	e7f4      	b.n	8006a46 <_printf_float+0x40e>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4642      	mov	r2, r8
 8006a60:	e7e1      	b.n	8006a26 <_printf_float+0x3ee>
 8006a62:	2301      	movs	r3, #1
 8006a64:	464a      	mov	r2, r9
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae3e 	beq.w	80066ee <_printf_float+0xb6>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	dcf0      	bgt.n	8006a62 <_printf_float+0x42a>
 8006a80:	e6fc      	b.n	800687c <_printf_float+0x244>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0919 	add.w	r9, r4, #25
 8006a8a:	e7f4      	b.n	8006a76 <_printf_float+0x43e>

08006a8c <_printf_common>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4616      	mov	r6, r2
 8006a92:	4698      	mov	r8, r3
 8006a94:	688a      	ldr	r2, [r1, #8]
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bfb8      	it	lt
 8006aa0:	4613      	movlt	r3, r2
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_printf_common+0x26>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	0699      	lsls	r1, r3, #26
 8006ab6:	bf42      	ittt	mi
 8006ab8:	6833      	ldrmi	r3, [r6, #0]
 8006aba:	3302      	addmi	r3, #2
 8006abc:	6033      	strmi	r3, [r6, #0]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d106      	bne.n	8006ad4 <_printf_common+0x48>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc26      	bgt.n	8006b22 <_printf_common+0x96>
 8006ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ad8:	6822      	ldr	r2, [r4, #0]
 8006ada:	3b00      	subs	r3, #0
 8006adc:	bf18      	it	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d42b      	bmi.n	8006b3c <_printf_common+0xb0>
 8006ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ae8:	4641      	mov	r1, r8
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c8      	blx	r9
 8006aee:	3001      	adds	r0, #1
 8006af0:	d01e      	beq.n	8006b30 <_printf_common+0xa4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6922      	ldr	r2, [r4, #16]
 8006af6:	f003 0306 	and.w	r3, r3, #6
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	bf02      	ittt	eq
 8006afe:	68e5      	ldreq	r5, [r4, #12]
 8006b00:	6833      	ldreq	r3, [r6, #0]
 8006b02:	1aed      	subeq	r5, r5, r3
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	bf0c      	ite	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	2500      	movne	r5, #0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bfc4      	itt	gt
 8006b12:	1a9b      	subgt	r3, r3, r2
 8006b14:	18ed      	addgt	r5, r5, r3
 8006b16:	2600      	movs	r6, #0
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xc8>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xa8>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4641      	mov	r1, r8
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c8      	blx	r9
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c6      	b.n	8006aca <_printf_common+0x3e>
 8006b3c:	18e1      	adds	r1, r4, r3
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2030      	movs	r0, #48	@ 0x30
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b46:	4422      	add	r2, r4
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7c7      	b.n	8006ae4 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4641      	mov	r1, r8
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c8      	blx	r9
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa4>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x8e>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	7e0f      	ldrb	r7, [r1, #24]
 8006b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b70:	2f78      	cmp	r7, #120	@ 0x78
 8006b72:	4691      	mov	r9, r2
 8006b74:	4680      	mov	r8, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	@ 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d2 	beq.w	8006d2e <_printf_i+0x1c6>
 8006b8a:	2f58      	cmp	r7, #88	@ 0x58
 8006b8c:	f000 80b9 	beq.w	8006d02 <_printf_i+0x19a>
 8006b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d15 	.word	0x08006d15
 8006bd8:	08006c3f 	.word	0x08006c3f
 8006bdc:	08006ccf 	.word	0x08006ccf
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d37 	.word	0x08006d37
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c3f 	.word	0x08006c3f
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006cd7 	.word	0x08006cd7
 8006c00:	6833      	ldr	r3, [r6, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6032      	str	r2, [r6, #0]
 8006c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e09d      	b.n	8006d50 <_printf_i+0x1e8>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1d19      	adds	r1, r3, #4
 8006c1a:	6031      	str	r1, [r6, #0]
 8006c1c:	0606      	lsls	r6, r0, #24
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0xbc>
 8006c20:	681d      	ldr	r5, [r3, #0]
 8006c22:	e003      	b.n	8006c2c <_printf_i+0xc4>
 8006c24:	0645      	lsls	r5, r0, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0xb8>
 8006c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	da03      	bge.n	8006c38 <_printf_i+0xd0>
 8006c30:	232d      	movs	r3, #45	@ 0x2d
 8006c32:	426d      	negs	r5, r5
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c38:	4859      	ldr	r0, [pc, #356]	@ (8006da0 <_printf_i+0x238>)
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e011      	b.n	8006c62 <_printf_i+0xfa>
 8006c3e:	6821      	ldr	r1, [r4, #0]
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	0608      	lsls	r0, r1, #24
 8006c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c48:	d402      	bmi.n	8006c50 <_printf_i+0xe8>
 8006c4a:	0649      	lsls	r1, r1, #25
 8006c4c:	bf48      	it	mi
 8006c4e:	b2ad      	uxthmi	r5, r5
 8006c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c52:	4853      	ldr	r0, [pc, #332]	@ (8006da0 <_printf_i+0x238>)
 8006c54:	6033      	str	r3, [r6, #0]
 8006c56:	bf14      	ite	ne
 8006c58:	230a      	movne	r3, #10
 8006c5a:	2308      	moveq	r3, #8
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c62:	6866      	ldr	r6, [r4, #4]
 8006c64:	60a6      	str	r6, [r4, #8]
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	bfa2      	ittt	ge
 8006c6a:	6821      	ldrge	r1, [r4, #0]
 8006c6c:	f021 0104 	bicge.w	r1, r1, #4
 8006c70:	6021      	strge	r1, [r4, #0]
 8006c72:	b90d      	cbnz	r5, 8006c78 <_printf_i+0x110>
 8006c74:	2e00      	cmp	r6, #0
 8006c76:	d04b      	beq.n	8006d10 <_printf_i+0x1a8>
 8006c78:	4616      	mov	r6, r2
 8006c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c82:	5dc7      	ldrb	r7, [r0, r7]
 8006c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c88:	462f      	mov	r7, r5
 8006c8a:	42bb      	cmp	r3, r7
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	d9f4      	bls.n	8006c7a <_printf_i+0x112>
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d10b      	bne.n	8006cac <_printf_i+0x144>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	07df      	lsls	r7, r3, #31
 8006c98:	d508      	bpl.n	8006cac <_printf_i+0x144>
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	6861      	ldr	r1, [r4, #4]
 8006c9e:	4299      	cmp	r1, r3
 8006ca0:	bfde      	ittt	le
 8006ca2:	2330      	movle	r3, #48	@ 0x30
 8006ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ca8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cac:	1b92      	subs	r2, r2, r6
 8006cae:	6122      	str	r2, [r4, #16]
 8006cb0:	f8cd a000 	str.w	sl, [sp]
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	aa03      	add	r2, sp, #12
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4640      	mov	r0, r8
 8006cbc:	f7ff fee6 	bl	8006a8c <_printf_common>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d14a      	bne.n	8006d5a <_printf_i+0x1f2>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	b004      	add	sp, #16
 8006cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	f043 0320 	orr.w	r3, r3, #32
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	4833      	ldr	r0, [pc, #204]	@ (8006da4 <_printf_i+0x23c>)
 8006cd8:	2778      	movs	r7, #120	@ 0x78
 8006cda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	6831      	ldr	r1, [r6, #0]
 8006ce2:	061f      	lsls	r7, r3, #24
 8006ce4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ce8:	d402      	bmi.n	8006cf0 <_printf_i+0x188>
 8006cea:	065f      	lsls	r7, r3, #25
 8006cec:	bf48      	it	mi
 8006cee:	b2ad      	uxthmi	r5, r5
 8006cf0:	6031      	str	r1, [r6, #0]
 8006cf2:	07d9      	lsls	r1, r3, #31
 8006cf4:	bf44      	itt	mi
 8006cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cfa:	6023      	strmi	r3, [r4, #0]
 8006cfc:	b11d      	cbz	r5, 8006d06 <_printf_i+0x19e>
 8006cfe:	2310      	movs	r3, #16
 8006d00:	e7ac      	b.n	8006c5c <_printf_i+0xf4>
 8006d02:	4827      	ldr	r0, [pc, #156]	@ (8006da0 <_printf_i+0x238>)
 8006d04:	e7e9      	b.n	8006cda <_printf_i+0x172>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	f023 0320 	bic.w	r3, r3, #32
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	e7f6      	b.n	8006cfe <_printf_i+0x196>
 8006d10:	4616      	mov	r6, r2
 8006d12:	e7bd      	b.n	8006c90 <_printf_i+0x128>
 8006d14:	6833      	ldr	r3, [r6, #0]
 8006d16:	6825      	ldr	r5, [r4, #0]
 8006d18:	6961      	ldr	r1, [r4, #20]
 8006d1a:	1d18      	adds	r0, r3, #4
 8006d1c:	6030      	str	r0, [r6, #0]
 8006d1e:	062e      	lsls	r6, r5, #24
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0x1c0>
 8006d24:	6019      	str	r1, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <_printf_i+0x1c6>
 8006d28:	0668      	lsls	r0, r5, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0x1bc>
 8006d2c:	8019      	strh	r1, [r3, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	4616      	mov	r6, r2
 8006d34:	e7bc      	b.n	8006cb0 <_printf_i+0x148>
 8006d36:	6833      	ldr	r3, [r6, #0]
 8006d38:	1d1a      	adds	r2, r3, #4
 8006d3a:	6032      	str	r2, [r6, #0]
 8006d3c:	681e      	ldr	r6, [r3, #0]
 8006d3e:	6862      	ldr	r2, [r4, #4]
 8006d40:	2100      	movs	r1, #0
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7f9 fa4c 	bl	80001e0 <memchr>
 8006d48:	b108      	cbz	r0, 8006d4e <_printf_i+0x1e6>
 8006d4a:	1b80      	subs	r0, r0, r6
 8006d4c:	6060      	str	r0, [r4, #4]
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	2300      	movs	r3, #0
 8006d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d58:	e7aa      	b.n	8006cb0 <_printf_i+0x148>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4640      	mov	r0, r8
 8006d62:	47d0      	blx	sl
 8006d64:	3001      	adds	r0, #1
 8006d66:	d0ad      	beq.n	8006cc4 <_printf_i+0x15c>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	079b      	lsls	r3, r3, #30
 8006d6c:	d413      	bmi.n	8006d96 <_printf_i+0x22e>
 8006d6e:	68e0      	ldr	r0, [r4, #12]
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	4298      	cmp	r0, r3
 8006d74:	bfb8      	it	lt
 8006d76:	4618      	movlt	r0, r3
 8006d78:	e7a6      	b.n	8006cc8 <_printf_i+0x160>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4640      	mov	r0, r8
 8006d82:	47d0      	blx	sl
 8006d84:	3001      	adds	r0, #1
 8006d86:	d09d      	beq.n	8006cc4 <_printf_i+0x15c>
 8006d88:	3501      	adds	r5, #1
 8006d8a:	68e3      	ldr	r3, [r4, #12]
 8006d8c:	9903      	ldr	r1, [sp, #12]
 8006d8e:	1a5b      	subs	r3, r3, r1
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	dcf2      	bgt.n	8006d7a <_printf_i+0x212>
 8006d94:	e7eb      	b.n	8006d6e <_printf_i+0x206>
 8006d96:	2500      	movs	r5, #0
 8006d98:	f104 0619 	add.w	r6, r4, #25
 8006d9c:	e7f5      	b.n	8006d8a <_printf_i+0x222>
 8006d9e:	bf00      	nop
 8006da0:	0800997a 	.word	0x0800997a
 8006da4:	0800998b 	.word	0x0800998b

08006da8 <std>:
 8006da8:	2300      	movs	r3, #0
 8006daa:	b510      	push	{r4, lr}
 8006dac:	4604      	mov	r4, r0
 8006dae:	e9c0 3300 	strd	r3, r3, [r0]
 8006db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006db6:	6083      	str	r3, [r0, #8]
 8006db8:	8181      	strh	r1, [r0, #12]
 8006dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dbc:	81c2      	strh	r2, [r0, #14]
 8006dbe:	6183      	str	r3, [r0, #24]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	305c      	adds	r0, #92	@ 0x5c
 8006dc6:	f000 f928 	bl	800701a <memset>
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <std+0x58>)
 8006dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <std+0x5c>)
 8006dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <std+0x60>)
 8006dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e0c <std+0x64>)
 8006dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x68>)
 8006ddc:	6224      	str	r4, [r4, #32]
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d006      	beq.n	8006df0 <std+0x48>
 8006de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006de6:	4294      	cmp	r4, r2
 8006de8:	d002      	beq.n	8006df0 <std+0x48>
 8006dea:	33d0      	adds	r3, #208	@ 0xd0
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d105      	bne.n	8006dfc <std+0x54>
 8006df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df8:	f000 b98c 	b.w	8007114 <__retarget_lock_init_recursive>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	08006f95 	.word	0x08006f95
 8006e04:	08006fb7 	.word	0x08006fb7
 8006e08:	08006fef 	.word	0x08006fef
 8006e0c:	08007013 	.word	0x08007013
 8006e10:	200007b8 	.word	0x200007b8

08006e14 <stdio_exit_handler>:
 8006e14:	4a02      	ldr	r2, [pc, #8]	@ (8006e20 <stdio_exit_handler+0xc>)
 8006e16:	4903      	ldr	r1, [pc, #12]	@ (8006e24 <stdio_exit_handler+0x10>)
 8006e18:	4803      	ldr	r0, [pc, #12]	@ (8006e28 <stdio_exit_handler+0x14>)
 8006e1a:	f000 b869 	b.w	8006ef0 <_fwalk_sglue>
 8006e1e:	bf00      	nop
 8006e20:	20000014 	.word	0x20000014
 8006e24:	08008a75 	.word	0x08008a75
 8006e28:	20000024 	.word	0x20000024

08006e2c <cleanup_stdio>:
 8006e2c:	6841      	ldr	r1, [r0, #4]
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <cleanup_stdio+0x34>)
 8006e30:	4299      	cmp	r1, r3
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	d001      	beq.n	8006e3c <cleanup_stdio+0x10>
 8006e38:	f001 fe1c 	bl	8008a74 <_fflush_r>
 8006e3c:	68a1      	ldr	r1, [r4, #8]
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <cleanup_stdio+0x38>)
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <cleanup_stdio+0x1e>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f001 fe15 	bl	8008a74 <_fflush_r>
 8006e4a:	68e1      	ldr	r1, [r4, #12]
 8006e4c:	4b06      	ldr	r3, [pc, #24]	@ (8006e68 <cleanup_stdio+0x3c>)
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d004      	beq.n	8006e5c <cleanup_stdio+0x30>
 8006e52:	4620      	mov	r0, r4
 8006e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e58:	f001 be0c 	b.w	8008a74 <_fflush_r>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	200007b8 	.word	0x200007b8
 8006e64:	20000820 	.word	0x20000820
 8006e68:	20000888 	.word	0x20000888

08006e6c <global_stdio_init.part.0>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <global_stdio_init.part.0+0x30>)
 8006e70:	4c0b      	ldr	r4, [pc, #44]	@ (8006ea0 <global_stdio_init.part.0+0x34>)
 8006e72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea4 <global_stdio_init.part.0+0x38>)
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	4620      	mov	r0, r4
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2104      	movs	r1, #4
 8006e7c:	f7ff ff94 	bl	8006da8 <std>
 8006e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e84:	2201      	movs	r2, #1
 8006e86:	2109      	movs	r1, #9
 8006e88:	f7ff ff8e 	bl	8006da8 <std>
 8006e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e90:	2202      	movs	r2, #2
 8006e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e96:	2112      	movs	r1, #18
 8006e98:	f7ff bf86 	b.w	8006da8 <std>
 8006e9c:	200008f0 	.word	0x200008f0
 8006ea0:	200007b8 	.word	0x200007b8
 8006ea4:	08006e15 	.word	0x08006e15

08006ea8 <__sfp_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	@ (8006eb0 <__sfp_lock_acquire+0x8>)
 8006eaa:	f000 b934 	b.w	8007116 <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	200008f9 	.word	0x200008f9

08006eb4 <__sfp_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	@ (8006ebc <__sfp_lock_release+0x8>)
 8006eb6:	f000 b92f 	b.w	8007118 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	200008f9 	.word	0x200008f9

08006ec0 <__sinit>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	f7ff fff0 	bl	8006ea8 <__sfp_lock_acquire>
 8006ec8:	6a23      	ldr	r3, [r4, #32]
 8006eca:	b11b      	cbz	r3, 8006ed4 <__sinit+0x14>
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f7ff bff0 	b.w	8006eb4 <__sfp_lock_release>
 8006ed4:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <__sinit+0x28>)
 8006ed6:	6223      	str	r3, [r4, #32]
 8006ed8:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <__sinit+0x2c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f5      	bne.n	8006ecc <__sinit+0xc>
 8006ee0:	f7ff ffc4 	bl	8006e6c <global_stdio_init.part.0>
 8006ee4:	e7f2      	b.n	8006ecc <__sinit+0xc>
 8006ee6:	bf00      	nop
 8006ee8:	08006e2d 	.word	0x08006e2d
 8006eec:	200008f0 	.word	0x200008f0

08006ef0 <_fwalk_sglue>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	4688      	mov	r8, r1
 8006ef8:	4614      	mov	r4, r2
 8006efa:	2600      	movs	r6, #0
 8006efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f00:	f1b9 0901 	subs.w	r9, r9, #1
 8006f04:	d505      	bpl.n	8006f12 <_fwalk_sglue+0x22>
 8006f06:	6824      	ldr	r4, [r4, #0]
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	d1f7      	bne.n	8006efc <_fwalk_sglue+0xc>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d907      	bls.n	8006f28 <_fwalk_sglue+0x38>
 8006f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	d003      	beq.n	8006f28 <_fwalk_sglue+0x38>
 8006f20:	4629      	mov	r1, r5
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c0      	blx	r8
 8006f26:	4306      	orrs	r6, r0
 8006f28:	3568      	adds	r5, #104	@ 0x68
 8006f2a:	e7e9      	b.n	8006f00 <_fwalk_sglue+0x10>

08006f2c <sniprintf>:
 8006f2c:	b40c      	push	{r2, r3}
 8006f2e:	b530      	push	{r4, r5, lr}
 8006f30:	4b17      	ldr	r3, [pc, #92]	@ (8006f90 <sniprintf+0x64>)
 8006f32:	1e0c      	subs	r4, r1, #0
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	b09d      	sub	sp, #116	@ 0x74
 8006f38:	da08      	bge.n	8006f4c <sniprintf+0x20>
 8006f3a:	238b      	movs	r3, #139	@ 0x8b
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f42:	b01d      	add	sp, #116	@ 0x74
 8006f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f48:	b002      	add	sp, #8
 8006f4a:	4770      	bx	lr
 8006f4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006f50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f54:	bf14      	ite	ne
 8006f56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f5a:	4623      	moveq	r3, r4
 8006f5c:	9304      	str	r3, [sp, #16]
 8006f5e:	9307      	str	r3, [sp, #28]
 8006f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f64:	9002      	str	r0, [sp, #8]
 8006f66:	9006      	str	r0, [sp, #24]
 8006f68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f6e:	ab21      	add	r3, sp, #132	@ 0x84
 8006f70:	a902      	add	r1, sp, #8
 8006f72:	4628      	mov	r0, r5
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	f001 fbfd 	bl	8008774 <_svfiprintf_r>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	bfbc      	itt	lt
 8006f7e:	238b      	movlt	r3, #139	@ 0x8b
 8006f80:	602b      	strlt	r3, [r5, #0]
 8006f82:	2c00      	cmp	r4, #0
 8006f84:	d0dd      	beq.n	8006f42 <sniprintf+0x16>
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	e7d9      	b.n	8006f42 <sniprintf+0x16>
 8006f8e:	bf00      	nop
 8006f90:	20000020 	.word	0x20000020

08006f94 <__sread>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	460c      	mov	r4, r1
 8006f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9c:	f000 f86c 	bl	8007078 <_read_r>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	bfab      	itete	ge
 8006fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fa8:	181b      	addge	r3, r3, r0
 8006faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fae:	bfac      	ite	ge
 8006fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fb2:	81a3      	strhlt	r3, [r4, #12]
 8006fb4:	bd10      	pop	{r4, pc}

08006fb6 <__swrite>:
 8006fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fba:	461f      	mov	r7, r3
 8006fbc:	898b      	ldrh	r3, [r1, #12]
 8006fbe:	05db      	lsls	r3, r3, #23
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	d505      	bpl.n	8006fd4 <__swrite+0x1e>
 8006fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fcc:	2302      	movs	r3, #2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f000 f840 	bl	8007054 <_lseek_r>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fea:	f000 b857 	b.w	800709c <_write_r>

08006fee <__sseek>:
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff6:	f000 f82d 	bl	8007054 <_lseek_r>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	bf15      	itete	ne
 8007000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800700a:	81a3      	strheq	r3, [r4, #12]
 800700c:	bf18      	it	ne
 800700e:	81a3      	strhne	r3, [r4, #12]
 8007010:	bd10      	pop	{r4, pc}

08007012 <__sclose>:
 8007012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007016:	f000 b80d 	b.w	8007034 <_close_r>

0800701a <memset>:
 800701a:	4402      	add	r2, r0
 800701c:	4603      	mov	r3, r0
 800701e:	4293      	cmp	r3, r2
 8007020:	d100      	bne.n	8007024 <memset+0xa>
 8007022:	4770      	bx	lr
 8007024:	f803 1b01 	strb.w	r1, [r3], #1
 8007028:	e7f9      	b.n	800701e <memset+0x4>
	...

0800702c <_localeconv_r>:
 800702c:	4800      	ldr	r0, [pc, #0]	@ (8007030 <_localeconv_r+0x4>)
 800702e:	4770      	bx	lr
 8007030:	20000160 	.word	0x20000160

08007034 <_close_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d06      	ldr	r5, [pc, #24]	@ (8007050 <_close_r+0x1c>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	602b      	str	r3, [r5, #0]
 8007040:	f7fb f802 	bl	8002048 <_close>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_close_r+0x1a>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_close_r+0x1a>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	200008f4 	.word	0x200008f4

08007054 <_lseek_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d07      	ldr	r5, [pc, #28]	@ (8007074 <_lseek_r+0x20>)
 8007058:	4604      	mov	r4, r0
 800705a:	4608      	mov	r0, r1
 800705c:	4611      	mov	r1, r2
 800705e:	2200      	movs	r2, #0
 8007060:	602a      	str	r2, [r5, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	f7fb f817 	bl	8002096 <_lseek>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_lseek_r+0x1e>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_lseek_r+0x1e>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	200008f4 	.word	0x200008f4

08007078 <_read_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d07      	ldr	r5, [pc, #28]	@ (8007098 <_read_r+0x20>)
 800707c:	4604      	mov	r4, r0
 800707e:	4608      	mov	r0, r1
 8007080:	4611      	mov	r1, r2
 8007082:	2200      	movs	r2, #0
 8007084:	602a      	str	r2, [r5, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f7fa ffa5 	bl	8001fd6 <_read>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_read_r+0x1e>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_read_r+0x1e>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200008f4 	.word	0x200008f4

0800709c <_write_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	@ (80070bc <_write_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fa ffb0 	bl	8002010 <_write>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_write_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_write_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	200008f4 	.word	0x200008f4

080070c0 <__errno>:
 80070c0:	4b01      	ldr	r3, [pc, #4]	@ (80070c8 <__errno+0x8>)
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000020 	.word	0x20000020

080070cc <__libc_init_array>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007104 <__libc_init_array+0x38>)
 80070d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007108 <__libc_init_array+0x3c>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	2600      	movs	r6, #0
 80070d8:	42a6      	cmp	r6, r4
 80070da:	d109      	bne.n	80070f0 <__libc_init_array+0x24>
 80070dc:	4d0b      	ldr	r5, [pc, #44]	@ (800710c <__libc_init_array+0x40>)
 80070de:	4c0c      	ldr	r4, [pc, #48]	@ (8007110 <__libc_init_array+0x44>)
 80070e0:	f002 f866 	bl	80091b0 <_init>
 80070e4:	1b64      	subs	r4, r4, r5
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	2600      	movs	r6, #0
 80070ea:	42a6      	cmp	r6, r4
 80070ec:	d105      	bne.n	80070fa <__libc_init_array+0x2e>
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f4:	4798      	blx	r3
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7ee      	b.n	80070d8 <__libc_init_array+0xc>
 80070fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fe:	4798      	blx	r3
 8007100:	3601      	adds	r6, #1
 8007102:	e7f2      	b.n	80070ea <__libc_init_array+0x1e>
 8007104:	08009ce0 	.word	0x08009ce0
 8007108:	08009ce0 	.word	0x08009ce0
 800710c:	08009ce0 	.word	0x08009ce0
 8007110:	08009ce4 	.word	0x08009ce4

08007114 <__retarget_lock_init_recursive>:
 8007114:	4770      	bx	lr

08007116 <__retarget_lock_acquire_recursive>:
 8007116:	4770      	bx	lr

08007118 <__retarget_lock_release_recursive>:
 8007118:	4770      	bx	lr

0800711a <quorem>:
 800711a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711e:	6903      	ldr	r3, [r0, #16]
 8007120:	690c      	ldr	r4, [r1, #16]
 8007122:	42a3      	cmp	r3, r4
 8007124:	4607      	mov	r7, r0
 8007126:	db7e      	blt.n	8007226 <quorem+0x10c>
 8007128:	3c01      	subs	r4, #1
 800712a:	f101 0814 	add.w	r8, r1, #20
 800712e:	00a3      	lsls	r3, r4, #2
 8007130:	f100 0514 	add.w	r5, r0, #20
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007144:	3301      	adds	r3, #1
 8007146:	429a      	cmp	r2, r3
 8007148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800714c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007150:	d32e      	bcc.n	80071b0 <quorem+0x96>
 8007152:	f04f 0a00 	mov.w	sl, #0
 8007156:	46c4      	mov	ip, r8
 8007158:	46ae      	mov	lr, r5
 800715a:	46d3      	mov	fp, sl
 800715c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007160:	b298      	uxth	r0, r3
 8007162:	fb06 a000 	mla	r0, r6, r0, sl
 8007166:	0c02      	lsrs	r2, r0, #16
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	fb06 2303 	mla	r3, r6, r3, r2
 800716e:	f8de 2000 	ldr.w	r2, [lr]
 8007172:	b280      	uxth	r0, r0
 8007174:	b292      	uxth	r2, r2
 8007176:	1a12      	subs	r2, r2, r0
 8007178:	445a      	add	r2, fp
 800717a:	f8de 0000 	ldr.w	r0, [lr]
 800717e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007182:	b29b      	uxth	r3, r3
 8007184:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007188:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800718c:	b292      	uxth	r2, r2
 800718e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007192:	45e1      	cmp	r9, ip
 8007194:	f84e 2b04 	str.w	r2, [lr], #4
 8007198:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800719c:	d2de      	bcs.n	800715c <quorem+0x42>
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	58eb      	ldr	r3, [r5, r3]
 80071a2:	b92b      	cbnz	r3, 80071b0 <quorem+0x96>
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	3b04      	subs	r3, #4
 80071a8:	429d      	cmp	r5, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	d32f      	bcc.n	800720e <quorem+0xf4>
 80071ae:	613c      	str	r4, [r7, #16]
 80071b0:	4638      	mov	r0, r7
 80071b2:	f001 f97b 	bl	80084ac <__mcmp>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	db25      	blt.n	8007206 <quorem+0xec>
 80071ba:	4629      	mov	r1, r5
 80071bc:	2000      	movs	r0, #0
 80071be:	f858 2b04 	ldr.w	r2, [r8], #4
 80071c2:	f8d1 c000 	ldr.w	ip, [r1]
 80071c6:	fa1f fe82 	uxth.w	lr, r2
 80071ca:	fa1f f38c 	uxth.w	r3, ip
 80071ce:	eba3 030e 	sub.w	r3, r3, lr
 80071d2:	4403      	add	r3, r0
 80071d4:	0c12      	lsrs	r2, r2, #16
 80071d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071de:	b29b      	uxth	r3, r3
 80071e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071e4:	45c1      	cmp	r9, r8
 80071e6:	f841 3b04 	str.w	r3, [r1], #4
 80071ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071ee:	d2e6      	bcs.n	80071be <quorem+0xa4>
 80071f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071f8:	b922      	cbnz	r2, 8007204 <quorem+0xea>
 80071fa:	3b04      	subs	r3, #4
 80071fc:	429d      	cmp	r5, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	d30b      	bcc.n	800721a <quorem+0x100>
 8007202:	613c      	str	r4, [r7, #16]
 8007204:	3601      	adds	r6, #1
 8007206:	4630      	mov	r0, r6
 8007208:	b003      	add	sp, #12
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	3b04      	subs	r3, #4
 8007212:	2a00      	cmp	r2, #0
 8007214:	d1cb      	bne.n	80071ae <quorem+0x94>
 8007216:	3c01      	subs	r4, #1
 8007218:	e7c6      	b.n	80071a8 <quorem+0x8e>
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	3b04      	subs	r3, #4
 800721e:	2a00      	cmp	r2, #0
 8007220:	d1ef      	bne.n	8007202 <quorem+0xe8>
 8007222:	3c01      	subs	r4, #1
 8007224:	e7ea      	b.n	80071fc <quorem+0xe2>
 8007226:	2000      	movs	r0, #0
 8007228:	e7ee      	b.n	8007208 <quorem+0xee>
 800722a:	0000      	movs	r0, r0
 800722c:	0000      	movs	r0, r0
	...

08007230 <_dtoa_r>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	69c7      	ldr	r7, [r0, #28]
 8007236:	b099      	sub	sp, #100	@ 0x64
 8007238:	ed8d 0b02 	vstr	d0, [sp, #8]
 800723c:	ec55 4b10 	vmov	r4, r5, d0
 8007240:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007242:	9109      	str	r1, [sp, #36]	@ 0x24
 8007244:	4683      	mov	fp, r0
 8007246:	920e      	str	r2, [sp, #56]	@ 0x38
 8007248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800724a:	b97f      	cbnz	r7, 800726c <_dtoa_r+0x3c>
 800724c:	2010      	movs	r0, #16
 800724e:	f000 fdfd 	bl	8007e4c <malloc>
 8007252:	4602      	mov	r2, r0
 8007254:	f8cb 001c 	str.w	r0, [fp, #28]
 8007258:	b920      	cbnz	r0, 8007264 <_dtoa_r+0x34>
 800725a:	4ba7      	ldr	r3, [pc, #668]	@ (80074f8 <_dtoa_r+0x2c8>)
 800725c:	21ef      	movs	r1, #239	@ 0xef
 800725e:	48a7      	ldr	r0, [pc, #668]	@ (80074fc <_dtoa_r+0x2cc>)
 8007260:	f001 fc68 	bl	8008b34 <__assert_func>
 8007264:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007268:	6007      	str	r7, [r0, #0]
 800726a:	60c7      	str	r7, [r0, #12]
 800726c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	b159      	cbz	r1, 800728c <_dtoa_r+0x5c>
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	604a      	str	r2, [r1, #4]
 8007278:	2301      	movs	r3, #1
 800727a:	4093      	lsls	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
 800727e:	4658      	mov	r0, fp
 8007280:	f000 feda 	bl	8008038 <_Bfree>
 8007284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	1e2b      	subs	r3, r5, #0
 800728e:	bfb9      	ittee	lt
 8007290:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007294:	9303      	strlt	r3, [sp, #12]
 8007296:	2300      	movge	r3, #0
 8007298:	6033      	strge	r3, [r6, #0]
 800729a:	9f03      	ldr	r7, [sp, #12]
 800729c:	4b98      	ldr	r3, [pc, #608]	@ (8007500 <_dtoa_r+0x2d0>)
 800729e:	bfbc      	itt	lt
 80072a0:	2201      	movlt	r2, #1
 80072a2:	6032      	strlt	r2, [r6, #0]
 80072a4:	43bb      	bics	r3, r7
 80072a6:	d112      	bne.n	80072ce <_dtoa_r+0x9e>
 80072a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072b4:	4323      	orrs	r3, r4
 80072b6:	f000 854d 	beq.w	8007d54 <_dtoa_r+0xb24>
 80072ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007514 <_dtoa_r+0x2e4>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 854f 	beq.w	8007d64 <_dtoa_r+0xb34>
 80072c6:	f10a 0303 	add.w	r3, sl, #3
 80072ca:	f000 bd49 	b.w	8007d60 <_dtoa_r+0xb30>
 80072ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	ec51 0b17 	vmov	r0, r1, d7
 80072d8:	2300      	movs	r3, #0
 80072da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072de:	f7f9 fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80072e2:	4680      	mov	r8, r0
 80072e4:	b158      	cbz	r0, 80072fe <_dtoa_r+0xce>
 80072e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072e8:	2301      	movs	r3, #1
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072ee:	b113      	cbz	r3, 80072f6 <_dtoa_r+0xc6>
 80072f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072f2:	4b84      	ldr	r3, [pc, #528]	@ (8007504 <_dtoa_r+0x2d4>)
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007518 <_dtoa_r+0x2e8>
 80072fa:	f000 bd33 	b.w	8007d64 <_dtoa_r+0xb34>
 80072fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007302:	aa16      	add	r2, sp, #88	@ 0x58
 8007304:	a917      	add	r1, sp, #92	@ 0x5c
 8007306:	4658      	mov	r0, fp
 8007308:	f001 f980 	bl	800860c <__d2b>
 800730c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007310:	4681      	mov	r9, r0
 8007312:	2e00      	cmp	r6, #0
 8007314:	d077      	beq.n	8007406 <_dtoa_r+0x1d6>
 8007316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007318:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800731c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007324:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007328:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800732c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007330:	4619      	mov	r1, r3
 8007332:	2200      	movs	r2, #0
 8007334:	4b74      	ldr	r3, [pc, #464]	@ (8007508 <_dtoa_r+0x2d8>)
 8007336:	f7f8 ffaf 	bl	8000298 <__aeabi_dsub>
 800733a:	a369      	add	r3, pc, #420	@ (adr r3, 80074e0 <_dtoa_r+0x2b0>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f7f9 f962 	bl	8000608 <__aeabi_dmul>
 8007344:	a368      	add	r3, pc, #416	@ (adr r3, 80074e8 <_dtoa_r+0x2b8>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f7f8 ffa7 	bl	800029c <__adddf3>
 800734e:	4604      	mov	r4, r0
 8007350:	4630      	mov	r0, r6
 8007352:	460d      	mov	r5, r1
 8007354:	f7f9 f8ee 	bl	8000534 <__aeabi_i2d>
 8007358:	a365      	add	r3, pc, #404	@ (adr r3, 80074f0 <_dtoa_r+0x2c0>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f7f9 f953 	bl	8000608 <__aeabi_dmul>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f8 ff97 	bl	800029c <__adddf3>
 800736e:	4604      	mov	r4, r0
 8007370:	460d      	mov	r5, r1
 8007372:	f7f9 fbf9 	bl	8000b68 <__aeabi_d2iz>
 8007376:	2200      	movs	r2, #0
 8007378:	4607      	mov	r7, r0
 800737a:	2300      	movs	r3, #0
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f9 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8007384:	b140      	cbz	r0, 8007398 <_dtoa_r+0x168>
 8007386:	4638      	mov	r0, r7
 8007388:	f7f9 f8d4 	bl	8000534 <__aeabi_i2d>
 800738c:	4622      	mov	r2, r4
 800738e:	462b      	mov	r3, r5
 8007390:	f7f9 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007394:	b900      	cbnz	r0, 8007398 <_dtoa_r+0x168>
 8007396:	3f01      	subs	r7, #1
 8007398:	2f16      	cmp	r7, #22
 800739a:	d851      	bhi.n	8007440 <_dtoa_r+0x210>
 800739c:	4b5b      	ldr	r3, [pc, #364]	@ (800750c <_dtoa_r+0x2dc>)
 800739e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073aa:	f7f9 fb9f 	bl	8000aec <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d048      	beq.n	8007444 <_dtoa_r+0x214>
 80073b2:	3f01      	subs	r7, #1
 80073b4:	2300      	movs	r3, #0
 80073b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80073b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073ba:	1b9b      	subs	r3, r3, r6
 80073bc:	1e5a      	subs	r2, r3, #1
 80073be:	bf44      	itt	mi
 80073c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80073c4:	2300      	movmi	r3, #0
 80073c6:	9208      	str	r2, [sp, #32]
 80073c8:	bf54      	ite	pl
 80073ca:	f04f 0800 	movpl.w	r8, #0
 80073ce:	9308      	strmi	r3, [sp, #32]
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	db39      	blt.n	8007448 <_dtoa_r+0x218>
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073d8:	443b      	add	r3, r7
 80073da:	9308      	str	r3, [sp, #32]
 80073dc:	2300      	movs	r3, #0
 80073de:	930a      	str	r3, [sp, #40]	@ 0x28
 80073e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d864      	bhi.n	80074b0 <_dtoa_r+0x280>
 80073e6:	2b05      	cmp	r3, #5
 80073e8:	bfc4      	itt	gt
 80073ea:	3b04      	subgt	r3, #4
 80073ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f0:	f1a3 0302 	sub.w	r3, r3, #2
 80073f4:	bfcc      	ite	gt
 80073f6:	2400      	movgt	r4, #0
 80073f8:	2401      	movle	r4, #1
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d863      	bhi.n	80074c6 <_dtoa_r+0x296>
 80073fe:	e8df f003 	tbb	[pc, r3]
 8007402:	372a      	.short	0x372a
 8007404:	5535      	.short	0x5535
 8007406:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800740a:	441e      	add	r6, r3
 800740c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007410:	2b20      	cmp	r3, #32
 8007412:	bfc1      	itttt	gt
 8007414:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007418:	409f      	lslgt	r7, r3
 800741a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800741e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007422:	bfd6      	itet	le
 8007424:	f1c3 0320 	rsble	r3, r3, #32
 8007428:	ea47 0003 	orrgt.w	r0, r7, r3
 800742c:	fa04 f003 	lslle.w	r0, r4, r3
 8007430:	f7f9 f870 	bl	8000514 <__aeabi_ui2d>
 8007434:	2201      	movs	r2, #1
 8007436:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800743a:	3e01      	subs	r6, #1
 800743c:	9214      	str	r2, [sp, #80]	@ 0x50
 800743e:	e777      	b.n	8007330 <_dtoa_r+0x100>
 8007440:	2301      	movs	r3, #1
 8007442:	e7b8      	b.n	80073b6 <_dtoa_r+0x186>
 8007444:	9012      	str	r0, [sp, #72]	@ 0x48
 8007446:	e7b7      	b.n	80073b8 <_dtoa_r+0x188>
 8007448:	427b      	negs	r3, r7
 800744a:	930a      	str	r3, [sp, #40]	@ 0x28
 800744c:	2300      	movs	r3, #0
 800744e:	eba8 0807 	sub.w	r8, r8, r7
 8007452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007454:	e7c4      	b.n	80073e0 <_dtoa_r+0x1b0>
 8007456:	2300      	movs	r3, #0
 8007458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800745a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800745c:	2b00      	cmp	r3, #0
 800745e:	dc35      	bgt.n	80074cc <_dtoa_r+0x29c>
 8007460:	2301      	movs	r3, #1
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	461a      	mov	r2, r3
 8007468:	920e      	str	r2, [sp, #56]	@ 0x38
 800746a:	e00b      	b.n	8007484 <_dtoa_r+0x254>
 800746c:	2301      	movs	r3, #1
 800746e:	e7f3      	b.n	8007458 <_dtoa_r+0x228>
 8007470:	2300      	movs	r3, #0
 8007472:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	2b01      	cmp	r3, #1
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	bfb8      	it	lt
 8007482:	2301      	movlt	r3, #1
 8007484:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007488:	2100      	movs	r1, #0
 800748a:	2204      	movs	r2, #4
 800748c:	f102 0514 	add.w	r5, r2, #20
 8007490:	429d      	cmp	r5, r3
 8007492:	d91f      	bls.n	80074d4 <_dtoa_r+0x2a4>
 8007494:	6041      	str	r1, [r0, #4]
 8007496:	4658      	mov	r0, fp
 8007498:	f000 fd8e 	bl	8007fb8 <_Balloc>
 800749c:	4682      	mov	sl, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	d13c      	bne.n	800751c <_dtoa_r+0x2ec>
 80074a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007510 <_dtoa_r+0x2e0>)
 80074a4:	4602      	mov	r2, r0
 80074a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074aa:	e6d8      	b.n	800725e <_dtoa_r+0x2e>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e7e0      	b.n	8007472 <_dtoa_r+0x242>
 80074b0:	2401      	movs	r4, #1
 80074b2:	2300      	movs	r3, #0
 80074b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074b8:	f04f 33ff 	mov.w	r3, #4294967295
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	2200      	movs	r2, #0
 80074c2:	2312      	movs	r3, #18
 80074c4:	e7d0      	b.n	8007468 <_dtoa_r+0x238>
 80074c6:	2301      	movs	r3, #1
 80074c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ca:	e7f5      	b.n	80074b8 <_dtoa_r+0x288>
 80074cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	9307      	str	r3, [sp, #28]
 80074d2:	e7d7      	b.n	8007484 <_dtoa_r+0x254>
 80074d4:	3101      	adds	r1, #1
 80074d6:	0052      	lsls	r2, r2, #1
 80074d8:	e7d8      	b.n	800748c <_dtoa_r+0x25c>
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w
 80074e0:	636f4361 	.word	0x636f4361
 80074e4:	3fd287a7 	.word	0x3fd287a7
 80074e8:	8b60c8b3 	.word	0x8b60c8b3
 80074ec:	3fc68a28 	.word	0x3fc68a28
 80074f0:	509f79fb 	.word	0x509f79fb
 80074f4:	3fd34413 	.word	0x3fd34413
 80074f8:	080099a9 	.word	0x080099a9
 80074fc:	080099c0 	.word	0x080099c0
 8007500:	7ff00000 	.word	0x7ff00000
 8007504:	08009979 	.word	0x08009979
 8007508:	3ff80000 	.word	0x3ff80000
 800750c:	08009ab8 	.word	0x08009ab8
 8007510:	08009a18 	.word	0x08009a18
 8007514:	080099a5 	.word	0x080099a5
 8007518:	08009978 	.word	0x08009978
 800751c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007520:	6018      	str	r0, [r3, #0]
 8007522:	9b07      	ldr	r3, [sp, #28]
 8007524:	2b0e      	cmp	r3, #14
 8007526:	f200 80a4 	bhi.w	8007672 <_dtoa_r+0x442>
 800752a:	2c00      	cmp	r4, #0
 800752c:	f000 80a1 	beq.w	8007672 <_dtoa_r+0x442>
 8007530:	2f00      	cmp	r7, #0
 8007532:	dd33      	ble.n	800759c <_dtoa_r+0x36c>
 8007534:	4bad      	ldr	r3, [pc, #692]	@ (80077ec <_dtoa_r+0x5bc>)
 8007536:	f007 020f 	and.w	r2, r7, #15
 800753a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753e:	ed93 7b00 	vldr	d7, [r3]
 8007542:	05f8      	lsls	r0, r7, #23
 8007544:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007548:	ea4f 1427 	mov.w	r4, r7, asr #4
 800754c:	d516      	bpl.n	800757c <_dtoa_r+0x34c>
 800754e:	4ba8      	ldr	r3, [pc, #672]	@ (80077f0 <_dtoa_r+0x5c0>)
 8007550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007558:	f7f9 f980 	bl	800085c <__aeabi_ddiv>
 800755c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007560:	f004 040f 	and.w	r4, r4, #15
 8007564:	2603      	movs	r6, #3
 8007566:	4da2      	ldr	r5, [pc, #648]	@ (80077f0 <_dtoa_r+0x5c0>)
 8007568:	b954      	cbnz	r4, 8007580 <_dtoa_r+0x350>
 800756a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800756e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007572:	f7f9 f973 	bl	800085c <__aeabi_ddiv>
 8007576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757a:	e028      	b.n	80075ce <_dtoa_r+0x39e>
 800757c:	2602      	movs	r6, #2
 800757e:	e7f2      	b.n	8007566 <_dtoa_r+0x336>
 8007580:	07e1      	lsls	r1, r4, #31
 8007582:	d508      	bpl.n	8007596 <_dtoa_r+0x366>
 8007584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007588:	e9d5 2300 	ldrd	r2, r3, [r5]
 800758c:	f7f9 f83c 	bl	8000608 <__aeabi_dmul>
 8007590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007594:	3601      	adds	r6, #1
 8007596:	1064      	asrs	r4, r4, #1
 8007598:	3508      	adds	r5, #8
 800759a:	e7e5      	b.n	8007568 <_dtoa_r+0x338>
 800759c:	f000 80d2 	beq.w	8007744 <_dtoa_r+0x514>
 80075a0:	427c      	negs	r4, r7
 80075a2:	4b92      	ldr	r3, [pc, #584]	@ (80077ec <_dtoa_r+0x5bc>)
 80075a4:	4d92      	ldr	r5, [pc, #584]	@ (80077f0 <_dtoa_r+0x5c0>)
 80075a6:	f004 020f 	and.w	r2, r4, #15
 80075aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075be:	1124      	asrs	r4, r4, #4
 80075c0:	2300      	movs	r3, #0
 80075c2:	2602      	movs	r6, #2
 80075c4:	2c00      	cmp	r4, #0
 80075c6:	f040 80b2 	bne.w	800772e <_dtoa_r+0x4fe>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1d3      	bne.n	8007576 <_dtoa_r+0x346>
 80075ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80b7 	beq.w	8007748 <_dtoa_r+0x518>
 80075da:	4b86      	ldr	r3, [pc, #536]	@ (80077f4 <_dtoa_r+0x5c4>)
 80075dc:	2200      	movs	r2, #0
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f9 fa83 	bl	8000aec <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f000 80ae 	beq.w	8007748 <_dtoa_r+0x518>
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 80aa 	beq.w	8007748 <_dtoa_r+0x518>
 80075f4:	9b00      	ldr	r3, [sp, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	dd37      	ble.n	800766a <_dtoa_r+0x43a>
 80075fa:	1e7b      	subs	r3, r7, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	4620      	mov	r0, r4
 8007600:	4b7d      	ldr	r3, [pc, #500]	@ (80077f8 <_dtoa_r+0x5c8>)
 8007602:	2200      	movs	r2, #0
 8007604:	4629      	mov	r1, r5
 8007606:	f7f8 ffff 	bl	8000608 <__aeabi_dmul>
 800760a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760e:	9c00      	ldr	r4, [sp, #0]
 8007610:	3601      	adds	r6, #1
 8007612:	4630      	mov	r0, r6
 8007614:	f7f8 ff8e 	bl	8000534 <__aeabi_i2d>
 8007618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800761c:	f7f8 fff4 	bl	8000608 <__aeabi_dmul>
 8007620:	4b76      	ldr	r3, [pc, #472]	@ (80077fc <_dtoa_r+0x5cc>)
 8007622:	2200      	movs	r2, #0
 8007624:	f7f8 fe3a 	bl	800029c <__adddf3>
 8007628:	4605      	mov	r5, r0
 800762a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800762e:	2c00      	cmp	r4, #0
 8007630:	f040 808d 	bne.w	800774e <_dtoa_r+0x51e>
 8007634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007638:	4b71      	ldr	r3, [pc, #452]	@ (8007800 <_dtoa_r+0x5d0>)
 800763a:	2200      	movs	r2, #0
 800763c:	f7f8 fe2c 	bl	8000298 <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007648:	462a      	mov	r2, r5
 800764a:	4633      	mov	r3, r6
 800764c:	f7f9 fa6c 	bl	8000b28 <__aeabi_dcmpgt>
 8007650:	2800      	cmp	r0, #0
 8007652:	f040 828b 	bne.w	8007b6c <_dtoa_r+0x93c>
 8007656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800765a:	462a      	mov	r2, r5
 800765c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007660:	f7f9 fa44 	bl	8000aec <__aeabi_dcmplt>
 8007664:	2800      	cmp	r0, #0
 8007666:	f040 8128 	bne.w	80078ba <_dtoa_r+0x68a>
 800766a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800766e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007674:	2b00      	cmp	r3, #0
 8007676:	f2c0 815a 	blt.w	800792e <_dtoa_r+0x6fe>
 800767a:	2f0e      	cmp	r7, #14
 800767c:	f300 8157 	bgt.w	800792e <_dtoa_r+0x6fe>
 8007680:	4b5a      	ldr	r3, [pc, #360]	@ (80077ec <_dtoa_r+0x5bc>)
 8007682:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007686:	ed93 7b00 	vldr	d7, [r3]
 800768a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800768c:	2b00      	cmp	r3, #0
 800768e:	ed8d 7b00 	vstr	d7, [sp]
 8007692:	da03      	bge.n	800769c <_dtoa_r+0x46c>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f340 8101 	ble.w	800789e <_dtoa_r+0x66e>
 800769c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076a0:	4656      	mov	r6, sl
 80076a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076a6:	4620      	mov	r0, r4
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7f9 f8d7 	bl	800085c <__aeabi_ddiv>
 80076ae:	f7f9 fa5b 	bl	8000b68 <__aeabi_d2iz>
 80076b2:	4680      	mov	r8, r0
 80076b4:	f7f8 ff3e 	bl	8000534 <__aeabi_i2d>
 80076b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076bc:	f7f8 ffa4 	bl	8000608 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076cc:	f7f8 fde4 	bl	8000298 <__aeabi_dsub>
 80076d0:	f806 4b01 	strb.w	r4, [r6], #1
 80076d4:	9d07      	ldr	r5, [sp, #28]
 80076d6:	eba6 040a 	sub.w	r4, r6, sl
 80076da:	42a5      	cmp	r5, r4
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	f040 8117 	bne.w	8007912 <_dtoa_r+0x6e2>
 80076e4:	f7f8 fdda 	bl	800029c <__adddf3>
 80076e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	f7f9 fa1a 	bl	8000b28 <__aeabi_dcmpgt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f040 80f9 	bne.w	80078ec <_dtoa_r+0x6bc>
 80076fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007706:	b118      	cbz	r0, 8007710 <_dtoa_r+0x4e0>
 8007708:	f018 0f01 	tst.w	r8, #1
 800770c:	f040 80ee 	bne.w	80078ec <_dtoa_r+0x6bc>
 8007710:	4649      	mov	r1, r9
 8007712:	4658      	mov	r0, fp
 8007714:	f000 fc90 	bl	8008038 <_Bfree>
 8007718:	2300      	movs	r3, #0
 800771a:	7033      	strb	r3, [r6, #0]
 800771c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800771e:	3701      	adds	r7, #1
 8007720:	601f      	str	r7, [r3, #0]
 8007722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 831d 	beq.w	8007d64 <_dtoa_r+0xb34>
 800772a:	601e      	str	r6, [r3, #0]
 800772c:	e31a      	b.n	8007d64 <_dtoa_r+0xb34>
 800772e:	07e2      	lsls	r2, r4, #31
 8007730:	d505      	bpl.n	800773e <_dtoa_r+0x50e>
 8007732:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007736:	f7f8 ff67 	bl	8000608 <__aeabi_dmul>
 800773a:	3601      	adds	r6, #1
 800773c:	2301      	movs	r3, #1
 800773e:	1064      	asrs	r4, r4, #1
 8007740:	3508      	adds	r5, #8
 8007742:	e73f      	b.n	80075c4 <_dtoa_r+0x394>
 8007744:	2602      	movs	r6, #2
 8007746:	e742      	b.n	80075ce <_dtoa_r+0x39e>
 8007748:	9c07      	ldr	r4, [sp, #28]
 800774a:	9704      	str	r7, [sp, #16]
 800774c:	e761      	b.n	8007612 <_dtoa_r+0x3e2>
 800774e:	4b27      	ldr	r3, [pc, #156]	@ (80077ec <_dtoa_r+0x5bc>)
 8007750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007752:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007756:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800775a:	4454      	add	r4, sl
 800775c:	2900      	cmp	r1, #0
 800775e:	d053      	beq.n	8007808 <_dtoa_r+0x5d8>
 8007760:	4928      	ldr	r1, [pc, #160]	@ (8007804 <_dtoa_r+0x5d4>)
 8007762:	2000      	movs	r0, #0
 8007764:	f7f9 f87a 	bl	800085c <__aeabi_ddiv>
 8007768:	4633      	mov	r3, r6
 800776a:	462a      	mov	r2, r5
 800776c:	f7f8 fd94 	bl	8000298 <__aeabi_dsub>
 8007770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007774:	4656      	mov	r6, sl
 8007776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777a:	f7f9 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800777e:	4605      	mov	r5, r0
 8007780:	f7f8 fed8 	bl	8000534 <__aeabi_i2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778c:	f7f8 fd84 	bl	8000298 <__aeabi_dsub>
 8007790:	3530      	adds	r5, #48	@ 0x30
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800779a:	f806 5b01 	strb.w	r5, [r6], #1
 800779e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077a2:	f7f9 f9a3 	bl	8000aec <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d171      	bne.n	800788e <_dtoa_r+0x65e>
 80077aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077ae:	4911      	ldr	r1, [pc, #68]	@ (80077f4 <_dtoa_r+0x5c4>)
 80077b0:	2000      	movs	r0, #0
 80077b2:	f7f8 fd71 	bl	8000298 <__aeabi_dsub>
 80077b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ba:	f7f9 f997 	bl	8000aec <__aeabi_dcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f040 8095 	bne.w	80078ee <_dtoa_r+0x6be>
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	f43f af50 	beq.w	800766a <_dtoa_r+0x43a>
 80077ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077ce:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <_dtoa_r+0x5c8>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	f7f8 ff19 	bl	8000608 <__aeabi_dmul>
 80077d6:	4b08      	ldr	r3, [pc, #32]	@ (80077f8 <_dtoa_r+0x5c8>)
 80077d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077dc:	2200      	movs	r2, #0
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	f7f8 ff11 	bl	8000608 <__aeabi_dmul>
 80077e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ea:	e7c4      	b.n	8007776 <_dtoa_r+0x546>
 80077ec:	08009ab8 	.word	0x08009ab8
 80077f0:	08009a90 	.word	0x08009a90
 80077f4:	3ff00000 	.word	0x3ff00000
 80077f8:	40240000 	.word	0x40240000
 80077fc:	401c0000 	.word	0x401c0000
 8007800:	40140000 	.word	0x40140000
 8007804:	3fe00000 	.word	0x3fe00000
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	f7f8 fefc 	bl	8000608 <__aeabi_dmul>
 8007810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007814:	9415      	str	r4, [sp, #84]	@ 0x54
 8007816:	4656      	mov	r6, sl
 8007818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781c:	f7f9 f9a4 	bl	8000b68 <__aeabi_d2iz>
 8007820:	4605      	mov	r5, r0
 8007822:	f7f8 fe87 	bl	8000534 <__aeabi_i2d>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782e:	f7f8 fd33 	bl	8000298 <__aeabi_dsub>
 8007832:	3530      	adds	r5, #48	@ 0x30
 8007834:	f806 5b01 	strb.w	r5, [r6], #1
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	42a6      	cmp	r6, r4
 800783e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	d124      	bne.n	8007892 <_dtoa_r+0x662>
 8007848:	4bac      	ldr	r3, [pc, #688]	@ (8007afc <_dtoa_r+0x8cc>)
 800784a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800784e:	f7f8 fd25 	bl	800029c <__adddf3>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785a:	f7f9 f965 	bl	8000b28 <__aeabi_dcmpgt>
 800785e:	2800      	cmp	r0, #0
 8007860:	d145      	bne.n	80078ee <_dtoa_r+0x6be>
 8007862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007866:	49a5      	ldr	r1, [pc, #660]	@ (8007afc <_dtoa_r+0x8cc>)
 8007868:	2000      	movs	r0, #0
 800786a:	f7f8 fd15 	bl	8000298 <__aeabi_dsub>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007876:	f7f9 f939 	bl	8000aec <__aeabi_dcmplt>
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f aef5 	beq.w	800766a <_dtoa_r+0x43a>
 8007880:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007882:	1e73      	subs	r3, r6, #1
 8007884:	9315      	str	r3, [sp, #84]	@ 0x54
 8007886:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800788a:	2b30      	cmp	r3, #48	@ 0x30
 800788c:	d0f8      	beq.n	8007880 <_dtoa_r+0x650>
 800788e:	9f04      	ldr	r7, [sp, #16]
 8007890:	e73e      	b.n	8007710 <_dtoa_r+0x4e0>
 8007892:	4b9b      	ldr	r3, [pc, #620]	@ (8007b00 <_dtoa_r+0x8d0>)
 8007894:	f7f8 feb8 	bl	8000608 <__aeabi_dmul>
 8007898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800789c:	e7bc      	b.n	8007818 <_dtoa_r+0x5e8>
 800789e:	d10c      	bne.n	80078ba <_dtoa_r+0x68a>
 80078a0:	4b98      	ldr	r3, [pc, #608]	@ (8007b04 <_dtoa_r+0x8d4>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078a8:	f7f8 feae 	bl	8000608 <__aeabi_dmul>
 80078ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078b0:	f7f9 f930 	bl	8000b14 <__aeabi_dcmpge>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f000 8157 	beq.w	8007b68 <_dtoa_r+0x938>
 80078ba:	2400      	movs	r4, #0
 80078bc:	4625      	mov	r5, r4
 80078be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c0:	43db      	mvns	r3, r3
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	4656      	mov	r6, sl
 80078c6:	2700      	movs	r7, #0
 80078c8:	4621      	mov	r1, r4
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fbb4 	bl	8008038 <_Bfree>
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	d0dc      	beq.n	800788e <_dtoa_r+0x65e>
 80078d4:	b12f      	cbz	r7, 80078e2 <_dtoa_r+0x6b2>
 80078d6:	42af      	cmp	r7, r5
 80078d8:	d003      	beq.n	80078e2 <_dtoa_r+0x6b2>
 80078da:	4639      	mov	r1, r7
 80078dc:	4658      	mov	r0, fp
 80078de:	f000 fbab 	bl	8008038 <_Bfree>
 80078e2:	4629      	mov	r1, r5
 80078e4:	4658      	mov	r0, fp
 80078e6:	f000 fba7 	bl	8008038 <_Bfree>
 80078ea:	e7d0      	b.n	800788e <_dtoa_r+0x65e>
 80078ec:	9704      	str	r7, [sp, #16]
 80078ee:	4633      	mov	r3, r6
 80078f0:	461e      	mov	r6, r3
 80078f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078f6:	2a39      	cmp	r2, #57	@ 0x39
 80078f8:	d107      	bne.n	800790a <_dtoa_r+0x6da>
 80078fa:	459a      	cmp	sl, r3
 80078fc:	d1f8      	bne.n	80078f0 <_dtoa_r+0x6c0>
 80078fe:	9a04      	ldr	r2, [sp, #16]
 8007900:	3201      	adds	r2, #1
 8007902:	9204      	str	r2, [sp, #16]
 8007904:	2230      	movs	r2, #48	@ 0x30
 8007906:	f88a 2000 	strb.w	r2, [sl]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	3201      	adds	r2, #1
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e7bd      	b.n	800788e <_dtoa_r+0x65e>
 8007912:	4b7b      	ldr	r3, [pc, #492]	@ (8007b00 <_dtoa_r+0x8d0>)
 8007914:	2200      	movs	r2, #0
 8007916:	f7f8 fe77 	bl	8000608 <__aeabi_dmul>
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	4604      	mov	r4, r0
 8007920:	460d      	mov	r5, r1
 8007922:	f7f9 f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007926:	2800      	cmp	r0, #0
 8007928:	f43f aebb 	beq.w	80076a2 <_dtoa_r+0x472>
 800792c:	e6f0      	b.n	8007710 <_dtoa_r+0x4e0>
 800792e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007930:	2a00      	cmp	r2, #0
 8007932:	f000 80db 	beq.w	8007aec <_dtoa_r+0x8bc>
 8007936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007938:	2a01      	cmp	r2, #1
 800793a:	f300 80bf 	bgt.w	8007abc <_dtoa_r+0x88c>
 800793e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007940:	2a00      	cmp	r2, #0
 8007942:	f000 80b7 	beq.w	8007ab4 <_dtoa_r+0x884>
 8007946:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800794a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800794c:	4646      	mov	r6, r8
 800794e:	9a08      	ldr	r2, [sp, #32]
 8007950:	2101      	movs	r1, #1
 8007952:	441a      	add	r2, r3
 8007954:	4658      	mov	r0, fp
 8007956:	4498      	add	r8, r3
 8007958:	9208      	str	r2, [sp, #32]
 800795a:	f000 fc21 	bl	80081a0 <__i2b>
 800795e:	4605      	mov	r5, r0
 8007960:	b15e      	cbz	r6, 800797a <_dtoa_r+0x74a>
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd08      	ble.n	800797a <_dtoa_r+0x74a>
 8007968:	42b3      	cmp	r3, r6
 800796a:	9a08      	ldr	r2, [sp, #32]
 800796c:	bfa8      	it	ge
 800796e:	4633      	movge	r3, r6
 8007970:	eba8 0803 	sub.w	r8, r8, r3
 8007974:	1af6      	subs	r6, r6, r3
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800797c:	b1f3      	cbz	r3, 80079bc <_dtoa_r+0x78c>
 800797e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80b7 	beq.w	8007af4 <_dtoa_r+0x8c4>
 8007986:	b18c      	cbz	r4, 80079ac <_dtoa_r+0x77c>
 8007988:	4629      	mov	r1, r5
 800798a:	4622      	mov	r2, r4
 800798c:	4658      	mov	r0, fp
 800798e:	f000 fcc7 	bl	8008320 <__pow5mult>
 8007992:	464a      	mov	r2, r9
 8007994:	4601      	mov	r1, r0
 8007996:	4605      	mov	r5, r0
 8007998:	4658      	mov	r0, fp
 800799a:	f000 fc17 	bl	80081cc <__multiply>
 800799e:	4649      	mov	r1, r9
 80079a0:	9004      	str	r0, [sp, #16]
 80079a2:	4658      	mov	r0, fp
 80079a4:	f000 fb48 	bl	8008038 <_Bfree>
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	4699      	mov	r9, r3
 80079ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ae:	1b1a      	subs	r2, r3, r4
 80079b0:	d004      	beq.n	80079bc <_dtoa_r+0x78c>
 80079b2:	4649      	mov	r1, r9
 80079b4:	4658      	mov	r0, fp
 80079b6:	f000 fcb3 	bl	8008320 <__pow5mult>
 80079ba:	4681      	mov	r9, r0
 80079bc:	2101      	movs	r1, #1
 80079be:	4658      	mov	r0, fp
 80079c0:	f000 fbee 	bl	80081a0 <__i2b>
 80079c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079c6:	4604      	mov	r4, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 81cf 	beq.w	8007d6c <_dtoa_r+0xb3c>
 80079ce:	461a      	mov	r2, r3
 80079d0:	4601      	mov	r1, r0
 80079d2:	4658      	mov	r0, fp
 80079d4:	f000 fca4 	bl	8008320 <__pow5mult>
 80079d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079da:	2b01      	cmp	r3, #1
 80079dc:	4604      	mov	r4, r0
 80079de:	f300 8095 	bgt.w	8007b0c <_dtoa_r+0x8dc>
 80079e2:	9b02      	ldr	r3, [sp, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 8087 	bne.w	8007af8 <_dtoa_r+0x8c8>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f040 8089 	bne.w	8007b08 <_dtoa_r+0x8d8>
 80079f6:	9b03      	ldr	r3, [sp, #12]
 80079f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079fc:	0d1b      	lsrs	r3, r3, #20
 80079fe:	051b      	lsls	r3, r3, #20
 8007a00:	b12b      	cbz	r3, 8007a0e <_dtoa_r+0x7de>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	3301      	adds	r3, #1
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	f108 0801 	add.w	r8, r8, #1
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 81b0 	beq.w	8007d78 <_dtoa_r+0xb48>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a1e:	6918      	ldr	r0, [r3, #16]
 8007a20:	f000 fb72 	bl	8008108 <__hi0bits>
 8007a24:	f1c0 0020 	rsb	r0, r0, #32
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	4418      	add	r0, r3
 8007a2c:	f010 001f 	ands.w	r0, r0, #31
 8007a30:	d077      	beq.n	8007b22 <_dtoa_r+0x8f2>
 8007a32:	f1c0 0320 	rsb	r3, r0, #32
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	dd6b      	ble.n	8007b12 <_dtoa_r+0x8e2>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	f1c0 001c 	rsb	r0, r0, #28
 8007a40:	4403      	add	r3, r0
 8007a42:	4480      	add	r8, r0
 8007a44:	4406      	add	r6, r0
 8007a46:	9308      	str	r3, [sp, #32]
 8007a48:	f1b8 0f00 	cmp.w	r8, #0
 8007a4c:	dd05      	ble.n	8007a5a <_dtoa_r+0x82a>
 8007a4e:	4649      	mov	r1, r9
 8007a50:	4642      	mov	r2, r8
 8007a52:	4658      	mov	r0, fp
 8007a54:	f000 fcbe 	bl	80083d4 <__lshift>
 8007a58:	4681      	mov	r9, r0
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd05      	ble.n	8007a6c <_dtoa_r+0x83c>
 8007a60:	4621      	mov	r1, r4
 8007a62:	461a      	mov	r2, r3
 8007a64:	4658      	mov	r0, fp
 8007a66:	f000 fcb5 	bl	80083d4 <__lshift>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d059      	beq.n	8007b26 <_dtoa_r+0x8f6>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fd19 	bl	80084ac <__mcmp>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	da53      	bge.n	8007b26 <_dtoa_r+0x8f6>
 8007a7e:	1e7b      	subs	r3, r7, #1
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	4649      	mov	r1, r9
 8007a84:	2300      	movs	r3, #0
 8007a86:	220a      	movs	r2, #10
 8007a88:	4658      	mov	r0, fp
 8007a8a:	f000 faf7 	bl	800807c <__multadd>
 8007a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a90:	4681      	mov	r9, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8172 	beq.w	8007d7c <_dtoa_r+0xb4c>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	4658      	mov	r0, fp
 8007aa0:	f000 faec 	bl	800807c <__multadd>
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	dc67      	bgt.n	8007b7c <_dtoa_r+0x94c>
 8007aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	dc41      	bgt.n	8007b36 <_dtoa_r+0x906>
 8007ab2:	e063      	b.n	8007b7c <_dtoa_r+0x94c>
 8007ab4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ab6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007aba:	e746      	b.n	800794a <_dtoa_r+0x71a>
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	1e5c      	subs	r4, r3, #1
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	bfbf      	itttt	lt
 8007ac6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ac8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007aca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007acc:	1ae3      	sublt	r3, r4, r3
 8007ace:	bfb4      	ite	lt
 8007ad0:	18d2      	addlt	r2, r2, r3
 8007ad2:	1b1c      	subge	r4, r3, r4
 8007ad4:	9b07      	ldr	r3, [sp, #28]
 8007ad6:	bfbc      	itt	lt
 8007ad8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ada:	2400      	movlt	r4, #0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bfb5      	itete	lt
 8007ae0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ae4:	9b07      	ldrge	r3, [sp, #28]
 8007ae6:	2300      	movlt	r3, #0
 8007ae8:	4646      	movge	r6, r8
 8007aea:	e730      	b.n	800794e <_dtoa_r+0x71e>
 8007aec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007aee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007af0:	4646      	mov	r6, r8
 8007af2:	e735      	b.n	8007960 <_dtoa_r+0x730>
 8007af4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007af6:	e75c      	b.n	80079b2 <_dtoa_r+0x782>
 8007af8:	2300      	movs	r3, #0
 8007afa:	e788      	b.n	8007a0e <_dtoa_r+0x7de>
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	40240000 	.word	0x40240000
 8007b04:	40140000 	.word	0x40140000
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	e780      	b.n	8007a0e <_dtoa_r+0x7de>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b10:	e782      	b.n	8007a18 <_dtoa_r+0x7e8>
 8007b12:	d099      	beq.n	8007a48 <_dtoa_r+0x818>
 8007b14:	9a08      	ldr	r2, [sp, #32]
 8007b16:	331c      	adds	r3, #28
 8007b18:	441a      	add	r2, r3
 8007b1a:	4498      	add	r8, r3
 8007b1c:	441e      	add	r6, r3
 8007b1e:	9208      	str	r2, [sp, #32]
 8007b20:	e792      	b.n	8007a48 <_dtoa_r+0x818>
 8007b22:	4603      	mov	r3, r0
 8007b24:	e7f6      	b.n	8007b14 <_dtoa_r+0x8e4>
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	9704      	str	r7, [sp, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	dc20      	bgt.n	8007b70 <_dtoa_r+0x940>
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	dd1e      	ble.n	8007b74 <_dtoa_r+0x944>
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f47f aec0 	bne.w	80078be <_dtoa_r+0x68e>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	2205      	movs	r2, #5
 8007b42:	4658      	mov	r0, fp
 8007b44:	f000 fa9a 	bl	800807c <__multadd>
 8007b48:	4601      	mov	r1, r0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	f000 fcad 	bl	80084ac <__mcmp>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f77f aeb3 	ble.w	80078be <_dtoa_r+0x68e>
 8007b58:	4656      	mov	r6, sl
 8007b5a:	2331      	movs	r3, #49	@ 0x31
 8007b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	3301      	adds	r3, #1
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	e6ae      	b.n	80078c6 <_dtoa_r+0x696>
 8007b68:	9c07      	ldr	r4, [sp, #28]
 8007b6a:	9704      	str	r7, [sp, #16]
 8007b6c:	4625      	mov	r5, r4
 8007b6e:	e7f3      	b.n	8007b58 <_dtoa_r+0x928>
 8007b70:	9b07      	ldr	r3, [sp, #28]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8104 	beq.w	8007d84 <_dtoa_r+0xb54>
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	dd05      	ble.n	8007b8c <_dtoa_r+0x95c>
 8007b80:	4629      	mov	r1, r5
 8007b82:	4632      	mov	r2, r6
 8007b84:	4658      	mov	r0, fp
 8007b86:	f000 fc25 	bl	80083d4 <__lshift>
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d05a      	beq.n	8007c48 <_dtoa_r+0xa18>
 8007b92:	6869      	ldr	r1, [r5, #4]
 8007b94:	4658      	mov	r0, fp
 8007b96:	f000 fa0f 	bl	8007fb8 <_Balloc>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	b928      	cbnz	r0, 8007baa <_dtoa_r+0x97a>
 8007b9e:	4b84      	ldr	r3, [pc, #528]	@ (8007db0 <_dtoa_r+0xb80>)
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ba6:	f7ff bb5a 	b.w	800725e <_dtoa_r+0x2e>
 8007baa:	692a      	ldr	r2, [r5, #16]
 8007bac:	3202      	adds	r2, #2
 8007bae:	0092      	lsls	r2, r2, #2
 8007bb0:	f105 010c 	add.w	r1, r5, #12
 8007bb4:	300c      	adds	r0, #12
 8007bb6:	f000 ffaf 	bl	8008b18 <memcpy>
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	f000 fc08 	bl	80083d4 <__lshift>
 8007bc4:	f10a 0301 	add.w	r3, sl, #1
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	9b00      	ldr	r3, [sp, #0]
 8007bcc:	4453      	add	r3, sl
 8007bce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bd0:	9b02      	ldr	r3, [sp, #8]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	462f      	mov	r7, r5
 8007bd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bda:	4605      	mov	r5, r0
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	4621      	mov	r1, r4
 8007be0:	3b01      	subs	r3, #1
 8007be2:	4648      	mov	r0, r9
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	f7ff fa98 	bl	800711a <quorem>
 8007bea:	4639      	mov	r1, r7
 8007bec:	9002      	str	r0, [sp, #8]
 8007bee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bf2:	4648      	mov	r0, r9
 8007bf4:	f000 fc5a 	bl	80084ac <__mcmp>
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	9008      	str	r0, [sp, #32]
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4658      	mov	r0, fp
 8007c00:	f000 fc70 	bl	80084e4 <__mdiff>
 8007c04:	68c2      	ldr	r2, [r0, #12]
 8007c06:	4606      	mov	r6, r0
 8007c08:	bb02      	cbnz	r2, 8007c4c <_dtoa_r+0xa1c>
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	4648      	mov	r0, r9
 8007c0e:	f000 fc4d 	bl	80084ac <__mcmp>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4631      	mov	r1, r6
 8007c16:	4658      	mov	r0, fp
 8007c18:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c1a:	f000 fa0d 	bl	8008038 <_Bfree>
 8007c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c22:	9e07      	ldr	r6, [sp, #28]
 8007c24:	ea43 0102 	orr.w	r1, r3, r2
 8007c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2a:	4319      	orrs	r1, r3
 8007c2c:	d110      	bne.n	8007c50 <_dtoa_r+0xa20>
 8007c2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c32:	d029      	beq.n	8007c88 <_dtoa_r+0xa58>
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd02      	ble.n	8007c40 <_dtoa_r+0xa10>
 8007c3a:	9b02      	ldr	r3, [sp, #8]
 8007c3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c40:	9b00      	ldr	r3, [sp, #0]
 8007c42:	f883 8000 	strb.w	r8, [r3]
 8007c46:	e63f      	b.n	80078c8 <_dtoa_r+0x698>
 8007c48:	4628      	mov	r0, r5
 8007c4a:	e7bb      	b.n	8007bc4 <_dtoa_r+0x994>
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	e7e1      	b.n	8007c14 <_dtoa_r+0x9e4>
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	db04      	blt.n	8007c60 <_dtoa_r+0xa30>
 8007c56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	d120      	bne.n	8007ca2 <_dtoa_r+0xa72>
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	dded      	ble.n	8007c40 <_dtoa_r+0xa10>
 8007c64:	4649      	mov	r1, r9
 8007c66:	2201      	movs	r2, #1
 8007c68:	4658      	mov	r0, fp
 8007c6a:	f000 fbb3 	bl	80083d4 <__lshift>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4681      	mov	r9, r0
 8007c72:	f000 fc1b 	bl	80084ac <__mcmp>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	dc03      	bgt.n	8007c82 <_dtoa_r+0xa52>
 8007c7a:	d1e1      	bne.n	8007c40 <_dtoa_r+0xa10>
 8007c7c:	f018 0f01 	tst.w	r8, #1
 8007c80:	d0de      	beq.n	8007c40 <_dtoa_r+0xa10>
 8007c82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c86:	d1d8      	bne.n	8007c3a <_dtoa_r+0xa0a>
 8007c88:	9a00      	ldr	r2, [sp, #0]
 8007c8a:	2339      	movs	r3, #57	@ 0x39
 8007c8c:	7013      	strb	r3, [r2, #0]
 8007c8e:	4633      	mov	r3, r6
 8007c90:	461e      	mov	r6, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c98:	2a39      	cmp	r2, #57	@ 0x39
 8007c9a:	d052      	beq.n	8007d42 <_dtoa_r+0xb12>
 8007c9c:	3201      	adds	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
 8007ca0:	e612      	b.n	80078c8 <_dtoa_r+0x698>
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	dd07      	ble.n	8007cb6 <_dtoa_r+0xa86>
 8007ca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007caa:	d0ed      	beq.n	8007c88 <_dtoa_r+0xa58>
 8007cac:	9a00      	ldr	r2, [sp, #0]
 8007cae:	f108 0301 	add.w	r3, r8, #1
 8007cb2:	7013      	strb	r3, [r2, #0]
 8007cb4:	e608      	b.n	80078c8 <_dtoa_r+0x698>
 8007cb6:	9b07      	ldr	r3, [sp, #28]
 8007cb8:	9a07      	ldr	r2, [sp, #28]
 8007cba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d028      	beq.n	8007d16 <_dtoa_r+0xae6>
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	220a      	movs	r2, #10
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 f9d6 	bl	800807c <__multadd>
 8007cd0:	42af      	cmp	r7, r5
 8007cd2:	4681      	mov	r9, r0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	f04f 020a 	mov.w	r2, #10
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4658      	mov	r0, fp
 8007ce0:	d107      	bne.n	8007cf2 <_dtoa_r+0xac2>
 8007ce2:	f000 f9cb 	bl	800807c <__multadd>
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	4605      	mov	r5, r0
 8007cea:	9b07      	ldr	r3, [sp, #28]
 8007cec:	3301      	adds	r3, #1
 8007cee:	9307      	str	r3, [sp, #28]
 8007cf0:	e774      	b.n	8007bdc <_dtoa_r+0x9ac>
 8007cf2:	f000 f9c3 	bl	800807c <__multadd>
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	4658      	mov	r0, fp
 8007d00:	f000 f9bc 	bl	800807c <__multadd>
 8007d04:	4605      	mov	r5, r0
 8007d06:	e7f0      	b.n	8007cea <_dtoa_r+0xaba>
 8007d08:	9b00      	ldr	r3, [sp, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bfcc      	ite	gt
 8007d0e:	461e      	movgt	r6, r3
 8007d10:	2601      	movle	r6, #1
 8007d12:	4456      	add	r6, sl
 8007d14:	2700      	movs	r7, #0
 8007d16:	4649      	mov	r1, r9
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4658      	mov	r0, fp
 8007d1c:	f000 fb5a 	bl	80083d4 <__lshift>
 8007d20:	4621      	mov	r1, r4
 8007d22:	4681      	mov	r9, r0
 8007d24:	f000 fbc2 	bl	80084ac <__mcmp>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dcb0      	bgt.n	8007c8e <_dtoa_r+0xa5e>
 8007d2c:	d102      	bne.n	8007d34 <_dtoa_r+0xb04>
 8007d2e:	f018 0f01 	tst.w	r8, #1
 8007d32:	d1ac      	bne.n	8007c8e <_dtoa_r+0xa5e>
 8007d34:	4633      	mov	r3, r6
 8007d36:	461e      	mov	r6, r3
 8007d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3c:	2a30      	cmp	r2, #48	@ 0x30
 8007d3e:	d0fa      	beq.n	8007d36 <_dtoa_r+0xb06>
 8007d40:	e5c2      	b.n	80078c8 <_dtoa_r+0x698>
 8007d42:	459a      	cmp	sl, r3
 8007d44:	d1a4      	bne.n	8007c90 <_dtoa_r+0xa60>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	2331      	movs	r3, #49	@ 0x31
 8007d4e:	f88a 3000 	strb.w	r3, [sl]
 8007d52:	e5b9      	b.n	80078c8 <_dtoa_r+0x698>
 8007d54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007db4 <_dtoa_r+0xb84>
 8007d5a:	b11b      	cbz	r3, 8007d64 <_dtoa_r+0xb34>
 8007d5c:	f10a 0308 	add.w	r3, sl, #8
 8007d60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4650      	mov	r0, sl
 8007d66:	b019      	add	sp, #100	@ 0x64
 8007d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	f77f ae37 	ble.w	80079e2 <_dtoa_r+0x7b2>
 8007d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d78:	2001      	movs	r0, #1
 8007d7a:	e655      	b.n	8007a28 <_dtoa_r+0x7f8>
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f77f aed6 	ble.w	8007b30 <_dtoa_r+0x900>
 8007d84:	4656      	mov	r6, sl
 8007d86:	4621      	mov	r1, r4
 8007d88:	4648      	mov	r0, r9
 8007d8a:	f7ff f9c6 	bl	800711a <quorem>
 8007d8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d92:	f806 8b01 	strb.w	r8, [r6], #1
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	eba6 020a 	sub.w	r2, r6, sl
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	ddb3      	ble.n	8007d08 <_dtoa_r+0xad8>
 8007da0:	4649      	mov	r1, r9
 8007da2:	2300      	movs	r3, #0
 8007da4:	220a      	movs	r2, #10
 8007da6:	4658      	mov	r0, fp
 8007da8:	f000 f968 	bl	800807c <__multadd>
 8007dac:	4681      	mov	r9, r0
 8007dae:	e7ea      	b.n	8007d86 <_dtoa_r+0xb56>
 8007db0:	08009a18 	.word	0x08009a18
 8007db4:	0800999c 	.word	0x0800999c

08007db8 <_free_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4605      	mov	r5, r0
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d041      	beq.n	8007e44 <_free_r+0x8c>
 8007dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc4:	1f0c      	subs	r4, r1, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfb8      	it	lt
 8007dca:	18e4      	addlt	r4, r4, r3
 8007dcc:	f000 f8e8 	bl	8007fa0 <__malloc_lock>
 8007dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e48 <_free_r+0x90>)
 8007dd2:	6813      	ldr	r3, [r2, #0]
 8007dd4:	b933      	cbnz	r3, 8007de4 <_free_r+0x2c>
 8007dd6:	6063      	str	r3, [r4, #4]
 8007dd8:	6014      	str	r4, [r2, #0]
 8007dda:	4628      	mov	r0, r5
 8007ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de0:	f000 b8e4 	b.w	8007fac <__malloc_unlock>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d908      	bls.n	8007dfa <_free_r+0x42>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	1821      	adds	r1, r4, r0
 8007dec:	428b      	cmp	r3, r1
 8007dee:	bf01      	itttt	eq
 8007df0:	6819      	ldreq	r1, [r3, #0]
 8007df2:	685b      	ldreq	r3, [r3, #4]
 8007df4:	1809      	addeq	r1, r1, r0
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	e7ed      	b.n	8007dd6 <_free_r+0x1e>
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	b10b      	cbz	r3, 8007e04 <_free_r+0x4c>
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	d9fa      	bls.n	8007dfa <_free_r+0x42>
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	1850      	adds	r0, r2, r1
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d10b      	bne.n	8007e24 <_free_r+0x6c>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	4401      	add	r1, r0
 8007e10:	1850      	adds	r0, r2, r1
 8007e12:	4283      	cmp	r3, r0
 8007e14:	6011      	str	r1, [r2, #0]
 8007e16:	d1e0      	bne.n	8007dda <_free_r+0x22>
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	6053      	str	r3, [r2, #4]
 8007e1e:	4408      	add	r0, r1
 8007e20:	6010      	str	r0, [r2, #0]
 8007e22:	e7da      	b.n	8007dda <_free_r+0x22>
 8007e24:	d902      	bls.n	8007e2c <_free_r+0x74>
 8007e26:	230c      	movs	r3, #12
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	e7d6      	b.n	8007dda <_free_r+0x22>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	1821      	adds	r1, r4, r0
 8007e30:	428b      	cmp	r3, r1
 8007e32:	bf04      	itt	eq
 8007e34:	6819      	ldreq	r1, [r3, #0]
 8007e36:	685b      	ldreq	r3, [r3, #4]
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	bf04      	itt	eq
 8007e3c:	1809      	addeq	r1, r1, r0
 8007e3e:	6021      	streq	r1, [r4, #0]
 8007e40:	6054      	str	r4, [r2, #4]
 8007e42:	e7ca      	b.n	8007dda <_free_r+0x22>
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	20000900 	.word	0x20000900

08007e4c <malloc>:
 8007e4c:	4b02      	ldr	r3, [pc, #8]	@ (8007e58 <malloc+0xc>)
 8007e4e:	4601      	mov	r1, r0
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	f000 b825 	b.w	8007ea0 <_malloc_r>
 8007e56:	bf00      	nop
 8007e58:	20000020 	.word	0x20000020

08007e5c <sbrk_aligned>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007e9c <sbrk_aligned+0x40>)
 8007e60:	460c      	mov	r4, r1
 8007e62:	6831      	ldr	r1, [r6, #0]
 8007e64:	4605      	mov	r5, r0
 8007e66:	b911      	cbnz	r1, 8007e6e <sbrk_aligned+0x12>
 8007e68:	f000 fe46 	bl	8008af8 <_sbrk_r>
 8007e6c:	6030      	str	r0, [r6, #0]
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	f000 fe41 	bl	8008af8 <_sbrk_r>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d103      	bne.n	8007e82 <sbrk_aligned+0x26>
 8007e7a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e7e:	4620      	mov	r0, r4
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	1cc4      	adds	r4, r0, #3
 8007e84:	f024 0403 	bic.w	r4, r4, #3
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d0f8      	beq.n	8007e7e <sbrk_aligned+0x22>
 8007e8c:	1a21      	subs	r1, r4, r0
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 fe32 	bl	8008af8 <_sbrk_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d1f2      	bne.n	8007e7e <sbrk_aligned+0x22>
 8007e98:	e7ef      	b.n	8007e7a <sbrk_aligned+0x1e>
 8007e9a:	bf00      	nop
 8007e9c:	200008fc 	.word	0x200008fc

08007ea0 <_malloc_r>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	1ccd      	adds	r5, r1, #3
 8007ea6:	f025 0503 	bic.w	r5, r5, #3
 8007eaa:	3508      	adds	r5, #8
 8007eac:	2d0c      	cmp	r5, #12
 8007eae:	bf38      	it	cc
 8007eb0:	250c      	movcc	r5, #12
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	db01      	blt.n	8007ebc <_malloc_r+0x1c>
 8007eb8:	42a9      	cmp	r1, r5
 8007eba:	d904      	bls.n	8007ec6 <_malloc_r+0x26>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	6033      	str	r3, [r6, #0]
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f9c <_malloc_r+0xfc>
 8007eca:	f000 f869 	bl	8007fa0 <__malloc_lock>
 8007ece:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	bb44      	cbnz	r4, 8007f28 <_malloc_r+0x88>
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7ff ffbf 	bl	8007e5c <sbrk_aligned>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	d158      	bne.n	8007f96 <_malloc_r+0xf6>
 8007ee4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ee8:	4627      	mov	r7, r4
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	d143      	bne.n	8007f76 <_malloc_r+0xd6>
 8007eee:	2c00      	cmp	r4, #0
 8007ef0:	d04b      	beq.n	8007f8a <_malloc_r+0xea>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	eb04 0903 	add.w	r9, r4, r3
 8007efc:	f000 fdfc 	bl	8008af8 <_sbrk_r>
 8007f00:	4581      	cmp	r9, r0
 8007f02:	d142      	bne.n	8007f8a <_malloc_r+0xea>
 8007f04:	6821      	ldr	r1, [r4, #0]
 8007f06:	1a6d      	subs	r5, r5, r1
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ffa6 	bl	8007e5c <sbrk_aligned>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d03a      	beq.n	8007f8a <_malloc_r+0xea>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	442b      	add	r3, r5
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	bb62      	cbnz	r2, 8007f7c <_malloc_r+0xdc>
 8007f22:	f8c8 7000 	str.w	r7, [r8]
 8007f26:	e00f      	b.n	8007f48 <_malloc_r+0xa8>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	1b52      	subs	r2, r2, r5
 8007f2c:	d420      	bmi.n	8007f70 <_malloc_r+0xd0>
 8007f2e:	2a0b      	cmp	r2, #11
 8007f30:	d917      	bls.n	8007f62 <_malloc_r+0xc2>
 8007f32:	1961      	adds	r1, r4, r5
 8007f34:	42a3      	cmp	r3, r4
 8007f36:	6025      	str	r5, [r4, #0]
 8007f38:	bf18      	it	ne
 8007f3a:	6059      	strne	r1, [r3, #4]
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	bf08      	it	eq
 8007f40:	f8c8 1000 	streq.w	r1, [r8]
 8007f44:	5162      	str	r2, [r4, r5]
 8007f46:	604b      	str	r3, [r1, #4]
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 f82f 	bl	8007fac <__malloc_unlock>
 8007f4e:	f104 000b 	add.w	r0, r4, #11
 8007f52:	1d23      	adds	r3, r4, #4
 8007f54:	f020 0007 	bic.w	r0, r0, #7
 8007f58:	1ac2      	subs	r2, r0, r3
 8007f5a:	bf1c      	itt	ne
 8007f5c:	1a1b      	subne	r3, r3, r0
 8007f5e:	50a3      	strne	r3, [r4, r2]
 8007f60:	e7af      	b.n	8007ec2 <_malloc_r+0x22>
 8007f62:	6862      	ldr	r2, [r4, #4]
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	bf0c      	ite	eq
 8007f68:	f8c8 2000 	streq.w	r2, [r8]
 8007f6c:	605a      	strne	r2, [r3, #4]
 8007f6e:	e7eb      	b.n	8007f48 <_malloc_r+0xa8>
 8007f70:	4623      	mov	r3, r4
 8007f72:	6864      	ldr	r4, [r4, #4]
 8007f74:	e7ae      	b.n	8007ed4 <_malloc_r+0x34>
 8007f76:	463c      	mov	r4, r7
 8007f78:	687f      	ldr	r7, [r7, #4]
 8007f7a:	e7b6      	b.n	8007eea <_malloc_r+0x4a>
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d1fb      	bne.n	8007f7c <_malloc_r+0xdc>
 8007f84:	2300      	movs	r3, #0
 8007f86:	6053      	str	r3, [r2, #4]
 8007f88:	e7de      	b.n	8007f48 <_malloc_r+0xa8>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	6033      	str	r3, [r6, #0]
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f000 f80c 	bl	8007fac <__malloc_unlock>
 8007f94:	e794      	b.n	8007ec0 <_malloc_r+0x20>
 8007f96:	6005      	str	r5, [r0, #0]
 8007f98:	e7d6      	b.n	8007f48 <_malloc_r+0xa8>
 8007f9a:	bf00      	nop
 8007f9c:	20000900 	.word	0x20000900

08007fa0 <__malloc_lock>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	@ (8007fa8 <__malloc_lock+0x8>)
 8007fa2:	f7ff b8b8 	b.w	8007116 <__retarget_lock_acquire_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	200008f8 	.word	0x200008f8

08007fac <__malloc_unlock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	@ (8007fb4 <__malloc_unlock+0x8>)
 8007fae:	f7ff b8b3 	b.w	8007118 <__retarget_lock_release_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	200008f8 	.word	0x200008f8

08007fb8 <_Balloc>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	69c6      	ldr	r6, [r0, #28]
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	b976      	cbnz	r6, 8007fe0 <_Balloc+0x28>
 8007fc2:	2010      	movs	r0, #16
 8007fc4:	f7ff ff42 	bl	8007e4c <malloc>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	61e0      	str	r0, [r4, #28]
 8007fcc:	b920      	cbnz	r0, 8007fd8 <_Balloc+0x20>
 8007fce:	4b18      	ldr	r3, [pc, #96]	@ (8008030 <_Balloc+0x78>)
 8007fd0:	4818      	ldr	r0, [pc, #96]	@ (8008034 <_Balloc+0x7c>)
 8007fd2:	216b      	movs	r1, #107	@ 0x6b
 8007fd4:	f000 fdae 	bl	8008b34 <__assert_func>
 8007fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fdc:	6006      	str	r6, [r0, #0]
 8007fde:	60c6      	str	r6, [r0, #12]
 8007fe0:	69e6      	ldr	r6, [r4, #28]
 8007fe2:	68f3      	ldr	r3, [r6, #12]
 8007fe4:	b183      	cbz	r3, 8008008 <_Balloc+0x50>
 8007fe6:	69e3      	ldr	r3, [r4, #28]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fee:	b9b8      	cbnz	r0, 8008020 <_Balloc+0x68>
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ff6:	1d72      	adds	r2, r6, #5
 8007ff8:	0092      	lsls	r2, r2, #2
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fdb8 	bl	8008b70 <_calloc_r>
 8008000:	b160      	cbz	r0, 800801c <_Balloc+0x64>
 8008002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008006:	e00e      	b.n	8008026 <_Balloc+0x6e>
 8008008:	2221      	movs	r2, #33	@ 0x21
 800800a:	2104      	movs	r1, #4
 800800c:	4620      	mov	r0, r4
 800800e:	f000 fdaf 	bl	8008b70 <_calloc_r>
 8008012:	69e3      	ldr	r3, [r4, #28]
 8008014:	60f0      	str	r0, [r6, #12]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e4      	bne.n	8007fe6 <_Balloc+0x2e>
 800801c:	2000      	movs	r0, #0
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	6802      	ldr	r2, [r0, #0]
 8008022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008026:	2300      	movs	r3, #0
 8008028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800802c:	e7f7      	b.n	800801e <_Balloc+0x66>
 800802e:	bf00      	nop
 8008030:	080099a9 	.word	0x080099a9
 8008034:	08009a29 	.word	0x08009a29

08008038 <_Bfree>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	69c6      	ldr	r6, [r0, #28]
 800803c:	4605      	mov	r5, r0
 800803e:	460c      	mov	r4, r1
 8008040:	b976      	cbnz	r6, 8008060 <_Bfree+0x28>
 8008042:	2010      	movs	r0, #16
 8008044:	f7ff ff02 	bl	8007e4c <malloc>
 8008048:	4602      	mov	r2, r0
 800804a:	61e8      	str	r0, [r5, #28]
 800804c:	b920      	cbnz	r0, 8008058 <_Bfree+0x20>
 800804e:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <_Bfree+0x3c>)
 8008050:	4809      	ldr	r0, [pc, #36]	@ (8008078 <_Bfree+0x40>)
 8008052:	218f      	movs	r1, #143	@ 0x8f
 8008054:	f000 fd6e 	bl	8008b34 <__assert_func>
 8008058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800805c:	6006      	str	r6, [r0, #0]
 800805e:	60c6      	str	r6, [r0, #12]
 8008060:	b13c      	cbz	r4, 8008072 <_Bfree+0x3a>
 8008062:	69eb      	ldr	r3, [r5, #28]
 8008064:	6862      	ldr	r2, [r4, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800806c:	6021      	str	r1, [r4, #0]
 800806e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	080099a9 	.word	0x080099a9
 8008078:	08009a29 	.word	0x08009a29

0800807c <__multadd>:
 800807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	690d      	ldr	r5, [r1, #16]
 8008082:	4607      	mov	r7, r0
 8008084:	460c      	mov	r4, r1
 8008086:	461e      	mov	r6, r3
 8008088:	f101 0c14 	add.w	ip, r1, #20
 800808c:	2000      	movs	r0, #0
 800808e:	f8dc 3000 	ldr.w	r3, [ip]
 8008092:	b299      	uxth	r1, r3
 8008094:	fb02 6101 	mla	r1, r2, r1, r6
 8008098:	0c1e      	lsrs	r6, r3, #16
 800809a:	0c0b      	lsrs	r3, r1, #16
 800809c:	fb02 3306 	mla	r3, r2, r6, r3
 80080a0:	b289      	uxth	r1, r1
 80080a2:	3001      	adds	r0, #1
 80080a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080a8:	4285      	cmp	r5, r0
 80080aa:	f84c 1b04 	str.w	r1, [ip], #4
 80080ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080b2:	dcec      	bgt.n	800808e <__multadd+0x12>
 80080b4:	b30e      	cbz	r6, 80080fa <__multadd+0x7e>
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	42ab      	cmp	r3, r5
 80080ba:	dc19      	bgt.n	80080f0 <__multadd+0x74>
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	4638      	mov	r0, r7
 80080c0:	3101      	adds	r1, #1
 80080c2:	f7ff ff79 	bl	8007fb8 <_Balloc>
 80080c6:	4680      	mov	r8, r0
 80080c8:	b928      	cbnz	r0, 80080d6 <__multadd+0x5a>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <__multadd+0x84>)
 80080ce:	480d      	ldr	r0, [pc, #52]	@ (8008104 <__multadd+0x88>)
 80080d0:	21ba      	movs	r1, #186	@ 0xba
 80080d2:	f000 fd2f 	bl	8008b34 <__assert_func>
 80080d6:	6922      	ldr	r2, [r4, #16]
 80080d8:	3202      	adds	r2, #2
 80080da:	f104 010c 	add.w	r1, r4, #12
 80080de:	0092      	lsls	r2, r2, #2
 80080e0:	300c      	adds	r0, #12
 80080e2:	f000 fd19 	bl	8008b18 <memcpy>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7ff ffa5 	bl	8008038 <_Bfree>
 80080ee:	4644      	mov	r4, r8
 80080f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080f4:	3501      	adds	r5, #1
 80080f6:	615e      	str	r6, [r3, #20]
 80080f8:	6125      	str	r5, [r4, #16]
 80080fa:	4620      	mov	r0, r4
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	08009a18 	.word	0x08009a18
 8008104:	08009a29 	.word	0x08009a29

08008108 <__hi0bits>:
 8008108:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800810c:	4603      	mov	r3, r0
 800810e:	bf36      	itet	cc
 8008110:	0403      	lslcc	r3, r0, #16
 8008112:	2000      	movcs	r0, #0
 8008114:	2010      	movcc	r0, #16
 8008116:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800811a:	bf3c      	itt	cc
 800811c:	021b      	lslcc	r3, r3, #8
 800811e:	3008      	addcc	r0, #8
 8008120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008124:	bf3c      	itt	cc
 8008126:	011b      	lslcc	r3, r3, #4
 8008128:	3004      	addcc	r0, #4
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800812e:	bf3c      	itt	cc
 8008130:	009b      	lslcc	r3, r3, #2
 8008132:	3002      	addcc	r0, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	db05      	blt.n	8008144 <__hi0bits+0x3c>
 8008138:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800813c:	f100 0001 	add.w	r0, r0, #1
 8008140:	bf08      	it	eq
 8008142:	2020      	moveq	r0, #32
 8008144:	4770      	bx	lr

08008146 <__lo0bits>:
 8008146:	6803      	ldr	r3, [r0, #0]
 8008148:	4602      	mov	r2, r0
 800814a:	f013 0007 	ands.w	r0, r3, #7
 800814e:	d00b      	beq.n	8008168 <__lo0bits+0x22>
 8008150:	07d9      	lsls	r1, r3, #31
 8008152:	d421      	bmi.n	8008198 <__lo0bits+0x52>
 8008154:	0798      	lsls	r0, r3, #30
 8008156:	bf49      	itett	mi
 8008158:	085b      	lsrmi	r3, r3, #1
 800815a:	089b      	lsrpl	r3, r3, #2
 800815c:	2001      	movmi	r0, #1
 800815e:	6013      	strmi	r3, [r2, #0]
 8008160:	bf5c      	itt	pl
 8008162:	6013      	strpl	r3, [r2, #0]
 8008164:	2002      	movpl	r0, #2
 8008166:	4770      	bx	lr
 8008168:	b299      	uxth	r1, r3
 800816a:	b909      	cbnz	r1, 8008170 <__lo0bits+0x2a>
 800816c:	0c1b      	lsrs	r3, r3, #16
 800816e:	2010      	movs	r0, #16
 8008170:	b2d9      	uxtb	r1, r3
 8008172:	b909      	cbnz	r1, 8008178 <__lo0bits+0x32>
 8008174:	3008      	adds	r0, #8
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	0719      	lsls	r1, r3, #28
 800817a:	bf04      	itt	eq
 800817c:	091b      	lsreq	r3, r3, #4
 800817e:	3004      	addeq	r0, #4
 8008180:	0799      	lsls	r1, r3, #30
 8008182:	bf04      	itt	eq
 8008184:	089b      	lsreq	r3, r3, #2
 8008186:	3002      	addeq	r0, #2
 8008188:	07d9      	lsls	r1, r3, #31
 800818a:	d403      	bmi.n	8008194 <__lo0bits+0x4e>
 800818c:	085b      	lsrs	r3, r3, #1
 800818e:	f100 0001 	add.w	r0, r0, #1
 8008192:	d003      	beq.n	800819c <__lo0bits+0x56>
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	4770      	bx	lr
 8008198:	2000      	movs	r0, #0
 800819a:	4770      	bx	lr
 800819c:	2020      	movs	r0, #32
 800819e:	4770      	bx	lr

080081a0 <__i2b>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	460c      	mov	r4, r1
 80081a4:	2101      	movs	r1, #1
 80081a6:	f7ff ff07 	bl	8007fb8 <_Balloc>
 80081aa:	4602      	mov	r2, r0
 80081ac:	b928      	cbnz	r0, 80081ba <__i2b+0x1a>
 80081ae:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <__i2b+0x24>)
 80081b0:	4805      	ldr	r0, [pc, #20]	@ (80081c8 <__i2b+0x28>)
 80081b2:	f240 1145 	movw	r1, #325	@ 0x145
 80081b6:	f000 fcbd 	bl	8008b34 <__assert_func>
 80081ba:	2301      	movs	r3, #1
 80081bc:	6144      	str	r4, [r0, #20]
 80081be:	6103      	str	r3, [r0, #16]
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	08009a18 	.word	0x08009a18
 80081c8:	08009a29 	.word	0x08009a29

080081cc <__multiply>:
 80081cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	4614      	mov	r4, r2
 80081d2:	690a      	ldr	r2, [r1, #16]
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	bfa8      	it	ge
 80081da:	4623      	movge	r3, r4
 80081dc:	460f      	mov	r7, r1
 80081de:	bfa4      	itt	ge
 80081e0:	460c      	movge	r4, r1
 80081e2:	461f      	movge	r7, r3
 80081e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	6861      	ldr	r1, [r4, #4]
 80081f0:	eb0a 0609 	add.w	r6, sl, r9
 80081f4:	42b3      	cmp	r3, r6
 80081f6:	b085      	sub	sp, #20
 80081f8:	bfb8      	it	lt
 80081fa:	3101      	addlt	r1, #1
 80081fc:	f7ff fedc 	bl	8007fb8 <_Balloc>
 8008200:	b930      	cbnz	r0, 8008210 <__multiply+0x44>
 8008202:	4602      	mov	r2, r0
 8008204:	4b44      	ldr	r3, [pc, #272]	@ (8008318 <__multiply+0x14c>)
 8008206:	4845      	ldr	r0, [pc, #276]	@ (800831c <__multiply+0x150>)
 8008208:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800820c:	f000 fc92 	bl	8008b34 <__assert_func>
 8008210:	f100 0514 	add.w	r5, r0, #20
 8008214:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008218:	462b      	mov	r3, r5
 800821a:	2200      	movs	r2, #0
 800821c:	4543      	cmp	r3, r8
 800821e:	d321      	bcc.n	8008264 <__multiply+0x98>
 8008220:	f107 0114 	add.w	r1, r7, #20
 8008224:	f104 0214 	add.w	r2, r4, #20
 8008228:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800822c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008230:	9302      	str	r3, [sp, #8]
 8008232:	1b13      	subs	r3, r2, r4
 8008234:	3b15      	subs	r3, #21
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	3304      	adds	r3, #4
 800823c:	f104 0715 	add.w	r7, r4, #21
 8008240:	42ba      	cmp	r2, r7
 8008242:	bf38      	it	cc
 8008244:	2304      	movcc	r3, #4
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	9103      	str	r1, [sp, #12]
 800824c:	428b      	cmp	r3, r1
 800824e:	d80c      	bhi.n	800826a <__multiply+0x9e>
 8008250:	2e00      	cmp	r6, #0
 8008252:	dd03      	ble.n	800825c <__multiply+0x90>
 8008254:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008258:	2b00      	cmp	r3, #0
 800825a:	d05b      	beq.n	8008314 <__multiply+0x148>
 800825c:	6106      	str	r6, [r0, #16]
 800825e:	b005      	add	sp, #20
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	f843 2b04 	str.w	r2, [r3], #4
 8008268:	e7d8      	b.n	800821c <__multiply+0x50>
 800826a:	f8b1 a000 	ldrh.w	sl, [r1]
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	d024      	beq.n	80082be <__multiply+0xf2>
 8008274:	f104 0e14 	add.w	lr, r4, #20
 8008278:	46a9      	mov	r9, r5
 800827a:	f04f 0c00 	mov.w	ip, #0
 800827e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008282:	f8d9 3000 	ldr.w	r3, [r9]
 8008286:	fa1f fb87 	uxth.w	fp, r7
 800828a:	b29b      	uxth	r3, r3
 800828c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008290:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008294:	f8d9 7000 	ldr.w	r7, [r9]
 8008298:	4463      	add	r3, ip
 800829a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800829e:	fb0a c70b 	mla	r7, sl, fp, ip
 80082a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082ac:	4572      	cmp	r2, lr
 80082ae:	f849 3b04 	str.w	r3, [r9], #4
 80082b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082b6:	d8e2      	bhi.n	800827e <__multiply+0xb2>
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	f845 c003 	str.w	ip, [r5, r3]
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082c4:	3104      	adds	r1, #4
 80082c6:	f1b9 0f00 	cmp.w	r9, #0
 80082ca:	d021      	beq.n	8008310 <__multiply+0x144>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	f104 0c14 	add.w	ip, r4, #20
 80082d2:	46ae      	mov	lr, r5
 80082d4:	f04f 0a00 	mov.w	sl, #0
 80082d8:	f8bc b000 	ldrh.w	fp, [ip]
 80082dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082e0:	fb09 770b 	mla	r7, r9, fp, r7
 80082e4:	4457      	add	r7, sl
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082ec:	f84e 3b04 	str.w	r3, [lr], #4
 80082f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082f8:	f8be 3000 	ldrh.w	r3, [lr]
 80082fc:	fb09 330a 	mla	r3, r9, sl, r3
 8008300:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008304:	4562      	cmp	r2, ip
 8008306:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800830a:	d8e5      	bhi.n	80082d8 <__multiply+0x10c>
 800830c:	9f01      	ldr	r7, [sp, #4]
 800830e:	51eb      	str	r3, [r5, r7]
 8008310:	3504      	adds	r5, #4
 8008312:	e799      	b.n	8008248 <__multiply+0x7c>
 8008314:	3e01      	subs	r6, #1
 8008316:	e79b      	b.n	8008250 <__multiply+0x84>
 8008318:	08009a18 	.word	0x08009a18
 800831c:	08009a29 	.word	0x08009a29

08008320 <__pow5mult>:
 8008320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008324:	4615      	mov	r5, r2
 8008326:	f012 0203 	ands.w	r2, r2, #3
 800832a:	4607      	mov	r7, r0
 800832c:	460e      	mov	r6, r1
 800832e:	d007      	beq.n	8008340 <__pow5mult+0x20>
 8008330:	4c25      	ldr	r4, [pc, #148]	@ (80083c8 <__pow5mult+0xa8>)
 8008332:	3a01      	subs	r2, #1
 8008334:	2300      	movs	r3, #0
 8008336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800833a:	f7ff fe9f 	bl	800807c <__multadd>
 800833e:	4606      	mov	r6, r0
 8008340:	10ad      	asrs	r5, r5, #2
 8008342:	d03d      	beq.n	80083c0 <__pow5mult+0xa0>
 8008344:	69fc      	ldr	r4, [r7, #28]
 8008346:	b97c      	cbnz	r4, 8008368 <__pow5mult+0x48>
 8008348:	2010      	movs	r0, #16
 800834a:	f7ff fd7f 	bl	8007e4c <malloc>
 800834e:	4602      	mov	r2, r0
 8008350:	61f8      	str	r0, [r7, #28]
 8008352:	b928      	cbnz	r0, 8008360 <__pow5mult+0x40>
 8008354:	4b1d      	ldr	r3, [pc, #116]	@ (80083cc <__pow5mult+0xac>)
 8008356:	481e      	ldr	r0, [pc, #120]	@ (80083d0 <__pow5mult+0xb0>)
 8008358:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800835c:	f000 fbea 	bl	8008b34 <__assert_func>
 8008360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008364:	6004      	str	r4, [r0, #0]
 8008366:	60c4      	str	r4, [r0, #12]
 8008368:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800836c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008370:	b94c      	cbnz	r4, 8008386 <__pow5mult+0x66>
 8008372:	f240 2171 	movw	r1, #625	@ 0x271
 8008376:	4638      	mov	r0, r7
 8008378:	f7ff ff12 	bl	80081a0 <__i2b>
 800837c:	2300      	movs	r3, #0
 800837e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008382:	4604      	mov	r4, r0
 8008384:	6003      	str	r3, [r0, #0]
 8008386:	f04f 0900 	mov.w	r9, #0
 800838a:	07eb      	lsls	r3, r5, #31
 800838c:	d50a      	bpl.n	80083a4 <__pow5mult+0x84>
 800838e:	4631      	mov	r1, r6
 8008390:	4622      	mov	r2, r4
 8008392:	4638      	mov	r0, r7
 8008394:	f7ff ff1a 	bl	80081cc <__multiply>
 8008398:	4631      	mov	r1, r6
 800839a:	4680      	mov	r8, r0
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff fe4b 	bl	8008038 <_Bfree>
 80083a2:	4646      	mov	r6, r8
 80083a4:	106d      	asrs	r5, r5, #1
 80083a6:	d00b      	beq.n	80083c0 <__pow5mult+0xa0>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	b938      	cbnz	r0, 80083bc <__pow5mult+0x9c>
 80083ac:	4622      	mov	r2, r4
 80083ae:	4621      	mov	r1, r4
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff ff0b 	bl	80081cc <__multiply>
 80083b6:	6020      	str	r0, [r4, #0]
 80083b8:	f8c0 9000 	str.w	r9, [r0]
 80083bc:	4604      	mov	r4, r0
 80083be:	e7e4      	b.n	800838a <__pow5mult+0x6a>
 80083c0:	4630      	mov	r0, r6
 80083c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c6:	bf00      	nop
 80083c8:	08009a84 	.word	0x08009a84
 80083cc:	080099a9 	.word	0x080099a9
 80083d0:	08009a29 	.word	0x08009a29

080083d4 <__lshift>:
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	460c      	mov	r4, r1
 80083da:	6849      	ldr	r1, [r1, #4]
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083e2:	68a3      	ldr	r3, [r4, #8]
 80083e4:	4607      	mov	r7, r0
 80083e6:	4691      	mov	r9, r2
 80083e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083ec:	f108 0601 	add.w	r6, r8, #1
 80083f0:	42b3      	cmp	r3, r6
 80083f2:	db0b      	blt.n	800840c <__lshift+0x38>
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff fddf 	bl	8007fb8 <_Balloc>
 80083fa:	4605      	mov	r5, r0
 80083fc:	b948      	cbnz	r0, 8008412 <__lshift+0x3e>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b28      	ldr	r3, [pc, #160]	@ (80084a4 <__lshift+0xd0>)
 8008402:	4829      	ldr	r0, [pc, #164]	@ (80084a8 <__lshift+0xd4>)
 8008404:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008408:	f000 fb94 	bl	8008b34 <__assert_func>
 800840c:	3101      	adds	r1, #1
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	e7ee      	b.n	80083f0 <__lshift+0x1c>
 8008412:	2300      	movs	r3, #0
 8008414:	f100 0114 	add.w	r1, r0, #20
 8008418:	f100 0210 	add.w	r2, r0, #16
 800841c:	4618      	mov	r0, r3
 800841e:	4553      	cmp	r3, sl
 8008420:	db33      	blt.n	800848a <__lshift+0xb6>
 8008422:	6920      	ldr	r0, [r4, #16]
 8008424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008428:	f104 0314 	add.w	r3, r4, #20
 800842c:	f019 091f 	ands.w	r9, r9, #31
 8008430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008434:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008438:	d02b      	beq.n	8008492 <__lshift+0xbe>
 800843a:	f1c9 0e20 	rsb	lr, r9, #32
 800843e:	468a      	mov	sl, r1
 8008440:	2200      	movs	r2, #0
 8008442:	6818      	ldr	r0, [r3, #0]
 8008444:	fa00 f009 	lsl.w	r0, r0, r9
 8008448:	4310      	orrs	r0, r2
 800844a:	f84a 0b04 	str.w	r0, [sl], #4
 800844e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008452:	459c      	cmp	ip, r3
 8008454:	fa22 f20e 	lsr.w	r2, r2, lr
 8008458:	d8f3      	bhi.n	8008442 <__lshift+0x6e>
 800845a:	ebac 0304 	sub.w	r3, ip, r4
 800845e:	3b15      	subs	r3, #21
 8008460:	f023 0303 	bic.w	r3, r3, #3
 8008464:	3304      	adds	r3, #4
 8008466:	f104 0015 	add.w	r0, r4, #21
 800846a:	4584      	cmp	ip, r0
 800846c:	bf38      	it	cc
 800846e:	2304      	movcc	r3, #4
 8008470:	50ca      	str	r2, [r1, r3]
 8008472:	b10a      	cbz	r2, 8008478 <__lshift+0xa4>
 8008474:	f108 0602 	add.w	r6, r8, #2
 8008478:	3e01      	subs	r6, #1
 800847a:	4638      	mov	r0, r7
 800847c:	612e      	str	r6, [r5, #16]
 800847e:	4621      	mov	r1, r4
 8008480:	f7ff fdda 	bl	8008038 <_Bfree>
 8008484:	4628      	mov	r0, r5
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	f842 0f04 	str.w	r0, [r2, #4]!
 800848e:	3301      	adds	r3, #1
 8008490:	e7c5      	b.n	800841e <__lshift+0x4a>
 8008492:	3904      	subs	r1, #4
 8008494:	f853 2b04 	ldr.w	r2, [r3], #4
 8008498:	f841 2f04 	str.w	r2, [r1, #4]!
 800849c:	459c      	cmp	ip, r3
 800849e:	d8f9      	bhi.n	8008494 <__lshift+0xc0>
 80084a0:	e7ea      	b.n	8008478 <__lshift+0xa4>
 80084a2:	bf00      	nop
 80084a4:	08009a18 	.word	0x08009a18
 80084a8:	08009a29 	.word	0x08009a29

080084ac <__mcmp>:
 80084ac:	690a      	ldr	r2, [r1, #16]
 80084ae:	4603      	mov	r3, r0
 80084b0:	6900      	ldr	r0, [r0, #16]
 80084b2:	1a80      	subs	r0, r0, r2
 80084b4:	b530      	push	{r4, r5, lr}
 80084b6:	d10e      	bne.n	80084d6 <__mcmp+0x2a>
 80084b8:	3314      	adds	r3, #20
 80084ba:	3114      	adds	r1, #20
 80084bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084cc:	4295      	cmp	r5, r2
 80084ce:	d003      	beq.n	80084d8 <__mcmp+0x2c>
 80084d0:	d205      	bcs.n	80084de <__mcmp+0x32>
 80084d2:	f04f 30ff 	mov.w	r0, #4294967295
 80084d6:	bd30      	pop	{r4, r5, pc}
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d3f3      	bcc.n	80084c4 <__mcmp+0x18>
 80084dc:	e7fb      	b.n	80084d6 <__mcmp+0x2a>
 80084de:	2001      	movs	r0, #1
 80084e0:	e7f9      	b.n	80084d6 <__mcmp+0x2a>
	...

080084e4 <__mdiff>:
 80084e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	4689      	mov	r9, r1
 80084ea:	4606      	mov	r6, r0
 80084ec:	4611      	mov	r1, r2
 80084ee:	4648      	mov	r0, r9
 80084f0:	4614      	mov	r4, r2
 80084f2:	f7ff ffdb 	bl	80084ac <__mcmp>
 80084f6:	1e05      	subs	r5, r0, #0
 80084f8:	d112      	bne.n	8008520 <__mdiff+0x3c>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff fd5b 	bl	8007fb8 <_Balloc>
 8008502:	4602      	mov	r2, r0
 8008504:	b928      	cbnz	r0, 8008512 <__mdiff+0x2e>
 8008506:	4b3f      	ldr	r3, [pc, #252]	@ (8008604 <__mdiff+0x120>)
 8008508:	f240 2137 	movw	r1, #567	@ 0x237
 800850c:	483e      	ldr	r0, [pc, #248]	@ (8008608 <__mdiff+0x124>)
 800850e:	f000 fb11 	bl	8008b34 <__assert_func>
 8008512:	2301      	movs	r3, #1
 8008514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008518:	4610      	mov	r0, r2
 800851a:	b003      	add	sp, #12
 800851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	bfbc      	itt	lt
 8008522:	464b      	movlt	r3, r9
 8008524:	46a1      	movlt	r9, r4
 8008526:	4630      	mov	r0, r6
 8008528:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800852c:	bfba      	itte	lt
 800852e:	461c      	movlt	r4, r3
 8008530:	2501      	movlt	r5, #1
 8008532:	2500      	movge	r5, #0
 8008534:	f7ff fd40 	bl	8007fb8 <_Balloc>
 8008538:	4602      	mov	r2, r0
 800853a:	b918      	cbnz	r0, 8008544 <__mdiff+0x60>
 800853c:	4b31      	ldr	r3, [pc, #196]	@ (8008604 <__mdiff+0x120>)
 800853e:	f240 2145 	movw	r1, #581	@ 0x245
 8008542:	e7e3      	b.n	800850c <__mdiff+0x28>
 8008544:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008548:	6926      	ldr	r6, [r4, #16]
 800854a:	60c5      	str	r5, [r0, #12]
 800854c:	f109 0310 	add.w	r3, r9, #16
 8008550:	f109 0514 	add.w	r5, r9, #20
 8008554:	f104 0e14 	add.w	lr, r4, #20
 8008558:	f100 0b14 	add.w	fp, r0, #20
 800855c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008560:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	46d9      	mov	r9, fp
 8008568:	f04f 0c00 	mov.w	ip, #0
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008572:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	fa1f f38a 	uxth.w	r3, sl
 800857c:	4619      	mov	r1, r3
 800857e:	b283      	uxth	r3, r0
 8008580:	1acb      	subs	r3, r1, r3
 8008582:	0c00      	lsrs	r0, r0, #16
 8008584:	4463      	add	r3, ip
 8008586:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800858a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800858e:	b29b      	uxth	r3, r3
 8008590:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008594:	4576      	cmp	r6, lr
 8008596:	f849 3b04 	str.w	r3, [r9], #4
 800859a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800859e:	d8e5      	bhi.n	800856c <__mdiff+0x88>
 80085a0:	1b33      	subs	r3, r6, r4
 80085a2:	3b15      	subs	r3, #21
 80085a4:	f023 0303 	bic.w	r3, r3, #3
 80085a8:	3415      	adds	r4, #21
 80085aa:	3304      	adds	r3, #4
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	bf38      	it	cc
 80085b0:	2304      	movcc	r3, #4
 80085b2:	441d      	add	r5, r3
 80085b4:	445b      	add	r3, fp
 80085b6:	461e      	mov	r6, r3
 80085b8:	462c      	mov	r4, r5
 80085ba:	4544      	cmp	r4, r8
 80085bc:	d30e      	bcc.n	80085dc <__mdiff+0xf8>
 80085be:	f108 0103 	add.w	r1, r8, #3
 80085c2:	1b49      	subs	r1, r1, r5
 80085c4:	f021 0103 	bic.w	r1, r1, #3
 80085c8:	3d03      	subs	r5, #3
 80085ca:	45a8      	cmp	r8, r5
 80085cc:	bf38      	it	cc
 80085ce:	2100      	movcc	r1, #0
 80085d0:	440b      	add	r3, r1
 80085d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085d6:	b191      	cbz	r1, 80085fe <__mdiff+0x11a>
 80085d8:	6117      	str	r7, [r2, #16]
 80085da:	e79d      	b.n	8008518 <__mdiff+0x34>
 80085dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80085e0:	46e6      	mov	lr, ip
 80085e2:	0c08      	lsrs	r0, r1, #16
 80085e4:	fa1c fc81 	uxtah	ip, ip, r1
 80085e8:	4471      	add	r1, lr
 80085ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085ee:	b289      	uxth	r1, r1
 80085f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085f4:	f846 1b04 	str.w	r1, [r6], #4
 80085f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085fc:	e7dd      	b.n	80085ba <__mdiff+0xd6>
 80085fe:	3f01      	subs	r7, #1
 8008600:	e7e7      	b.n	80085d2 <__mdiff+0xee>
 8008602:	bf00      	nop
 8008604:	08009a18 	.word	0x08009a18
 8008608:	08009a29 	.word	0x08009a29

0800860c <__d2b>:
 800860c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008610:	460f      	mov	r7, r1
 8008612:	2101      	movs	r1, #1
 8008614:	ec59 8b10 	vmov	r8, r9, d0
 8008618:	4616      	mov	r6, r2
 800861a:	f7ff fccd 	bl	8007fb8 <_Balloc>
 800861e:	4604      	mov	r4, r0
 8008620:	b930      	cbnz	r0, 8008630 <__d2b+0x24>
 8008622:	4602      	mov	r2, r0
 8008624:	4b23      	ldr	r3, [pc, #140]	@ (80086b4 <__d2b+0xa8>)
 8008626:	4824      	ldr	r0, [pc, #144]	@ (80086b8 <__d2b+0xac>)
 8008628:	f240 310f 	movw	r1, #783	@ 0x30f
 800862c:	f000 fa82 	bl	8008b34 <__assert_func>
 8008630:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008634:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008638:	b10d      	cbz	r5, 800863e <__d2b+0x32>
 800863a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	f1b8 0300 	subs.w	r3, r8, #0
 8008644:	d023      	beq.n	800868e <__d2b+0x82>
 8008646:	4668      	mov	r0, sp
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	f7ff fd7c 	bl	8008146 <__lo0bits>
 800864e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008652:	b1d0      	cbz	r0, 800868a <__d2b+0x7e>
 8008654:	f1c0 0320 	rsb	r3, r0, #32
 8008658:	fa02 f303 	lsl.w	r3, r2, r3
 800865c:	430b      	orrs	r3, r1
 800865e:	40c2      	lsrs	r2, r0
 8008660:	6163      	str	r3, [r4, #20]
 8008662:	9201      	str	r2, [sp, #4]
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	61a3      	str	r3, [r4, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	bf0c      	ite	eq
 800866c:	2201      	moveq	r2, #1
 800866e:	2202      	movne	r2, #2
 8008670:	6122      	str	r2, [r4, #16]
 8008672:	b1a5      	cbz	r5, 800869e <__d2b+0x92>
 8008674:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008678:	4405      	add	r5, r0
 800867a:	603d      	str	r5, [r7, #0]
 800867c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008680:	6030      	str	r0, [r6, #0]
 8008682:	4620      	mov	r0, r4
 8008684:	b003      	add	sp, #12
 8008686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868a:	6161      	str	r1, [r4, #20]
 800868c:	e7ea      	b.n	8008664 <__d2b+0x58>
 800868e:	a801      	add	r0, sp, #4
 8008690:	f7ff fd59 	bl	8008146 <__lo0bits>
 8008694:	9b01      	ldr	r3, [sp, #4]
 8008696:	6163      	str	r3, [r4, #20]
 8008698:	3020      	adds	r0, #32
 800869a:	2201      	movs	r2, #1
 800869c:	e7e8      	b.n	8008670 <__d2b+0x64>
 800869e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086a6:	6038      	str	r0, [r7, #0]
 80086a8:	6918      	ldr	r0, [r3, #16]
 80086aa:	f7ff fd2d 	bl	8008108 <__hi0bits>
 80086ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086b2:	e7e5      	b.n	8008680 <__d2b+0x74>
 80086b4:	08009a18 	.word	0x08009a18
 80086b8:	08009a29 	.word	0x08009a29

080086bc <__ssputs_r>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	688e      	ldr	r6, [r1, #8]
 80086c2:	461f      	mov	r7, r3
 80086c4:	42be      	cmp	r6, r7
 80086c6:	680b      	ldr	r3, [r1, #0]
 80086c8:	4682      	mov	sl, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	4690      	mov	r8, r2
 80086ce:	d82d      	bhi.n	800872c <__ssputs_r+0x70>
 80086d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086d8:	d026      	beq.n	8008728 <__ssputs_r+0x6c>
 80086da:	6965      	ldr	r5, [r4, #20]
 80086dc:	6909      	ldr	r1, [r1, #16]
 80086de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086e2:	eba3 0901 	sub.w	r9, r3, r1
 80086e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086ea:	1c7b      	adds	r3, r7, #1
 80086ec:	444b      	add	r3, r9
 80086ee:	106d      	asrs	r5, r5, #1
 80086f0:	429d      	cmp	r5, r3
 80086f2:	bf38      	it	cc
 80086f4:	461d      	movcc	r5, r3
 80086f6:	0553      	lsls	r3, r2, #21
 80086f8:	d527      	bpl.n	800874a <__ssputs_r+0x8e>
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7ff fbd0 	bl	8007ea0 <_malloc_r>
 8008700:	4606      	mov	r6, r0
 8008702:	b360      	cbz	r0, 800875e <__ssputs_r+0xa2>
 8008704:	6921      	ldr	r1, [r4, #16]
 8008706:	464a      	mov	r2, r9
 8008708:	f000 fa06 	bl	8008b18 <memcpy>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	6126      	str	r6, [r4, #16]
 800871a:	6165      	str	r5, [r4, #20]
 800871c:	444e      	add	r6, r9
 800871e:	eba5 0509 	sub.w	r5, r5, r9
 8008722:	6026      	str	r6, [r4, #0]
 8008724:	60a5      	str	r5, [r4, #8]
 8008726:	463e      	mov	r6, r7
 8008728:	42be      	cmp	r6, r7
 800872a:	d900      	bls.n	800872e <__ssputs_r+0x72>
 800872c:	463e      	mov	r6, r7
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	4632      	mov	r2, r6
 8008732:	4641      	mov	r1, r8
 8008734:	f000 f9c6 	bl	8008ac4 <memmove>
 8008738:	68a3      	ldr	r3, [r4, #8]
 800873a:	1b9b      	subs	r3, r3, r6
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	4433      	add	r3, r6
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	2000      	movs	r0, #0
 8008746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874a:	462a      	mov	r2, r5
 800874c:	f000 fa36 	bl	8008bbc <_realloc_r>
 8008750:	4606      	mov	r6, r0
 8008752:	2800      	cmp	r0, #0
 8008754:	d1e0      	bne.n	8008718 <__ssputs_r+0x5c>
 8008756:	6921      	ldr	r1, [r4, #16]
 8008758:	4650      	mov	r0, sl
 800875a:	f7ff fb2d 	bl	8007db8 <_free_r>
 800875e:	230c      	movs	r3, #12
 8008760:	f8ca 3000 	str.w	r3, [sl]
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e7e9      	b.n	8008746 <__ssputs_r+0x8a>
	...

08008774 <_svfiprintf_r>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	4698      	mov	r8, r3
 800877a:	898b      	ldrh	r3, [r1, #12]
 800877c:	061b      	lsls	r3, r3, #24
 800877e:	b09d      	sub	sp, #116	@ 0x74
 8008780:	4607      	mov	r7, r0
 8008782:	460d      	mov	r5, r1
 8008784:	4614      	mov	r4, r2
 8008786:	d510      	bpl.n	80087aa <_svfiprintf_r+0x36>
 8008788:	690b      	ldr	r3, [r1, #16]
 800878a:	b973      	cbnz	r3, 80087aa <_svfiprintf_r+0x36>
 800878c:	2140      	movs	r1, #64	@ 0x40
 800878e:	f7ff fb87 	bl	8007ea0 <_malloc_r>
 8008792:	6028      	str	r0, [r5, #0]
 8008794:	6128      	str	r0, [r5, #16]
 8008796:	b930      	cbnz	r0, 80087a6 <_svfiprintf_r+0x32>
 8008798:	230c      	movs	r3, #12
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	b01d      	add	sp, #116	@ 0x74
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	2340      	movs	r3, #64	@ 0x40
 80087a8:	616b      	str	r3, [r5, #20]
 80087aa:	2300      	movs	r3, #0
 80087ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ae:	2320      	movs	r3, #32
 80087b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087b8:	2330      	movs	r3, #48	@ 0x30
 80087ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008958 <_svfiprintf_r+0x1e4>
 80087be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087c2:	f04f 0901 	mov.w	r9, #1
 80087c6:	4623      	mov	r3, r4
 80087c8:	469a      	mov	sl, r3
 80087ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ce:	b10a      	cbz	r2, 80087d4 <_svfiprintf_r+0x60>
 80087d0:	2a25      	cmp	r2, #37	@ 0x25
 80087d2:	d1f9      	bne.n	80087c8 <_svfiprintf_r+0x54>
 80087d4:	ebba 0b04 	subs.w	fp, sl, r4
 80087d8:	d00b      	beq.n	80087f2 <_svfiprintf_r+0x7e>
 80087da:	465b      	mov	r3, fp
 80087dc:	4622      	mov	r2, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ff6b 	bl	80086bc <__ssputs_r>
 80087e6:	3001      	adds	r0, #1
 80087e8:	f000 80a7 	beq.w	800893a <_svfiprintf_r+0x1c6>
 80087ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087ee:	445a      	add	r2, fp
 80087f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087f2:	f89a 3000 	ldrb.w	r3, [sl]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 809f 	beq.w	800893a <_svfiprintf_r+0x1c6>
 80087fc:	2300      	movs	r3, #0
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008806:	f10a 0a01 	add.w	sl, sl, #1
 800880a:	9304      	str	r3, [sp, #16]
 800880c:	9307      	str	r3, [sp, #28]
 800880e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008812:	931a      	str	r3, [sp, #104]	@ 0x68
 8008814:	4654      	mov	r4, sl
 8008816:	2205      	movs	r2, #5
 8008818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881c:	484e      	ldr	r0, [pc, #312]	@ (8008958 <_svfiprintf_r+0x1e4>)
 800881e:	f7f7 fcdf 	bl	80001e0 <memchr>
 8008822:	9a04      	ldr	r2, [sp, #16]
 8008824:	b9d8      	cbnz	r0, 800885e <_svfiprintf_r+0xea>
 8008826:	06d0      	lsls	r0, r2, #27
 8008828:	bf44      	itt	mi
 800882a:	2320      	movmi	r3, #32
 800882c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008830:	0711      	lsls	r1, r2, #28
 8008832:	bf44      	itt	mi
 8008834:	232b      	movmi	r3, #43	@ 0x2b
 8008836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800883a:	f89a 3000 	ldrb.w	r3, [sl]
 800883e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008840:	d015      	beq.n	800886e <_svfiprintf_r+0xfa>
 8008842:	9a07      	ldr	r2, [sp, #28]
 8008844:	4654      	mov	r4, sl
 8008846:	2000      	movs	r0, #0
 8008848:	f04f 0c0a 	mov.w	ip, #10
 800884c:	4621      	mov	r1, r4
 800884e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008852:	3b30      	subs	r3, #48	@ 0x30
 8008854:	2b09      	cmp	r3, #9
 8008856:	d94b      	bls.n	80088f0 <_svfiprintf_r+0x17c>
 8008858:	b1b0      	cbz	r0, 8008888 <_svfiprintf_r+0x114>
 800885a:	9207      	str	r2, [sp, #28]
 800885c:	e014      	b.n	8008888 <_svfiprintf_r+0x114>
 800885e:	eba0 0308 	sub.w	r3, r0, r8
 8008862:	fa09 f303 	lsl.w	r3, r9, r3
 8008866:	4313      	orrs	r3, r2
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	46a2      	mov	sl, r4
 800886c:	e7d2      	b.n	8008814 <_svfiprintf_r+0xa0>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	1d19      	adds	r1, r3, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	9103      	str	r1, [sp, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	bfbb      	ittet	lt
 800887a:	425b      	neglt	r3, r3
 800887c:	f042 0202 	orrlt.w	r2, r2, #2
 8008880:	9307      	strge	r3, [sp, #28]
 8008882:	9307      	strlt	r3, [sp, #28]
 8008884:	bfb8      	it	lt
 8008886:	9204      	strlt	r2, [sp, #16]
 8008888:	7823      	ldrb	r3, [r4, #0]
 800888a:	2b2e      	cmp	r3, #46	@ 0x2e
 800888c:	d10a      	bne.n	80088a4 <_svfiprintf_r+0x130>
 800888e:	7863      	ldrb	r3, [r4, #1]
 8008890:	2b2a      	cmp	r3, #42	@ 0x2a
 8008892:	d132      	bne.n	80088fa <_svfiprintf_r+0x186>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	1d1a      	adds	r2, r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	9203      	str	r2, [sp, #12]
 800889c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088a0:	3402      	adds	r4, #2
 80088a2:	9305      	str	r3, [sp, #20]
 80088a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008968 <_svfiprintf_r+0x1f4>
 80088a8:	7821      	ldrb	r1, [r4, #0]
 80088aa:	2203      	movs	r2, #3
 80088ac:	4650      	mov	r0, sl
 80088ae:	f7f7 fc97 	bl	80001e0 <memchr>
 80088b2:	b138      	cbz	r0, 80088c4 <_svfiprintf_r+0x150>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	eba0 000a 	sub.w	r0, r0, sl
 80088ba:	2240      	movs	r2, #64	@ 0x40
 80088bc:	4082      	lsls	r2, r0
 80088be:	4313      	orrs	r3, r2
 80088c0:	3401      	adds	r4, #1
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c8:	4824      	ldr	r0, [pc, #144]	@ (800895c <_svfiprintf_r+0x1e8>)
 80088ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088ce:	2206      	movs	r2, #6
 80088d0:	f7f7 fc86 	bl	80001e0 <memchr>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d036      	beq.n	8008946 <_svfiprintf_r+0x1d2>
 80088d8:	4b21      	ldr	r3, [pc, #132]	@ (8008960 <_svfiprintf_r+0x1ec>)
 80088da:	bb1b      	cbnz	r3, 8008924 <_svfiprintf_r+0x1b0>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	3307      	adds	r3, #7
 80088e0:	f023 0307 	bic.w	r3, r3, #7
 80088e4:	3308      	adds	r3, #8
 80088e6:	9303      	str	r3, [sp, #12]
 80088e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ea:	4433      	add	r3, r6
 80088ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ee:	e76a      	b.n	80087c6 <_svfiprintf_r+0x52>
 80088f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088f4:	460c      	mov	r4, r1
 80088f6:	2001      	movs	r0, #1
 80088f8:	e7a8      	b.n	800884c <_svfiprintf_r+0xd8>
 80088fa:	2300      	movs	r3, #0
 80088fc:	3401      	adds	r4, #1
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	4619      	mov	r1, r3
 8008902:	f04f 0c0a 	mov.w	ip, #10
 8008906:	4620      	mov	r0, r4
 8008908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800890c:	3a30      	subs	r2, #48	@ 0x30
 800890e:	2a09      	cmp	r2, #9
 8008910:	d903      	bls.n	800891a <_svfiprintf_r+0x1a6>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0c6      	beq.n	80088a4 <_svfiprintf_r+0x130>
 8008916:	9105      	str	r1, [sp, #20]
 8008918:	e7c4      	b.n	80088a4 <_svfiprintf_r+0x130>
 800891a:	fb0c 2101 	mla	r1, ip, r1, r2
 800891e:	4604      	mov	r4, r0
 8008920:	2301      	movs	r3, #1
 8008922:	e7f0      	b.n	8008906 <_svfiprintf_r+0x192>
 8008924:	ab03      	add	r3, sp, #12
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	462a      	mov	r2, r5
 800892a:	4b0e      	ldr	r3, [pc, #56]	@ (8008964 <_svfiprintf_r+0x1f0>)
 800892c:	a904      	add	r1, sp, #16
 800892e:	4638      	mov	r0, r7
 8008930:	f7fd fe82 	bl	8006638 <_printf_float>
 8008934:	1c42      	adds	r2, r0, #1
 8008936:	4606      	mov	r6, r0
 8008938:	d1d6      	bne.n	80088e8 <_svfiprintf_r+0x174>
 800893a:	89ab      	ldrh	r3, [r5, #12]
 800893c:	065b      	lsls	r3, r3, #25
 800893e:	f53f af2d 	bmi.w	800879c <_svfiprintf_r+0x28>
 8008942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008944:	e72c      	b.n	80087a0 <_svfiprintf_r+0x2c>
 8008946:	ab03      	add	r3, sp, #12
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	462a      	mov	r2, r5
 800894c:	4b05      	ldr	r3, [pc, #20]	@ (8008964 <_svfiprintf_r+0x1f0>)
 800894e:	a904      	add	r1, sp, #16
 8008950:	4638      	mov	r0, r7
 8008952:	f7fe f909 	bl	8006b68 <_printf_i>
 8008956:	e7ed      	b.n	8008934 <_svfiprintf_r+0x1c0>
 8008958:	08009b80 	.word	0x08009b80
 800895c:	08009b8a 	.word	0x08009b8a
 8008960:	08006639 	.word	0x08006639
 8008964:	080086bd 	.word	0x080086bd
 8008968:	08009b86 	.word	0x08009b86

0800896c <__sflush_r>:
 800896c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	0716      	lsls	r6, r2, #28
 8008976:	4605      	mov	r5, r0
 8008978:	460c      	mov	r4, r1
 800897a:	d454      	bmi.n	8008a26 <__sflush_r+0xba>
 800897c:	684b      	ldr	r3, [r1, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	dc02      	bgt.n	8008988 <__sflush_r+0x1c>
 8008982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	dd48      	ble.n	8008a1a <__sflush_r+0xae>
 8008988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800898a:	2e00      	cmp	r6, #0
 800898c:	d045      	beq.n	8008a1a <__sflush_r+0xae>
 800898e:	2300      	movs	r3, #0
 8008990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008994:	682f      	ldr	r7, [r5, #0]
 8008996:	6a21      	ldr	r1, [r4, #32]
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	d030      	beq.n	80089fe <__sflush_r+0x92>
 800899c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	0759      	lsls	r1, r3, #29
 80089a2:	d505      	bpl.n	80089b0 <__sflush_r+0x44>
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	1ad2      	subs	r2, r2, r3
 80089a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089aa:	b10b      	cbz	r3, 80089b0 <__sflush_r+0x44>
 80089ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089b4:	6a21      	ldr	r1, [r4, #32]
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b0      	blx	r6
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	d106      	bne.n	80089ce <__sflush_r+0x62>
 80089c0:	6829      	ldr	r1, [r5, #0]
 80089c2:	291d      	cmp	r1, #29
 80089c4:	d82b      	bhi.n	8008a1e <__sflush_r+0xb2>
 80089c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a70 <__sflush_r+0x104>)
 80089c8:	410a      	asrs	r2, r1
 80089ca:	07d6      	lsls	r6, r2, #31
 80089cc:	d427      	bmi.n	8008a1e <__sflush_r+0xb2>
 80089ce:	2200      	movs	r2, #0
 80089d0:	6062      	str	r2, [r4, #4]
 80089d2:	04d9      	lsls	r1, r3, #19
 80089d4:	6922      	ldr	r2, [r4, #16]
 80089d6:	6022      	str	r2, [r4, #0]
 80089d8:	d504      	bpl.n	80089e4 <__sflush_r+0x78>
 80089da:	1c42      	adds	r2, r0, #1
 80089dc:	d101      	bne.n	80089e2 <__sflush_r+0x76>
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	b903      	cbnz	r3, 80089e4 <__sflush_r+0x78>
 80089e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80089e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089e6:	602f      	str	r7, [r5, #0]
 80089e8:	b1b9      	cbz	r1, 8008a1a <__sflush_r+0xae>
 80089ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089ee:	4299      	cmp	r1, r3
 80089f0:	d002      	beq.n	80089f8 <__sflush_r+0x8c>
 80089f2:	4628      	mov	r0, r5
 80089f4:	f7ff f9e0 	bl	8007db8 <_free_r>
 80089f8:	2300      	movs	r3, #0
 80089fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80089fc:	e00d      	b.n	8008a1a <__sflush_r+0xae>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b0      	blx	r6
 8008a04:	4602      	mov	r2, r0
 8008a06:	1c50      	adds	r0, r2, #1
 8008a08:	d1c9      	bne.n	800899e <__sflush_r+0x32>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0c6      	beq.n	800899e <__sflush_r+0x32>
 8008a10:	2b1d      	cmp	r3, #29
 8008a12:	d001      	beq.n	8008a18 <__sflush_r+0xac>
 8008a14:	2b16      	cmp	r3, #22
 8008a16:	d11e      	bne.n	8008a56 <__sflush_r+0xea>
 8008a18:	602f      	str	r7, [r5, #0]
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e022      	b.n	8008a64 <__sflush_r+0xf8>
 8008a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	e01b      	b.n	8008a5e <__sflush_r+0xf2>
 8008a26:	690f      	ldr	r7, [r1, #16]
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	d0f6      	beq.n	8008a1a <__sflush_r+0xae>
 8008a2c:	0793      	lsls	r3, r2, #30
 8008a2e:	680e      	ldr	r6, [r1, #0]
 8008a30:	bf08      	it	eq
 8008a32:	694b      	ldreq	r3, [r1, #20]
 8008a34:	600f      	str	r7, [r1, #0]
 8008a36:	bf18      	it	ne
 8008a38:	2300      	movne	r3, #0
 8008a3a:	eba6 0807 	sub.w	r8, r6, r7
 8008a3e:	608b      	str	r3, [r1, #8]
 8008a40:	f1b8 0f00 	cmp.w	r8, #0
 8008a44:	dde9      	ble.n	8008a1a <__sflush_r+0xae>
 8008a46:	6a21      	ldr	r1, [r4, #32]
 8008a48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a4a:	4643      	mov	r3, r8
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b0      	blx	r6
 8008a52:	2800      	cmp	r0, #0
 8008a54:	dc08      	bgt.n	8008a68 <__sflush_r+0xfc>
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a68:	4407      	add	r7, r0
 8008a6a:	eba8 0800 	sub.w	r8, r8, r0
 8008a6e:	e7e7      	b.n	8008a40 <__sflush_r+0xd4>
 8008a70:	dfbffffe 	.word	0xdfbffffe

08008a74 <_fflush_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	690b      	ldr	r3, [r1, #16]
 8008a78:	4605      	mov	r5, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	b913      	cbnz	r3, 8008a84 <_fflush_r+0x10>
 8008a7e:	2500      	movs	r5, #0
 8008a80:	4628      	mov	r0, r5
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	b118      	cbz	r0, 8008a8e <_fflush_r+0x1a>
 8008a86:	6a03      	ldr	r3, [r0, #32]
 8008a88:	b90b      	cbnz	r3, 8008a8e <_fflush_r+0x1a>
 8008a8a:	f7fe fa19 	bl	8006ec0 <__sinit>
 8008a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f3      	beq.n	8008a7e <_fflush_r+0xa>
 8008a96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a98:	07d0      	lsls	r0, r2, #31
 8008a9a:	d404      	bmi.n	8008aa6 <_fflush_r+0x32>
 8008a9c:	0599      	lsls	r1, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_fflush_r+0x32>
 8008aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aa2:	f7fe fb38 	bl	8007116 <__retarget_lock_acquire_recursive>
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7ff ff5f 	bl	800896c <__sflush_r>
 8008aae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ab0:	07da      	lsls	r2, r3, #31
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	d4e4      	bmi.n	8008a80 <_fflush_r+0xc>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	059b      	lsls	r3, r3, #22
 8008aba:	d4e1      	bmi.n	8008a80 <_fflush_r+0xc>
 8008abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008abe:	f7fe fb2b 	bl	8007118 <__retarget_lock_release_recursive>
 8008ac2:	e7dd      	b.n	8008a80 <_fflush_r+0xc>

08008ac4 <memmove>:
 8008ac4:	4288      	cmp	r0, r1
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	eb01 0402 	add.w	r4, r1, r2
 8008acc:	d902      	bls.n	8008ad4 <memmove+0x10>
 8008ace:	4284      	cmp	r4, r0
 8008ad0:	4623      	mov	r3, r4
 8008ad2:	d807      	bhi.n	8008ae4 <memmove+0x20>
 8008ad4:	1e43      	subs	r3, r0, #1
 8008ad6:	42a1      	cmp	r1, r4
 8008ad8:	d008      	beq.n	8008aec <memmove+0x28>
 8008ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae2:	e7f8      	b.n	8008ad6 <memmove+0x12>
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	428a      	cmp	r2, r1
 8008aea:	d100      	bne.n	8008aee <memmove+0x2a>
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008af6:	e7f7      	b.n	8008ae8 <memmove+0x24>

08008af8 <_sbrk_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	@ (8008b14 <_sbrk_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7f9 fad4 	bl	80020b0 <_sbrk>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_sbrk_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_sbrk_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	200008f4 	.word	0x200008f4

08008b18 <memcpy>:
 8008b18:	440a      	add	r2, r1
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b20:	d100      	bne.n	8008b24 <memcpy+0xc>
 8008b22:	4770      	bx	lr
 8008b24:	b510      	push	{r4, lr}
 8008b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	d1f9      	bne.n	8008b26 <memcpy+0xe>
 8008b32:	bd10      	pop	{r4, pc}

08008b34 <__assert_func>:
 8008b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b36:	4614      	mov	r4, r2
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <__assert_func+0x2c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4605      	mov	r5, r0
 8008b40:	68d8      	ldr	r0, [r3, #12]
 8008b42:	b954      	cbnz	r4, 8008b5a <__assert_func+0x26>
 8008b44:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <__assert_func+0x30>)
 8008b46:	461c      	mov	r4, r3
 8008b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b4c:	9100      	str	r1, [sp, #0]
 8008b4e:	462b      	mov	r3, r5
 8008b50:	4905      	ldr	r1, [pc, #20]	@ (8008b68 <__assert_func+0x34>)
 8008b52:	f000 f86f 	bl	8008c34 <fiprintf>
 8008b56:	f000 f87f 	bl	8008c58 <abort>
 8008b5a:	4b04      	ldr	r3, [pc, #16]	@ (8008b6c <__assert_func+0x38>)
 8008b5c:	e7f4      	b.n	8008b48 <__assert_func+0x14>
 8008b5e:	bf00      	nop
 8008b60:	20000020 	.word	0x20000020
 8008b64:	08009bd6 	.word	0x08009bd6
 8008b68:	08009ba8 	.word	0x08009ba8
 8008b6c:	08009b9b 	.word	0x08009b9b

08008b70 <_calloc_r>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	fba1 5402 	umull	r5, r4, r1, r2
 8008b76:	b93c      	cbnz	r4, 8008b88 <_calloc_r+0x18>
 8008b78:	4629      	mov	r1, r5
 8008b7a:	f7ff f991 	bl	8007ea0 <_malloc_r>
 8008b7e:	4606      	mov	r6, r0
 8008b80:	b928      	cbnz	r0, 8008b8e <_calloc_r+0x1e>
 8008b82:	2600      	movs	r6, #0
 8008b84:	4630      	mov	r0, r6
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	220c      	movs	r2, #12
 8008b8a:	6002      	str	r2, [r0, #0]
 8008b8c:	e7f9      	b.n	8008b82 <_calloc_r+0x12>
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4621      	mov	r1, r4
 8008b92:	f7fe fa42 	bl	800701a <memset>
 8008b96:	e7f5      	b.n	8008b84 <_calloc_r+0x14>

08008b98 <__ascii_mbtowc>:
 8008b98:	b082      	sub	sp, #8
 8008b9a:	b901      	cbnz	r1, 8008b9e <__ascii_mbtowc+0x6>
 8008b9c:	a901      	add	r1, sp, #4
 8008b9e:	b142      	cbz	r2, 8008bb2 <__ascii_mbtowc+0x1a>
 8008ba0:	b14b      	cbz	r3, 8008bb6 <__ascii_mbtowc+0x1e>
 8008ba2:	7813      	ldrb	r3, [r2, #0]
 8008ba4:	600b      	str	r3, [r1, #0]
 8008ba6:	7812      	ldrb	r2, [r2, #0]
 8008ba8:	1e10      	subs	r0, r2, #0
 8008baa:	bf18      	it	ne
 8008bac:	2001      	movne	r0, #1
 8008bae:	b002      	add	sp, #8
 8008bb0:	4770      	bx	lr
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	e7fb      	b.n	8008bae <__ascii_mbtowc+0x16>
 8008bb6:	f06f 0001 	mvn.w	r0, #1
 8008bba:	e7f8      	b.n	8008bae <__ascii_mbtowc+0x16>

08008bbc <_realloc_r>:
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	b921      	cbnz	r1, 8008bd2 <_realloc_r+0x16>
 8008bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bcc:	4611      	mov	r1, r2
 8008bce:	f7ff b967 	b.w	8007ea0 <_malloc_r>
 8008bd2:	b92a      	cbnz	r2, 8008be0 <_realloc_r+0x24>
 8008bd4:	f7ff f8f0 	bl	8007db8 <_free_r>
 8008bd8:	2400      	movs	r4, #0
 8008bda:	4620      	mov	r0, r4
 8008bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be0:	f000 f841 	bl	8008c66 <_malloc_usable_size_r>
 8008be4:	4285      	cmp	r5, r0
 8008be6:	4606      	mov	r6, r0
 8008be8:	d802      	bhi.n	8008bf0 <_realloc_r+0x34>
 8008bea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bee:	d8f4      	bhi.n	8008bda <_realloc_r+0x1e>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f7ff f954 	bl	8007ea0 <_malloc_r>
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0ec      	beq.n	8008bd8 <_realloc_r+0x1c>
 8008bfe:	42b5      	cmp	r5, r6
 8008c00:	462a      	mov	r2, r5
 8008c02:	4621      	mov	r1, r4
 8008c04:	bf28      	it	cs
 8008c06:	4632      	movcs	r2, r6
 8008c08:	f7ff ff86 	bl	8008b18 <memcpy>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f7ff f8d2 	bl	8007db8 <_free_r>
 8008c14:	463c      	mov	r4, r7
 8008c16:	e7e0      	b.n	8008bda <_realloc_r+0x1e>

08008c18 <__ascii_wctomb>:
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	b141      	cbz	r1, 8008c30 <__ascii_wctomb+0x18>
 8008c1e:	2aff      	cmp	r2, #255	@ 0xff
 8008c20:	d904      	bls.n	8008c2c <__ascii_wctomb+0x14>
 8008c22:	228a      	movs	r2, #138	@ 0x8a
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	4770      	bx	lr
 8008c2c:	700a      	strb	r2, [r1, #0]
 8008c2e:	2001      	movs	r0, #1
 8008c30:	4770      	bx	lr
	...

08008c34 <fiprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	b503      	push	{r0, r1, lr}
 8008c38:	4601      	mov	r1, r0
 8008c3a:	ab03      	add	r3, sp, #12
 8008c3c:	4805      	ldr	r0, [pc, #20]	@ (8008c54 <fiprintf+0x20>)
 8008c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c42:	6800      	ldr	r0, [r0, #0]
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f000 f83f 	bl	8008cc8 <_vfiprintf_r>
 8008c4a:	b002      	add	sp, #8
 8008c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c50:	b003      	add	sp, #12
 8008c52:	4770      	bx	lr
 8008c54:	20000020 	.word	0x20000020

08008c58 <abort>:
 8008c58:	b508      	push	{r3, lr}
 8008c5a:	2006      	movs	r0, #6
 8008c5c:	f000 fa08 	bl	8009070 <raise>
 8008c60:	2001      	movs	r0, #1
 8008c62:	f7f9 f9ad 	bl	8001fc0 <_exit>

08008c66 <_malloc_usable_size_r>:
 8008c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6a:	1f18      	subs	r0, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfbc      	itt	lt
 8008c70:	580b      	ldrlt	r3, [r1, r0]
 8008c72:	18c0      	addlt	r0, r0, r3
 8008c74:	4770      	bx	lr

08008c76 <__sfputc_r>:
 8008c76:	6893      	ldr	r3, [r2, #8]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	b410      	push	{r4}
 8008c7e:	6093      	str	r3, [r2, #8]
 8008c80:	da08      	bge.n	8008c94 <__sfputc_r+0x1e>
 8008c82:	6994      	ldr	r4, [r2, #24]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	db01      	blt.n	8008c8c <__sfputc_r+0x16>
 8008c88:	290a      	cmp	r1, #10
 8008c8a:	d103      	bne.n	8008c94 <__sfputc_r+0x1e>
 8008c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c90:	f000 b932 	b.w	8008ef8 <__swbuf_r>
 8008c94:	6813      	ldr	r3, [r2, #0]
 8008c96:	1c58      	adds	r0, r3, #1
 8008c98:	6010      	str	r0, [r2, #0]
 8008c9a:	7019      	strb	r1, [r3, #0]
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <__sfputs_r>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	4614      	mov	r4, r2
 8008cac:	18d5      	adds	r5, r2, r3
 8008cae:	42ac      	cmp	r4, r5
 8008cb0:	d101      	bne.n	8008cb6 <__sfputs_r+0x12>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e007      	b.n	8008cc6 <__sfputs_r+0x22>
 8008cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cba:	463a      	mov	r2, r7
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff ffda 	bl	8008c76 <__sfputc_r>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	d1f3      	bne.n	8008cae <__sfputs_r+0xa>
 8008cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cc8 <_vfiprintf_r>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	460d      	mov	r5, r1
 8008cce:	b09d      	sub	sp, #116	@ 0x74
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	4698      	mov	r8, r3
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	b118      	cbz	r0, 8008ce0 <_vfiprintf_r+0x18>
 8008cd8:	6a03      	ldr	r3, [r0, #32]
 8008cda:	b90b      	cbnz	r3, 8008ce0 <_vfiprintf_r+0x18>
 8008cdc:	f7fe f8f0 	bl	8006ec0 <__sinit>
 8008ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce2:	07d9      	lsls	r1, r3, #31
 8008ce4:	d405      	bmi.n	8008cf2 <_vfiprintf_r+0x2a>
 8008ce6:	89ab      	ldrh	r3, [r5, #12]
 8008ce8:	059a      	lsls	r2, r3, #22
 8008cea:	d402      	bmi.n	8008cf2 <_vfiprintf_r+0x2a>
 8008cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cee:	f7fe fa12 	bl	8007116 <__retarget_lock_acquire_recursive>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	071b      	lsls	r3, r3, #28
 8008cf6:	d501      	bpl.n	8008cfc <_vfiprintf_r+0x34>
 8008cf8:	692b      	ldr	r3, [r5, #16]
 8008cfa:	b99b      	cbnz	r3, 8008d24 <_vfiprintf_r+0x5c>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f000 f938 	bl	8008f74 <__swsetup_r>
 8008d04:	b170      	cbz	r0, 8008d24 <_vfiprintf_r+0x5c>
 8008d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d08:	07dc      	lsls	r4, r3, #31
 8008d0a:	d504      	bpl.n	8008d16 <_vfiprintf_r+0x4e>
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	b01d      	add	sp, #116	@ 0x74
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	0598      	lsls	r0, r3, #22
 8008d1a:	d4f7      	bmi.n	8008d0c <_vfiprintf_r+0x44>
 8008d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d1e:	f7fe f9fb 	bl	8007118 <__retarget_lock_release_recursive>
 8008d22:	e7f3      	b.n	8008d0c <_vfiprintf_r+0x44>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d28:	2320      	movs	r3, #32
 8008d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d32:	2330      	movs	r3, #48	@ 0x30
 8008d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ee4 <_vfiprintf_r+0x21c>
 8008d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d3c:	f04f 0901 	mov.w	r9, #1
 8008d40:	4623      	mov	r3, r4
 8008d42:	469a      	mov	sl, r3
 8008d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d48:	b10a      	cbz	r2, 8008d4e <_vfiprintf_r+0x86>
 8008d4a:	2a25      	cmp	r2, #37	@ 0x25
 8008d4c:	d1f9      	bne.n	8008d42 <_vfiprintf_r+0x7a>
 8008d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d52:	d00b      	beq.n	8008d6c <_vfiprintf_r+0xa4>
 8008d54:	465b      	mov	r3, fp
 8008d56:	4622      	mov	r2, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff ffa2 	bl	8008ca4 <__sfputs_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	f000 80a7 	beq.w	8008eb4 <_vfiprintf_r+0x1ec>
 8008d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d68:	445a      	add	r2, fp
 8008d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 809f 	beq.w	8008eb4 <_vfiprintf_r+0x1ec>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d80:	f10a 0a01 	add.w	sl, sl, #1
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d8e:	4654      	mov	r4, sl
 8008d90:	2205      	movs	r2, #5
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	4853      	ldr	r0, [pc, #332]	@ (8008ee4 <_vfiprintf_r+0x21c>)
 8008d98:	f7f7 fa22 	bl	80001e0 <memchr>
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	b9d8      	cbnz	r0, 8008dd8 <_vfiprintf_r+0x110>
 8008da0:	06d1      	lsls	r1, r2, #27
 8008da2:	bf44      	itt	mi
 8008da4:	2320      	movmi	r3, #32
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008daa:	0713      	lsls	r3, r2, #28
 8008dac:	bf44      	itt	mi
 8008dae:	232b      	movmi	r3, #43	@ 0x2b
 8008db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db4:	f89a 3000 	ldrb.w	r3, [sl]
 8008db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dba:	d015      	beq.n	8008de8 <_vfiprintf_r+0x120>
 8008dbc:	9a07      	ldr	r2, [sp, #28]
 8008dbe:	4654      	mov	r4, sl
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f04f 0c0a 	mov.w	ip, #10
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dcc:	3b30      	subs	r3, #48	@ 0x30
 8008dce:	2b09      	cmp	r3, #9
 8008dd0:	d94b      	bls.n	8008e6a <_vfiprintf_r+0x1a2>
 8008dd2:	b1b0      	cbz	r0, 8008e02 <_vfiprintf_r+0x13a>
 8008dd4:	9207      	str	r2, [sp, #28]
 8008dd6:	e014      	b.n	8008e02 <_vfiprintf_r+0x13a>
 8008dd8:	eba0 0308 	sub.w	r3, r0, r8
 8008ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	46a2      	mov	sl, r4
 8008de6:	e7d2      	b.n	8008d8e <_vfiprintf_r+0xc6>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	1d19      	adds	r1, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	9103      	str	r1, [sp, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bfbb      	ittet	lt
 8008df4:	425b      	neglt	r3, r3
 8008df6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfa:	9307      	strge	r3, [sp, #28]
 8008dfc:	9307      	strlt	r3, [sp, #28]
 8008dfe:	bfb8      	it	lt
 8008e00:	9204      	strlt	r2, [sp, #16]
 8008e02:	7823      	ldrb	r3, [r4, #0]
 8008e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e06:	d10a      	bne.n	8008e1e <_vfiprintf_r+0x156>
 8008e08:	7863      	ldrb	r3, [r4, #1]
 8008e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e0c:	d132      	bne.n	8008e74 <_vfiprintf_r+0x1ac>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	9203      	str	r2, [sp, #12]
 8008e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e1a:	3402      	adds	r4, #2
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ef4 <_vfiprintf_r+0x22c>
 8008e22:	7821      	ldrb	r1, [r4, #0]
 8008e24:	2203      	movs	r2, #3
 8008e26:	4650      	mov	r0, sl
 8008e28:	f7f7 f9da 	bl	80001e0 <memchr>
 8008e2c:	b138      	cbz	r0, 8008e3e <_vfiprintf_r+0x176>
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	eba0 000a 	sub.w	r0, r0, sl
 8008e34:	2240      	movs	r2, #64	@ 0x40
 8008e36:	4082      	lsls	r2, r0
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e42:	4829      	ldr	r0, [pc, #164]	@ (8008ee8 <_vfiprintf_r+0x220>)
 8008e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e48:	2206      	movs	r2, #6
 8008e4a:	f7f7 f9c9 	bl	80001e0 <memchr>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d03f      	beq.n	8008ed2 <_vfiprintf_r+0x20a>
 8008e52:	4b26      	ldr	r3, [pc, #152]	@ (8008eec <_vfiprintf_r+0x224>)
 8008e54:	bb1b      	cbnz	r3, 8008e9e <_vfiprintf_r+0x1d6>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	3307      	adds	r3, #7
 8008e5a:	f023 0307 	bic.w	r3, r3, #7
 8008e5e:	3308      	adds	r3, #8
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e64:	443b      	add	r3, r7
 8008e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e68:	e76a      	b.n	8008d40 <_vfiprintf_r+0x78>
 8008e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e6e:	460c      	mov	r4, r1
 8008e70:	2001      	movs	r0, #1
 8008e72:	e7a8      	b.n	8008dc6 <_vfiprintf_r+0xfe>
 8008e74:	2300      	movs	r3, #0
 8008e76:	3401      	adds	r4, #1
 8008e78:	9305      	str	r3, [sp, #20]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4620      	mov	r0, r4
 8008e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e86:	3a30      	subs	r2, #48	@ 0x30
 8008e88:	2a09      	cmp	r2, #9
 8008e8a:	d903      	bls.n	8008e94 <_vfiprintf_r+0x1cc>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0c6      	beq.n	8008e1e <_vfiprintf_r+0x156>
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	e7c4      	b.n	8008e1e <_vfiprintf_r+0x156>
 8008e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e98:	4604      	mov	r4, r0
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e7f0      	b.n	8008e80 <_vfiprintf_r+0x1b8>
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4b12      	ldr	r3, [pc, #72]	@ (8008ef0 <_vfiprintf_r+0x228>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7fd fbc5 	bl	8006638 <_printf_float>
 8008eae:	4607      	mov	r7, r0
 8008eb0:	1c78      	adds	r0, r7, #1
 8008eb2:	d1d6      	bne.n	8008e62 <_vfiprintf_r+0x19a>
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x1fe>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x1fe>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ec2:	f7fe f929 	bl	8007118 <__retarget_lock_release_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	065b      	lsls	r3, r3, #25
 8008eca:	f53f af1f 	bmi.w	8008d0c <_vfiprintf_r+0x44>
 8008ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed0:	e71e      	b.n	8008d10 <_vfiprintf_r+0x48>
 8008ed2:	ab03      	add	r3, sp, #12
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	462a      	mov	r2, r5
 8008ed8:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <_vfiprintf_r+0x228>)
 8008eda:	a904      	add	r1, sp, #16
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7fd fe43 	bl	8006b68 <_printf_i>
 8008ee2:	e7e4      	b.n	8008eae <_vfiprintf_r+0x1e6>
 8008ee4:	08009b80 	.word	0x08009b80
 8008ee8:	08009b8a 	.word	0x08009b8a
 8008eec:	08006639 	.word	0x08006639
 8008ef0:	08008ca5 	.word	0x08008ca5
 8008ef4:	08009b86 	.word	0x08009b86

08008ef8 <__swbuf_r>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	460e      	mov	r6, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	4605      	mov	r5, r0
 8008f00:	b118      	cbz	r0, 8008f0a <__swbuf_r+0x12>
 8008f02:	6a03      	ldr	r3, [r0, #32]
 8008f04:	b90b      	cbnz	r3, 8008f0a <__swbuf_r+0x12>
 8008f06:	f7fd ffdb 	bl	8006ec0 <__sinit>
 8008f0a:	69a3      	ldr	r3, [r4, #24]
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	071a      	lsls	r2, r3, #28
 8008f12:	d501      	bpl.n	8008f18 <__swbuf_r+0x20>
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	b943      	cbnz	r3, 8008f2a <__swbuf_r+0x32>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f000 f82a 	bl	8008f74 <__swsetup_r>
 8008f20:	b118      	cbz	r0, 8008f2a <__swbuf_r+0x32>
 8008f22:	f04f 37ff 	mov.w	r7, #4294967295
 8008f26:	4638      	mov	r0, r7
 8008f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	1a98      	subs	r0, r3, r2
 8008f30:	6963      	ldr	r3, [r4, #20]
 8008f32:	b2f6      	uxtb	r6, r6
 8008f34:	4283      	cmp	r3, r0
 8008f36:	4637      	mov	r7, r6
 8008f38:	dc05      	bgt.n	8008f46 <__swbuf_r+0x4e>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7ff fd99 	bl	8008a74 <_fflush_r>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d1ed      	bne.n	8008f22 <__swbuf_r+0x2a>
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	60a3      	str	r3, [r4, #8]
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	6022      	str	r2, [r4, #0]
 8008f52:	701e      	strb	r6, [r3, #0]
 8008f54:	6962      	ldr	r2, [r4, #20]
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d004      	beq.n	8008f66 <__swbuf_r+0x6e>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	07db      	lsls	r3, r3, #31
 8008f60:	d5e1      	bpl.n	8008f26 <__swbuf_r+0x2e>
 8008f62:	2e0a      	cmp	r6, #10
 8008f64:	d1df      	bne.n	8008f26 <__swbuf_r+0x2e>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f7ff fd83 	bl	8008a74 <_fflush_r>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d0d9      	beq.n	8008f26 <__swbuf_r+0x2e>
 8008f72:	e7d6      	b.n	8008f22 <__swbuf_r+0x2a>

08008f74 <__swsetup_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4b29      	ldr	r3, [pc, #164]	@ (800901c <__swsetup_r+0xa8>)
 8008f78:	4605      	mov	r5, r0
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	b118      	cbz	r0, 8008f88 <__swsetup_r+0x14>
 8008f80:	6a03      	ldr	r3, [r0, #32]
 8008f82:	b90b      	cbnz	r3, 8008f88 <__swsetup_r+0x14>
 8008f84:	f7fd ff9c 	bl	8006ec0 <__sinit>
 8008f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f8c:	0719      	lsls	r1, r3, #28
 8008f8e:	d422      	bmi.n	8008fd6 <__swsetup_r+0x62>
 8008f90:	06da      	lsls	r2, r3, #27
 8008f92:	d407      	bmi.n	8008fa4 <__swsetup_r+0x30>
 8008f94:	2209      	movs	r2, #9
 8008f96:	602a      	str	r2, [r5, #0]
 8008f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa2:	e033      	b.n	800900c <__swsetup_r+0x98>
 8008fa4:	0758      	lsls	r0, r3, #29
 8008fa6:	d512      	bpl.n	8008fce <__swsetup_r+0x5a>
 8008fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008faa:	b141      	cbz	r1, 8008fbe <__swsetup_r+0x4a>
 8008fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d002      	beq.n	8008fba <__swsetup_r+0x46>
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f7fe feff 	bl	8007db8 <_free_r>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f043 0308 	orr.w	r3, r3, #8
 8008fd4:	81a3      	strh	r3, [r4, #12]
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	b94b      	cbnz	r3, 8008fee <__swsetup_r+0x7a>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fe4:	d003      	beq.n	8008fee <__swsetup_r+0x7a>
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 f883 	bl	80090f4 <__smakebuf_r>
 8008fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff2:	f013 0201 	ands.w	r2, r3, #1
 8008ff6:	d00a      	beq.n	800900e <__swsetup_r+0x9a>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	60a2      	str	r2, [r4, #8]
 8008ffc:	6962      	ldr	r2, [r4, #20]
 8008ffe:	4252      	negs	r2, r2
 8009000:	61a2      	str	r2, [r4, #24]
 8009002:	6922      	ldr	r2, [r4, #16]
 8009004:	b942      	cbnz	r2, 8009018 <__swsetup_r+0xa4>
 8009006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800900a:	d1c5      	bne.n	8008f98 <__swsetup_r+0x24>
 800900c:	bd38      	pop	{r3, r4, r5, pc}
 800900e:	0799      	lsls	r1, r3, #30
 8009010:	bf58      	it	pl
 8009012:	6962      	ldrpl	r2, [r4, #20]
 8009014:	60a2      	str	r2, [r4, #8]
 8009016:	e7f4      	b.n	8009002 <__swsetup_r+0x8e>
 8009018:	2000      	movs	r0, #0
 800901a:	e7f7      	b.n	800900c <__swsetup_r+0x98>
 800901c:	20000020 	.word	0x20000020

08009020 <_raise_r>:
 8009020:	291f      	cmp	r1, #31
 8009022:	b538      	push	{r3, r4, r5, lr}
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	d904      	bls.n	8009034 <_raise_r+0x14>
 800902a:	2316      	movs	r3, #22
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009036:	b112      	cbz	r2, 800903e <_raise_r+0x1e>
 8009038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800903c:	b94b      	cbnz	r3, 8009052 <_raise_r+0x32>
 800903e:	4628      	mov	r0, r5
 8009040:	f000 f830 	bl	80090a4 <_getpid_r>
 8009044:	4622      	mov	r2, r4
 8009046:	4601      	mov	r1, r0
 8009048:	4628      	mov	r0, r5
 800904a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800904e:	f000 b817 	b.w	8009080 <_kill_r>
 8009052:	2b01      	cmp	r3, #1
 8009054:	d00a      	beq.n	800906c <_raise_r+0x4c>
 8009056:	1c59      	adds	r1, r3, #1
 8009058:	d103      	bne.n	8009062 <_raise_r+0x42>
 800905a:	2316      	movs	r3, #22
 800905c:	6003      	str	r3, [r0, #0]
 800905e:	2001      	movs	r0, #1
 8009060:	e7e7      	b.n	8009032 <_raise_r+0x12>
 8009062:	2100      	movs	r1, #0
 8009064:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009068:	4620      	mov	r0, r4
 800906a:	4798      	blx	r3
 800906c:	2000      	movs	r0, #0
 800906e:	e7e0      	b.n	8009032 <_raise_r+0x12>

08009070 <raise>:
 8009070:	4b02      	ldr	r3, [pc, #8]	@ (800907c <raise+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f7ff bfd3 	b.w	8009020 <_raise_r>
 800907a:	bf00      	nop
 800907c:	20000020 	.word	0x20000020

08009080 <_kill_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	@ (80090a0 <_kill_r+0x20>)
 8009084:	2300      	movs	r3, #0
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	f7f8 ff87 	bl	8001fa0 <_kill>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d102      	bne.n	800909c <_kill_r+0x1c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b103      	cbz	r3, 800909c <_kill_r+0x1c>
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	200008f4 	.word	0x200008f4

080090a4 <_getpid_r>:
 80090a4:	f7f8 bf74 	b.w	8001f90 <_getpid>

080090a8 <__swhatbuf_r>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	460c      	mov	r4, r1
 80090ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b0:	2900      	cmp	r1, #0
 80090b2:	b096      	sub	sp, #88	@ 0x58
 80090b4:	4615      	mov	r5, r2
 80090b6:	461e      	mov	r6, r3
 80090b8:	da0d      	bge.n	80090d6 <__swhatbuf_r+0x2e>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090c0:	f04f 0100 	mov.w	r1, #0
 80090c4:	bf14      	ite	ne
 80090c6:	2340      	movne	r3, #64	@ 0x40
 80090c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090cc:	2000      	movs	r0, #0
 80090ce:	6031      	str	r1, [r6, #0]
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	b016      	add	sp, #88	@ 0x58
 80090d4:	bd70      	pop	{r4, r5, r6, pc}
 80090d6:	466a      	mov	r2, sp
 80090d8:	f000 f848 	bl	800916c <_fstat_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	dbec      	blt.n	80090ba <__swhatbuf_r+0x12>
 80090e0:	9901      	ldr	r1, [sp, #4]
 80090e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090ea:	4259      	negs	r1, r3
 80090ec:	4159      	adcs	r1, r3
 80090ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f2:	e7eb      	b.n	80090cc <__swhatbuf_r+0x24>

080090f4 <__smakebuf_r>:
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f8:	079d      	lsls	r5, r3, #30
 80090fa:	4606      	mov	r6, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	d507      	bpl.n	8009110 <__smakebuf_r+0x1c>
 8009100:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	2301      	movs	r3, #1
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	b003      	add	sp, #12
 800910e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009110:	ab01      	add	r3, sp, #4
 8009112:	466a      	mov	r2, sp
 8009114:	f7ff ffc8 	bl	80090a8 <__swhatbuf_r>
 8009118:	9f00      	ldr	r7, [sp, #0]
 800911a:	4605      	mov	r5, r0
 800911c:	4639      	mov	r1, r7
 800911e:	4630      	mov	r0, r6
 8009120:	f7fe febe 	bl	8007ea0 <_malloc_r>
 8009124:	b948      	cbnz	r0, 800913a <__smakebuf_r+0x46>
 8009126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800912a:	059a      	lsls	r2, r3, #22
 800912c:	d4ee      	bmi.n	800910c <__smakebuf_r+0x18>
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	f043 0302 	orr.w	r3, r3, #2
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	e7e2      	b.n	8009100 <__smakebuf_r+0xc>
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	6020      	str	r0, [r4, #0]
 800913e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800914a:	b15b      	cbz	r3, 8009164 <__smakebuf_r+0x70>
 800914c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009150:	4630      	mov	r0, r6
 8009152:	f000 f81d 	bl	8009190 <_isatty_r>
 8009156:	b128      	cbz	r0, 8009164 <__smakebuf_r+0x70>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	f023 0303 	bic.w	r3, r3, #3
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	431d      	orrs	r5, r3
 8009168:	81a5      	strh	r5, [r4, #12]
 800916a:	e7cf      	b.n	800910c <__smakebuf_r+0x18>

0800916c <_fstat_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d07      	ldr	r5, [pc, #28]	@ (800918c <_fstat_r+0x20>)
 8009170:	2300      	movs	r3, #0
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	4611      	mov	r1, r2
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	f7f8 ff71 	bl	8002060 <_fstat>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d102      	bne.n	8009188 <_fstat_r+0x1c>
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	b103      	cbz	r3, 8009188 <_fstat_r+0x1c>
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	bf00      	nop
 800918c:	200008f4 	.word	0x200008f4

08009190 <_isatty_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4d06      	ldr	r5, [pc, #24]	@ (80091ac <_isatty_r+0x1c>)
 8009194:	2300      	movs	r3, #0
 8009196:	4604      	mov	r4, r0
 8009198:	4608      	mov	r0, r1
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	f7f8 ff70 	bl	8002080 <_isatty>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_isatty_r+0x1a>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_isatty_r+0x1a>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	200008f4 	.word	0x200008f4

080091b0 <_init>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr

080091bc <_fini>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr

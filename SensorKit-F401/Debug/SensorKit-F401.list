
SensorKit-F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  08009268  08009268  0000a268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d80  08009d80  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d88  08009d88  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d88  08009d88  0000ad88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d8c  08009d8c  0000ad8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009d90  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001dc  08009f6c  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08009f6c  0000b914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133b7  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d0  00000000  00000000  0001e5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00021698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e09  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ecb  00000000  00000000  000236b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018777  00000000  00000000  0003d57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dbe4  00000000  00000000  00055cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f38d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c14  00000000  00000000  000f391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f9530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009250 	.word	0x08009250

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009250 	.word	0x08009250

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <MX_ADC1_Init+0xcc>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ec2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <MX_ADC1_Init+0xd0>)
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	4819      	ldr	r0, [pc, #100]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f0a:	f001 fb6f 	bl	80025ec <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f14:	f000 fd7a 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f2a:	f001 fcb1 	bl	8002890 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f34:	f000 fd6a 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480b      	ldr	r0, [pc, #44]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f42:	f001 fca5 	bl	8002890 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000f4c:	f000 fd5e 	bl	8001a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000f50:	2303      	movs	r3, #3
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_ADC1_Init+0xc8>)
 8000f5a:	f001 fc99 	bl	8002890 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000f64:	f000 fd52 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	40012000 	.word	0x40012000
 8000f78:	0f000001 	.word	0x0f000001

08000f7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	@ (800108c <HAL_ADC_MspInit+0x110>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d171      	bne.n	8001082 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a33      	ldr	r2, [pc, #204]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a2c      	ldr	r2, [pc, #176]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <HAL_ADC_MspInit+0x114>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = POT_Pin|MIC_Pin;
 8000ff2:	2311      	movs	r3, #17
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <HAL_ADC_MspInit+0x118>)
 8001006:	f002 fb65 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMB_LIGHT_Pin;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AMB_LIGHT_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	481e      	ldr	r0, [pc, #120]	@ (8001098 <HAL_ADC_MspInit+0x11c>)
 800101e:	f002 fb59 	bl	80036d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001024:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_ADC_MspInit+0x124>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001028:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <HAL_ADC_MspInit+0x120>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800103a:	4b18      	ldr	r3, [pc, #96]	@ (800109c <HAL_ADC_MspInit+0x120>)
 800103c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001040:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001048:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_ADC_MspInit+0x120>)
 800104c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001058:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <HAL_ADC_MspInit+0x120>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001066:	480d      	ldr	r0, [pc, #52]	@ (800109c <HAL_ADC_MspInit+0x120>)
 8001068:	f001 ffc4 	bl	8002ff4 <HAL_DMA_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001072:	f000 fccb 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_ADC_MspInit+0x120>)
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_ADC_MspInit+0x120>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	20000240 	.word	0x20000240
 80010a0:	40026410 	.word	0x40026410

080010a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_DMA_Init+0x3c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <MX_DMA_Init+0x3c>)
 80010b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_DMA_Init+0x3c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2038      	movs	r0, #56	@ 0x38
 80010cc:	f001 ff5b 	bl	8002f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010d0:	2038      	movs	r0, #56	@ 0x38
 80010d2:	f001 ff74 	bl	8002fbe <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <a_dht20_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_dht20_iic_read(dht20_handle_t *handle, uint8_t *data, uint16_t len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	80fb      	strh	r3, [r7, #6]
    if (handle->iic_read_cmd(DHT20_ADDRESS, data, len) != 0)        /* read the register */
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	88fa      	ldrh	r2, [r7, #6]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	2070      	movs	r0, #112	@ 0x70
 80010fc:	4798      	blx	r3
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <a_dht20_iic_read+0x24>
    {
        return 1;                                                   /* return error */
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <a_dht20_iic_read+0x26>
    }
    else
    {
        return 0;                                                   /* success return 0 */
 8001108:	2300      	movs	r3, #0
    }
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <a_dht20_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_dht20_iic_write(dht20_handle_t *handle, uint8_t *data, uint16_t len)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	4613      	mov	r3, r2
 800111e:	80fb      	strh	r3, [r7, #6]
    if (handle->iic_write_cmd(DHT20_ADDRESS, data, len) != 0)        /* write the register */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	2070      	movs	r0, #112	@ 0x70
 800112a:	4798      	blx	r3
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <a_dht20_iic_write+0x24>
    {
        return 1;                                                    /* return error */
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <a_dht20_iic_write+0x26>
    }
    else
    {
        return 0;                                                    /* success return 0 */
 8001136:	2300      	movs	r3, #0
    }
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <a_dht20_calc_crc>:
 * @param[in] len is the data length
 * @return    crc
 * @note      none
 */
static uint8_t a_dht20_calc_crc(uint8_t *data, uint8_t len)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t byte;
    uint8_t crc = 0xFF;
 800114c:	23ff      	movs	r3, #255	@ 0xff
 800114e:	737b      	strb	r3, [r7, #13]
    
    for (byte = 0; byte < len; byte++)          /* len times */
 8001150:	2300      	movs	r3, #0
 8001152:	73bb      	strb	r3, [r7, #14]
 8001154:	e021      	b.n	800119a <a_dht20_calc_crc+0x5a>
    {
        crc ^= data[byte];                      /* xor byte */
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	4053      	eors	r3, r2
 8001162:	737b      	strb	r3, [r7, #13]
        for (i = 8; i > 0; --i)                 /* one byte */
 8001164:	2308      	movs	r3, #8
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e011      	b.n	800118e <a_dht20_calc_crc+0x4e>
        {
            if ((crc & 0x80) != 0)              /* if high*/
 800116a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da07      	bge.n	8001182 <a_dht20_calc_crc+0x42>
            {
                crc = (crc << 1) ^ 0x31;        /* xor 0x31 */
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800117c:	b25b      	sxtb	r3, r3
 800117e:	737b      	strb	r3, [r7, #13]
 8001180:	e002      	b.n	8001188 <a_dht20_calc_crc+0x48>
            }
            else
            {
                crc = crc << 1;                 /* skip */
 8001182:	7b7b      	ldrb	r3, [r7, #13]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	737b      	strb	r3, [r7, #13]
        for (i = 8; i > 0; --i)                 /* one byte */
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3b01      	subs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ea      	bne.n	800116a <a_dht20_calc_crc+0x2a>
    for (byte = 0; byte < len; byte++)          /* len times */
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	3301      	adds	r3, #1
 8001198:	73bb      	strb	r3, [r7, #14]
 800119a:	7bba      	ldrb	r2, [r7, #14]
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3d9      	bcc.n	8001156 <a_dht20_calc_crc+0x16>
            }
        }
    }
    
    return crc;                                 /* return crc */
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <a_dht20_jh_reset_reg>:
 *            - 0 success
 *            - 1 reset failed
 * @note      none
 */
static uint8_t a_dht20_jh_reset_reg(dht20_handle_t *handle, uint8_t addr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[3];
    uint8_t regs[3];
    
    buf[0] = addr;                                     /* set the addr */
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	733b      	strb	r3, [r7, #12]
    buf[1] = 0x00;                                     /* set 0x00 */
 80011c0:	2300      	movs	r3, #0
 80011c2:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;                                     /* set 0x00 */
 80011c4:	2300      	movs	r3, #0
 80011c6:	73bb      	strb	r3, [r7, #14]
    if (a_dht20_iic_write(handle, buf, 3) != 0)        /* write the command */
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2203      	movs	r2, #3
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff9e 	bl	8001112 <a_dht20_iic_write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <a_dht20_jh_reset_reg+0x30>
    {
        return 1;                                      /* return error */
 80011dc:	2301      	movs	r3, #1
 80011de:	e029      	b.n	8001234 <a_dht20_jh_reset_reg+0x84>
    }
    handle->delay_ms(5);                               /* delay 5ms */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2005      	movs	r0, #5
 80011e6:	4798      	blx	r3
    if (a_dht20_iic_read(handle, regs, 3) != 0)        /* read regs */
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2203      	movs	r2, #3
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff77 	bl	80010e4 <a_dht20_iic_read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <a_dht20_jh_reset_reg+0x50>
    {
        return 1;                                      /* return error */
 80011fc:	2301      	movs	r3, #1
 80011fe:	e019      	b.n	8001234 <a_dht20_jh_reset_reg+0x84>
    }
    handle->delay_ms(10);                              /* delay 10ms */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	200a      	movs	r0, #10
 8001206:	4798      	blx	r3
    buf[0] = 0xB0 | addr;                              /* set addr */
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800120e:	b2db      	uxtb	r3, r3
 8001210:	733b      	strb	r3, [r7, #12]
    buf[1] = regs[1];                                  /* set regs[1] */
 8001212:	7a7b      	ldrb	r3, [r7, #9]
 8001214:	737b      	strb	r3, [r7, #13]
    buf[2] = regs[2];                                  /* set regs[2] */
 8001216:	7abb      	ldrb	r3, [r7, #10]
 8001218:	73bb      	strb	r3, [r7, #14]
    if (a_dht20_iic_write(handle, buf, 3) != 0)        /* write the data */
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2203      	movs	r2, #3
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff75 	bl	8001112 <a_dht20_iic_write>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <a_dht20_jh_reset_reg+0x82>
    {
        return 1;                                      /* return error */
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <a_dht20_jh_reset_reg+0x84>
    }
    
    return 0;                                          /* success return 0 */
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <dht20_init>:
 *            - 4 read status failed
 *            - 5 reset reg failed
 * @note      none
 */
uint8_t dht20_init(dht20_handle_t *handle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    uint8_t status;
    
    if (handle == NULL)                                                /* check handle */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <dht20_init+0x12>
    {
        return 2;                                                      /* return error */
 800124a:	2302      	movs	r3, #2
 800124c:	e04a      	b.n	80012e4 <dht20_init+0xa8>
//    {
//        handle->debug_print("dht20: iic_deinit is null.\n");           /* iic_deinit is null */
//
//        return 3;                                                      /* return error */
//    }
    if (handle->iic_read_cmd == NULL)                                  /* check iic_read_cmd */
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <dht20_init+0x1e>
    {
//        handle->debug_print("dht20: iic_read_cmd is null.\n");         /* iic_read_cmd is null */
        
        return 3;                                                      /* return error */
 8001256:	2303      	movs	r3, #3
 8001258:	e044      	b.n	80012e4 <dht20_init+0xa8>
    }
    if (handle->iic_write_cmd == NULL)                                 /* check iic_write_cmd */
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <dht20_init+0x2a>
    {
//        handle->debug_print("dht20: iic_write_cmd is null.\n");        /* iic_write_cmd is null */
        
        return 3;                                                      /* return error */
 8001262:	2303      	movs	r3, #3
 8001264:	e03e      	b.n	80012e4 <dht20_init+0xa8>
    }
    if (handle->delay_ms == NULL)                                      /* check delay_ms */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <dht20_init+0x36>
    {
//        handle->debug_print("dht20: delay_ms is null.\n");             /* delay_ms is null */
        
        return 3;                                                      /* return error */
 800126e:	2303      	movs	r3, #3
 8001270:	e038      	b.n	80012e4 <dht20_init+0xa8>
//    {
//        handle->debug_print("dht20: iic init failed.\n");              /* iic init failed */
//
//        return 1;                                                      /* return error */
//    }
    handle->delay_ms(500);                                             /* wait for 500 ms */
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800127a:	4798      	blx	r3
    if (a_dht20_iic_read(handle, &status, 1) != 0)                     /* read the status */
 800127c:	f107 030f 	add.w	r3, r7, #15
 8001280:	2201      	movs	r2, #1
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff2d 	bl	80010e4 <a_dht20_iic_read>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <dht20_init+0x58>
    {
//        handle->debug_print("dht20: read status failed.\n");           /* read status failed */
//        (void)handle->iic_deinit();                                    /* close the iic */
        
        return 4;                                                      /* return error */
 8001290:	2304      	movs	r3, #4
 8001292:	e027      	b.n	80012e4 <dht20_init+0xa8>
    }
    if ((status & 0x18) != 0x18)                                       /* check the status */
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	f003 0318 	and.w	r3, r3, #24
 800129a:	2b18      	cmp	r3, #24
 800129c:	d01a      	beq.n	80012d4 <dht20_init+0x98>
    {
        if (a_dht20_jh_reset_reg(handle, 0x1B) != 0)                   /* reset the 0x1B */
 800129e:	211b      	movs	r1, #27
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff85 	bl	80011b0 <a_dht20_jh_reset_reg>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <dht20_init+0x74>
        {
//            handle->debug_print("dht20: reset reg failed.\n");         /* reset reg failed */
//            (void)handle->iic_deinit();                                /* close the iic */
            
            return 5;                                                  /* return error */
 80012ac:	2305      	movs	r3, #5
 80012ae:	e019      	b.n	80012e4 <dht20_init+0xa8>
        }
        if (a_dht20_jh_reset_reg(handle, 0x1C) != 0)                   /* reset the 0x1C */
 80012b0:	211c      	movs	r1, #28
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff7c 	bl	80011b0 <a_dht20_jh_reset_reg>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <dht20_init+0x86>
        {
//            handle->debug_print("dht20: reset reg failed.\n");         /* reset reg failed */
//            (void)handle->iic_deinit();                                /* close the iic */
            
            return 5;                                                  /* return error */
 80012be:	2305      	movs	r3, #5
 80012c0:	e010      	b.n	80012e4 <dht20_init+0xa8>
        }
        if (a_dht20_jh_reset_reg(handle, 0x1E) != 0)                   /* reset the 0x1E */
 80012c2:	211e      	movs	r1, #30
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff73 	bl	80011b0 <a_dht20_jh_reset_reg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <dht20_init+0x98>
        {
//            handle->debug_print("dht20: reset reg failed.\n");         /* reset reg failed */
//            (void)handle->iic_deinit();                                /* close the iic */
            
            return 5;                                                  /* return error */
 80012d0:	2305      	movs	r3, #5
 80012d2:	e007      	b.n	80012e4 <dht20_init+0xa8>
        }
    }
    handle->delay_ms(10);                                              /* delay 10ms */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	200a      	movs	r0, #10
 80012da:	4798      	blx	r3
    handle->inited = 1;                                                /* flag finish initialization */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	731a      	strb	r2, [r3, #12]
    
    return 0;                                                          /* success return 0 */
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <dht20_read_temperature>:
 *             - 4 data is not ready
 *             - 5 crc is error
 * @note       none
 */
uint8_t dht20_read_temperature(dht20_handle_t *handle, uint32_t *temperature_raw, float *temperature_s)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
    uint8_t status;
    uint8_t buf[7];
    
    if (handle == NULL)                                               /* check handle */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <dht20_read_temperature+0x16>
    {
        return 2;                                                     /* return error */
 80012fe:	2302      	movs	r3, #2
 8001300:	e06b      	b.n	80013da <dht20_read_temperature+0xee>
    }
    if (handle->inited != 1)                                          /* check handle initialization */
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	7b1b      	ldrb	r3, [r3, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d001      	beq.n	800130e <dht20_read_temperature+0x22>
    {
        return 3;                                                     /* return error */
 800130a:	2303      	movs	r3, #3
 800130c:	e065      	b.n	80013da <dht20_read_temperature+0xee>
    }
    
    buf[0] = 0xAC;                                                    /* set the addr */
 800130e:	23ac      	movs	r3, #172	@ 0xac
 8001310:	743b      	strb	r3, [r7, #16]
    buf[1] = 0x33;                                                    /* set 0x33 */
 8001312:	2333      	movs	r3, #51	@ 0x33
 8001314:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x00;                                                    /* set 0x00 */
 8001316:	2300      	movs	r3, #0
 8001318:	74bb      	strb	r3, [r7, #18]
    if (a_dht20_iic_write(handle, buf, 3) != 0)                       /* write the command */
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2203      	movs	r2, #3
 8001320:	4619      	mov	r1, r3
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fef5 	bl	8001112 <a_dht20_iic_write>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <dht20_read_temperature+0x46>
    {
//        handle->debug_print("dht20: sent command failed.\n");         /* sent command failed */
        
        return 1;                                                     /* return error */
 800132e:	2301      	movs	r3, #1
 8001330:	e053      	b.n	80013da <dht20_read_temperature+0xee>
    }
    handle->delay_ms(85);                                             /* delay 85ms */
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2055      	movs	r0, #85	@ 0x55
 8001338:	4798      	blx	r3
    if (a_dht20_iic_read(handle, &status, 1) != 0)                    /* read the status */
 800133a:	f107 0317 	add.w	r3, r7, #23
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff fece 	bl	80010e4 <a_dht20_iic_read>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <dht20_read_temperature+0x66>
    {
//        handle->debug_print("dht20: read status failed.\n");          /* read status failed */
        
        return 1;                                                     /* return error */
 800134e:	2301      	movs	r3, #1
 8001350:	e043      	b.n	80013da <dht20_read_temperature+0xee>
    }
    if ((status & 0x80) == 0)                                         /* check the status */
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	db3e      	blt.n	80013d8 <dht20_read_temperature+0xec>
    {
        if (a_dht20_iic_read(handle, buf, 7) != 0)                    /* read data */
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	2207      	movs	r2, #7
 8001360:	4619      	mov	r1, r3
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff febe 	bl	80010e4 <a_dht20_iic_read>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <dht20_read_temperature+0x86>
        {
//            handle->debug_print("dht20: read data failed.\n");        /* read data failed */
            
            return 1;                                                 /* return error */
 800136e:	2301      	movs	r3, #1
 8001370:	e033      	b.n	80013da <dht20_read_temperature+0xee>
        }
        if (a_dht20_calc_crc(buf, 6) != buf[6])                       /* check the crc */
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2106      	movs	r1, #6
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fee1 	bl	8001140 <a_dht20_calc_crc>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <dht20_read_temperature+0xa0>
        {
//            handle->debug_print("dht20: crc is error.\n");            /* crc is error */
            
            return 5;                                                 /* return error */
 8001388:	2305      	movs	r3, #5
 800138a:	e026      	b.n	80013da <dht20_read_temperature+0xee>
        }
        
        *temperature_raw = (((uint32_t)buf[3]) << 16) |
 800138c:	7cfb      	ldrb	r3, [r7, #19]
 800138e:	041a      	lsls	r2, r3, #16
                           (((uint32_t)buf[4]) << 8) |
 8001390:	7d3b      	ldrb	r3, [r7, #20]
 8001392:	021b      	lsls	r3, r3, #8
        *temperature_raw = (((uint32_t)buf[3]) << 16) |
 8001394:	4313      	orrs	r3, r2
                           (((uint32_t)buf[5]) << 0);                 /* set the temperature */
 8001396:	7d7a      	ldrb	r2, [r7, #21]
                           (((uint32_t)buf[4]) << 8) |
 8001398:	431a      	orrs	r2, r3
        *temperature_raw = (((uint32_t)buf[3]) << 16) |
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	601a      	str	r2, [r3, #0]
        *temperature_raw = (*temperature_raw) & 0xFFFFF;              /* cut the temperature part */
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	601a      	str	r2, [r3, #0]
        *temperature_s = (float)(*temperature_raw) 
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                 / 1048576.0f * 200.0f
 80013b6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80013e4 <dht20_read_temperature+0xf8>
 80013ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013be:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013e8 <dht20_read_temperature+0xfc>
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
                                 - 50.0f;                             /* right shift 4 */
 80013c6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80013ec <dht20_read_temperature+0x100>
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
        *temperature_s = (float)(*temperature_raw) 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a00 	vstr	s15, [r3]
        
        return 0;                                                     /* success return 0 */
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <dht20_read_temperature+0xee>
    }
    else
    {
//        handle->debug_print("dht20: data is not ready.\n");           /* data is not ready */
        
        return 4;                                                     /* return error */
 80013d8:	2304      	movs	r3, #4
    }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	49800000 	.word	0x49800000
 80013e8:	43480000 	.word	0x43480000
 80013ec:	42480000 	.word	0x42480000

080013f0 <dht20_read_humidity>:
 *             - 4 data is not ready
 *             - 5 crc is error
 * @note       none
 */
uint8_t dht20_read_humidity(dht20_handle_t *handle, uint32_t *humidity_raw, uint8_t *humidity_s)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
    uint8_t status;
    uint8_t buf[7];
    
    if (handle == NULL)                                               /* check handle */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <dht20_read_humidity+0x16>
    {
        return 2;                                                     /* return error */
 8001402:	2302      	movs	r3, #2
 8001404:	e06b      	b.n	80014de <dht20_read_humidity+0xee>
    }
    if (handle->inited != 1)                                          /* check handle initialization */
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	7b1b      	ldrb	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <dht20_read_humidity+0x22>
    {
        return 3;                                                     /* return error */
 800140e:	2303      	movs	r3, #3
 8001410:	e065      	b.n	80014de <dht20_read_humidity+0xee>
    }
    
    buf[0] = 0xAC;                                                    /* set the addr */
 8001412:	23ac      	movs	r3, #172	@ 0xac
 8001414:	743b      	strb	r3, [r7, #16]
    buf[1] = 0x33;                                                    /* set 0x33 */
 8001416:	2333      	movs	r3, #51	@ 0x33
 8001418:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x00;                                                    /* set 0x00 */
 800141a:	2300      	movs	r3, #0
 800141c:	74bb      	strb	r3, [r7, #18]
    if (a_dht20_iic_write(handle, buf, 3) != 0)                       /* write the command */
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2203      	movs	r2, #3
 8001424:	4619      	mov	r1, r3
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff fe73 	bl	8001112 <a_dht20_iic_write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <dht20_read_humidity+0x46>
    {
//        handle->debug_print("dht20: sent command failed.\n");         /* sent command failed */
        
        return 1;                                                     /* return error */
 8001432:	2301      	movs	r3, #1
 8001434:	e053      	b.n	80014de <dht20_read_humidity+0xee>
    }
    handle->delay_ms(85);                                             /* delay 85ms */
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2055      	movs	r0, #85	@ 0x55
 800143c:	4798      	blx	r3
    if (a_dht20_iic_read(handle, &status, 1) != 0)                    /* read the status */
 800143e:	f107 0317 	add.w	r3, r7, #23
 8001442:	2201      	movs	r2, #1
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fe4c 	bl	80010e4 <a_dht20_iic_read>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <dht20_read_humidity+0x66>
    {
//        handle->debug_print("dht20: read status failed.\n");          /* read status failed */
        
        return 1;                                                     /* return error */
 8001452:	2301      	movs	r3, #1
 8001454:	e043      	b.n	80014de <dht20_read_humidity+0xee>
    }
    if ((status & 0x80) == 0)                                         /* check the status */
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	db3e      	blt.n	80014dc <dht20_read_humidity+0xec>
    {
        if (a_dht20_iic_read(handle, buf, 7) != 0)                    /* read data */
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	2207      	movs	r2, #7
 8001464:	4619      	mov	r1, r3
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fe3c 	bl	80010e4 <a_dht20_iic_read>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <dht20_read_humidity+0x86>
        {
//            handle->debug_print("dht20: read data failed.\n");        /* read data failed */
            
            return 1;                                                 /* return error */
 8001472:	2301      	movs	r3, #1
 8001474:	e033      	b.n	80014de <dht20_read_humidity+0xee>
        }
        if (a_dht20_calc_crc(buf, 6) != buf[6])                       /* check the crc */
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2106      	movs	r1, #6
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe5f 	bl	8001140 <a_dht20_calc_crc>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	7dbb      	ldrb	r3, [r7, #22]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <dht20_read_humidity+0xa0>
        {
//            handle->debug_print("dht20: crc is error.\n");            /* crc is error */
            
            return 5;                                                 /* return error */
 800148c:	2305      	movs	r3, #5
 800148e:	e026      	b.n	80014de <dht20_read_humidity+0xee>
        }
        
        *humidity_raw = (((uint32_t)buf[1]) << 16) |
 8001490:	7c7b      	ldrb	r3, [r7, #17]
 8001492:	041a      	lsls	r2, r3, #16
                        (((uint32_t)buf[2]) << 8) |
 8001494:	7cbb      	ldrb	r3, [r7, #18]
 8001496:	021b      	lsls	r3, r3, #8
        *humidity_raw = (((uint32_t)buf[1]) << 16) |
 8001498:	4313      	orrs	r3, r2
                        (((uint32_t)buf[3]) << 0);                    /* set the humidity */
 800149a:	7cfa      	ldrb	r2, [r7, #19]
                        (((uint32_t)buf[2]) << 8) |
 800149c:	431a      	orrs	r2, r3
        *humidity_raw = (((uint32_t)buf[1]) << 16) |
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	601a      	str	r2, [r3, #0]
        *humidity_raw = (*humidity_raw) >> 4;                         /* right shift 4 */
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	091a      	lsrs	r2, r3, #4
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	601a      	str	r2, [r3, #0]
        *humidity_s = (uint8_t)((float)(*humidity_raw)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                / 1048576.0f * 100.0f);               /* convert the humidity */
 80014b8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80014e8 <dht20_read_humidity+0xf8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80014ec <dht20_read_humidity+0xfc>
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        *humidity_s = (uint8_t)((float)(*humidity_raw)
 80014c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014cc:	edc7 7a00 	vstr	s15, [r7]
 80014d0:	783b      	ldrb	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	701a      	strb	r2, [r3, #0]
        
        return 0;                                                     /* success return 0 */
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <dht20_read_humidity+0xee>
    }
    else
    {
//        handle->debug_print("dht20: data is not ready.\n");           /* data is not ready */
        
        return 4;                                                     /* return error */
 80014dc:	2304      	movs	r3, #4
    }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	49800000 	.word	0x49800000
 80014ec:	42c80000 	.word	0x42c80000

080014f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <MX_GPIO_Init+0x114>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a3d      	ldr	r2, [pc, #244]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a36      	ldr	r2, [pc, #216]	@ (8001604 <MX_GPIO_Init+0x114>)
 800152c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a2f      	ldr	r2, [pc, #188]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <MX_GPIO_Init+0x114>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <MX_GPIO_Init+0x114>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2120      	movs	r1, #32
 800157a:	4823      	ldr	r0, [pc, #140]	@ (8001608 <MX_GPIO_Init+0x118>)
 800157c:	f002 fa2e 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001586:	4821      	ldr	r0, [pc, #132]	@ (800160c <MX_GPIO_Init+0x11c>)
 8001588:	f002 fa28 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001592:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	481b      	ldr	r0, [pc, #108]	@ (8001610 <MX_GPIO_Init+0x120>)
 80015a4:	f002 f896 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015a8:	2320      	movs	r3, #32
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4812      	ldr	r0, [pc, #72]	@ (8001608 <MX_GPIO_Init+0x118>)
 80015c0:	f002 f888 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_GPIO_Init+0x11c>)
 80015de:	f002 f879 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80015e2:	2320      	movs	r3, #32
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_GPIO_Init+0x11c>)
 80015f8:	f002 f86c 	bl	80036d4 <HAL_GPIO_Init>

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800

08001614 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <MX_I2C1_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	@ (8001668 <MX_I2C1_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_I2C1_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	@ (800166c <MX_I2C1_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_I2C1_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_I2C1_Init+0x50>)
 8001652:	f002 f9dd 	bl	8003a10 <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 f9d6 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002a0 	.word	0x200002a0
 8001668:	40005400 	.word	0x40005400
 800166c:	000186a0 	.word	0x000186a0

08001670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_I2C_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12c      	bne.n	80016ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HAL_I2C_MspInit+0x88>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b4:	2312      	movs	r3, #18
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c0:	2304      	movs	r3, #4
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	480c      	ldr	r0, [pc, #48]	@ (80016fc <HAL_I2C_MspInit+0x8c>)
 80016cc:	f002 f802 	bl	80036d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_I2C_MspInit+0x88>)
 80016da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016de:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_I2C_MspInit+0x88>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	@ 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <iicWriteData>:
//	htim3.Instance->CCR1 = 0;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
}
*/

void iicWriteData(uint8_t addr, uint8_t *buf, uint16_t len) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af02      	add	r7, sp, #8
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, addr, buf, len, 1);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	b299      	uxth	r1, r3
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <iicWriteData+0x2c>)
 800171e:	f002 fabb 	bl	8003c98 <HAL_I2C_Master_Transmit>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002a0 	.word	0x200002a0

08001730 <iicReadData>:

void iicReadData(uint8_t addr, uint8_t *buf, uint16_t len) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af02      	add	r7, sp, #8
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, addr, buf, len, 1);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	b299      	uxth	r1, r3
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <iicReadData+0x2c>)
 800174e:	f002 fba1 	bl	8003e94 <HAL_I2C_Master_Receive>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002a0 	.word	0x200002a0

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	dht20_handle_t hdth;
	hdth.delay_ms = &HAL_Delay;
 8001766:	4b5f      	ldr	r3, [pc, #380]	@ (80018e4 <main+0x184>)
 8001768:	60bb      	str	r3, [r7, #8]
	hdth.iic_read_cmd = &iicReadData;
 800176a:	4b5f      	ldr	r3, [pc, #380]	@ (80018e8 <main+0x188>)
 800176c:	603b      	str	r3, [r7, #0]
	hdth.iic_write_cmd = &iicWriteData;
 800176e:	4b5f      	ldr	r3, [pc, #380]	@ (80018ec <main+0x18c>)
 8001770:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f000 fea5 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f8df 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f7ff feb9 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800177e:	f7ff fc91 	bl	80010a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001782:	f000 fe01 	bl	8002388 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001786:	f7ff fb8f 	bl	8000ea8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800178a:	f000 fd2b 	bl	80021e4 <MX_TIM3_Init>
  MX_I2C1_Init();
 800178e:	f7ff ff41 	bl	8001614 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	dht20_init(&hdth);
 8001792:	463b      	mov	r3, r7
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fd51 	bl	800123c <dht20_init>

	//SSD1315_DisplayOn(&ahogyszeretnemcsillagnelegyenott);
	//SSD1315_SetBrightness(&ahogyszeretnemcsillagnelegyenott, 10);
	//SSD1315_FillRGBRect(&ahogyszeretnemcsillagnelegyenott, 0, 0, , 7, 8);
	//SSD1315_FillRect(&ahogyszeretnemcsillagnelegyenott, 10, 10, 100, 100, 0);
	ssd1306_Init(&hi2c1);
 800179a:	4855      	ldr	r0, [pc, #340]	@ (80018f0 <main+0x190>)
 800179c:	f000 f954 	bl	8001a48 <ssd1306_Init>
	ssd1306_Fill(Black);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 fa71 	bl	8001c88 <ssd1306_Fill>

	//ssd1306_WriteString("Ho: ", Font_7x10, White);
	//ssd1306_WriteString(&temperatureString, Font_7x10, White);
	ssd1306_UpdateScreen(&hi2c1);
 80017a6:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <main+0x190>)
 80017a8:	f000 fa92 	bl	8001cd0 <ssd1306_UpdateScreen>

	MX_ADC1_Init();
 80017ac:	f7ff fb7c 	bl	8000ea8 <MX_ADC1_Init>

	HAL_ADC_Start_DMA(&hadc1, adcValues, 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	4950      	ldr	r1, [pc, #320]	@ (80018f4 <main+0x194>)
 80017b4:	4850      	ldr	r0, [pc, #320]	@ (80018f8 <main+0x198>)
 80017b6:	f000 ff5d 	bl	8002674 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		dht20_read_temperature(&hdth, &temp_raw, &temperature);
 80017ba:	463b      	mov	r3, r7
 80017bc:	4a4f      	ldr	r2, [pc, #316]	@ (80018fc <main+0x19c>)
 80017be:	4950      	ldr	r1, [pc, #320]	@ (8001900 <main+0x1a0>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fd93 	bl	80012ec <dht20_read_temperature>
		dht20_read_humidity(&hdth, &hum_raw, &humidity);
 80017c6:	463b      	mov	r3, r7
 80017c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001904 <main+0x1a4>)
 80017ca:	494f      	ldr	r1, [pc, #316]	@ (8001908 <main+0x1a8>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe0f 	bl	80013f0 <dht20_read_humidity>

		ssd1306_SetCursor(10,10);
 80017d2:	210a      	movs	r1, #10
 80017d4:	200a      	movs	r0, #10
 80017d6:	f000 fbb3 	bl	8001f40 <ssd1306_SetCursor>
		ssd1306_WriteString("Temp: ", Font_7x10, White);
 80017da:	4a4c      	ldr	r2, [pc, #304]	@ (800190c <main+0x1ac>)
 80017dc:	2301      	movs	r3, #1
 80017de:	ca06      	ldmia	r2, {r1, r2}
 80017e0:	484b      	ldr	r0, [pc, #300]	@ (8001910 <main+0x1b0>)
 80017e2:	f000 fb87 	bl	8001ef4 <ssd1306_WriteString>
		//sprintf(temperatureString, "%f", temperature);
		snprintf(temperatureString, sizeof(temperatureString), "%f", temperature);
 80017e6:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <main+0x19c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe feb4 	bl	8000558 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	e9cd 2300 	strd	r2, r3, [sp]
 80017f8:	4a46      	ldr	r2, [pc, #280]	@ (8001914 <main+0x1b4>)
 80017fa:	210a      	movs	r1, #10
 80017fc:	4846      	ldr	r0, [pc, #280]	@ (8001918 <main+0x1b8>)
 80017fe:	f005 fbe7 	bl	8006fd0 <sniprintf>
		ssd1306_WriteString(temperatureString, Font_7x10, White);
 8001802:	4a42      	ldr	r2, [pc, #264]	@ (800190c <main+0x1ac>)
 8001804:	2301      	movs	r3, #1
 8001806:	ca06      	ldmia	r2, {r1, r2}
 8001808:	4843      	ldr	r0, [pc, #268]	@ (8001918 <main+0x1b8>)
 800180a:	f000 fb73 	bl	8001ef4 <ssd1306_WriteString>


		ssd1306_SetCursor(10,30);
 800180e:	211e      	movs	r1, #30
 8001810:	200a      	movs	r0, #10
 8001812:	f000 fb95 	bl	8001f40 <ssd1306_SetCursor>
		ssd1306_WriteString("Hum: ", Font_7x10, White);
 8001816:	4a3d      	ldr	r2, [pc, #244]	@ (800190c <main+0x1ac>)
 8001818:	2301      	movs	r3, #1
 800181a:	ca06      	ldmia	r2, {r1, r2}
 800181c:	483f      	ldr	r0, [pc, #252]	@ (800191c <main+0x1bc>)
 800181e:	f000 fb69 	bl	8001ef4 <ssd1306_WriteString>
		humidity3 = humidity;
 8001822:	4b38      	ldr	r3, [pc, #224]	@ (8001904 <main+0x1a4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182e:	4b3c      	ldr	r3, [pc, #240]	@ (8001920 <main+0x1c0>)
 8001830:	edc3 7a00 	vstr	s15, [r3]
		//sprintf(humidityString, "%f", humidity);
		snprintf(humidityString, sizeof(humidityString), "%f", humidity3);
 8001834:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <main+0x1c0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe8d 	bl	8000558 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9cd 2300 	strd	r2, r3, [sp]
 8001846:	4a33      	ldr	r2, [pc, #204]	@ (8001914 <main+0x1b4>)
 8001848:	2103      	movs	r1, #3
 800184a:	4836      	ldr	r0, [pc, #216]	@ (8001924 <main+0x1c4>)
 800184c:	f005 fbc0 	bl	8006fd0 <sniprintf>

		ssd1306_WriteString(humidityString, Font_7x10, White);
 8001850:	4a2e      	ldr	r2, [pc, #184]	@ (800190c <main+0x1ac>)
 8001852:	2301      	movs	r3, #1
 8001854:	ca06      	ldmia	r2, {r1, r2}
 8001856:	4833      	ldr	r0, [pc, #204]	@ (8001924 <main+0x1c4>)
 8001858:	f000 fb4c 	bl	8001ef4 <ssd1306_WriteString>

		//temp hum OLED end
		//HAL_ADC_PollForConversion(&hadc1, 1);
		HAL_ADC_Start_DMA(&hadc1, adcValues, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	4925      	ldr	r1, [pc, #148]	@ (80018f4 <main+0x194>)
 8001860:	4825      	ldr	r0, [pc, #148]	@ (80018f8 <main+0x198>)
 8001862:	f000 ff07 	bl	8002674 <HAL_ADC_Start_DMA>

		lightLevel = adcValues[0];
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <main+0x194>)
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <main+0x1c8>)
 800186c:	801a      	strh	r2, [r3, #0]
		HAL_ADC_GetValue(&hadc1);
		*/



		ssd1306_SetCursor(10,50);
 800186e:	2132      	movs	r1, #50	@ 0x32
 8001870:	200a      	movs	r0, #10
 8001872:	f000 fb65 	bl	8001f40 <ssd1306_SetCursor>
		ssd1306_WriteString("Light: ", Font_7x10, White);
 8001876:	4a25      	ldr	r2, [pc, #148]	@ (800190c <main+0x1ac>)
 8001878:	2301      	movs	r3, #1
 800187a:	ca06      	ldmia	r2, {r1, r2}
 800187c:	482b      	ldr	r0, [pc, #172]	@ (800192c <main+0x1cc>)
 800187e:	f000 fb39 	bl	8001ef4 <ssd1306_WriteString>
		lightLevel = adcValues[0];
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <main+0x194>)
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <main+0x1c8>)
 8001888:	801a      	strh	r2, [r3, #0]
		lightLevel2 = lightLevel;
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <main+0x1c8>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <main+0x1d0>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
		//sprintf(humidityString, "%", humidity);
		snprintf(lightLevelString, sizeof(lightLevelString), "%f", lightLevel2);
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <main+0x1d0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe59 	bl	8000558 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e9cd 2300 	strd	r2, r3, [sp]
 80018ae:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <main+0x1b4>)
 80018b0:	2106      	movs	r1, #6
 80018b2:	4820      	ldr	r0, [pc, #128]	@ (8001934 <main+0x1d4>)
 80018b4:	f005 fb8c 	bl	8006fd0 <sniprintf>

		ssd1306_WriteString(lightLevelString, Font_7x10, White);
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <main+0x1ac>)
 80018ba:	2301      	movs	r3, #1
 80018bc:	ca06      	ldmia	r2, {r1, r2}
 80018be:	481d      	ldr	r0, [pc, #116]	@ (8001934 <main+0x1d4>)
 80018c0:	f000 fb18 	bl	8001ef4 <ssd1306_WriteString>




		ssd1306_UpdateScreen(&hi2c1);
 80018c4:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <main+0x190>)
 80018c6:	f000 fa03 	bl	8001cd0 <ssd1306_UpdateScreen>
		ssd1306_Fill(Black);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f9dc 	bl	8001c88 <ssd1306_Fill>
		ssd1306_SetCursor(10,10);
 80018d0:	210a      	movs	r1, #10
 80018d2:	200a      	movs	r0, #10
 80018d4:	f000 fb34 	bl	8001f40 <ssd1306_SetCursor>

		HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f000 fe63 	bl	80025a4 <HAL_Delay>
		dht20_read_temperature(&hdth, &temp_raw, &temperature);
 80018de:	bf00      	nop
 80018e0:	e76b      	b.n	80017ba <main+0x5a>
 80018e2:	bf00      	nop
 80018e4:	080025a5 	.word	0x080025a5
 80018e8:	08001731 	.word	0x08001731
 80018ec:	08001701 	.word	0x08001701
 80018f0:	200002a0 	.word	0x200002a0
 80018f4:	20000324 	.word	0x20000324
 80018f8:	200001f8 	.word	0x200001f8
 80018fc:	200002f8 	.word	0x200002f8
 8001900:	200002f4 	.word	0x200002f4
 8001904:	20000318 	.word	0x20000318
 8001908:	20000314 	.word	0x20000314
 800190c:	20000000 	.word	0x20000000
 8001910:	08009268 	.word	0x08009268
 8001914:	08009270 	.word	0x08009270
 8001918:	200002fc 	.word	0x200002fc
 800191c:	08009274 	.word	0x08009274
 8001920:	2000031c 	.word	0x2000031c
 8001924:	20000320 	.word	0x20000320
 8001928:	20000312 	.word	0x20000312
 800192c:	0800927c 	.word	0x0800927c
 8001930:	20000308 	.word	0x20000308
 8001934:	2000030c 	.word	0x2000030c

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	@ 0x50
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2230      	movs	r2, #48	@ 0x30
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fbb9 	bl	80070be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <SystemClock_Config+0xcc>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a27      	ldr	r2, [pc, #156]	@ (8001a04 <SystemClock_Config+0xcc>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <SystemClock_Config+0xcc>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <SystemClock_Config+0xd0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001984:	4a20      	ldr	r2, [pc, #128]	@ (8001a08 <SystemClock_Config+0xd0>)
 8001986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <SystemClock_Config+0xd0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001998:	2301      	movs	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800199c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	2302      	movs	r3, #2
 80019a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019ac:	2308      	movs	r3, #8
 80019ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019b0:	23a8      	movs	r3, #168	@ 0xa8
 80019b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019b8:	2307      	movs	r3, #7
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 f94b 	bl	8004c5c <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019cc:	f000 f81e 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2302      	movs	r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fbad 	bl	800514c <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019f8:	f000 f808 	bl	8001a0c <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	@ 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001a24:	230a      	movs	r3, #10
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	1cfb      	adds	r3, r7, #3
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	2200      	movs	r2, #0
 8001a34:	2178      	movs	r1, #120	@ 0x78
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f002 fc52 	bl	80042e0 <HAL_I2C_Mem_Write>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001a50:	2064      	movs	r0, #100	@ 0x64
 8001a52:	f000 fda7 	bl	80025a4 <HAL_Delay>
    int status = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001a5a:	21ae      	movs	r1, #174	@ 0xae
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffdb 	bl	8001a18 <ssd1306_WriteCommand>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffd2 	bl	8001a18 <ssd1306_WriteCommand>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a7e:	2110      	movs	r1, #16
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffc9 	bl	8001a18 <ssd1306_WriteCommand>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001a90:	21b0      	movs	r1, #176	@ 0xb0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffc0 	bl	8001a18 <ssd1306_WriteCommand>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001aa2:	21c8      	movs	r1, #200	@ 0xc8
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ffb7 	bl	8001a18 <ssd1306_WriteCommand>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffae 	bl	8001a18 <ssd1306_WriteCommand>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ffa5 	bl	8001a18 <ssd1306_WriteCommand>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001ad8:	2140      	movs	r1, #64	@ 0x40
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff9c 	bl	8001a18 <ssd1306_WriteCommand>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001aea:	2181      	movs	r1, #129	@ 0x81
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff93 	bl	8001a18 <ssd1306_WriteCommand>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001afc:	21ff      	movs	r1, #255	@ 0xff
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff8a 	bl	8001a18 <ssd1306_WriteCommand>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001b0e:	21a1      	movs	r1, #161	@ 0xa1
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff81 	bl	8001a18 <ssd1306_WriteCommand>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001b20:	21a6      	movs	r1, #166	@ 0xa6
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff78 	bl	8001a18 <ssd1306_WriteCommand>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001b32:	21a8      	movs	r1, #168	@ 0xa8
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff6f 	bl	8001a18 <ssd1306_WriteCommand>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001b44:	213f      	movs	r1, #63	@ 0x3f
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff66 	bl	8001a18 <ssd1306_WriteCommand>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b56:	21a4      	movs	r1, #164	@ 0xa4
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff5d 	bl	8001a18 <ssd1306_WriteCommand>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001b68:	21d3      	movs	r1, #211	@ 0xd3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ff54 	bl	8001a18 <ssd1306_WriteCommand>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff4b 	bl	8001a18 <ssd1306_WriteCommand>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001b8c:	21d5      	movs	r1, #213	@ 0xd5
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff42 	bl	8001a18 <ssd1306_WriteCommand>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001b9e:	21f0      	movs	r1, #240	@ 0xf0
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff39 	bl	8001a18 <ssd1306_WriteCommand>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001bb0:	21d9      	movs	r1, #217	@ 0xd9
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff30 	bl	8001a18 <ssd1306_WriteCommand>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001bc2:	2122      	movs	r1, #34	@ 0x22
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff27 	bl	8001a18 <ssd1306_WriteCommand>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001bd4:	21da      	movs	r1, #218	@ 0xda
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff1e 	bl	8001a18 <ssd1306_WriteCommand>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001be6:	2112      	movs	r1, #18
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff15 	bl	8001a18 <ssd1306_WriteCommand>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001bf8:	21db      	movs	r1, #219	@ 0xdb
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff0c 	bl	8001a18 <ssd1306_WriteCommand>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff03 	bl	8001a18 <ssd1306_WriteCommand>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001c1c:	218d      	movs	r1, #141	@ 0x8d
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fefa 	bl	8001a18 <ssd1306_WriteCommand>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001c2e:	2114      	movs	r1, #20
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fef1 	bl	8001a18 <ssd1306_WriteCommand>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001c40:	21af      	movs	r1, #175	@ 0xaf
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fee8 	bl	8001a18 <ssd1306_WriteCommand>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <ssd1306_Init+0x214>
        return 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00f      	b.n	8001c7c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 f813 	bl	8001c88 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f834 	bl	8001cd0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <ssd1306_Init+0x23c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <ssd1306_Init+0x23c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <ssd1306_Init+0x23c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	715a      	strb	r2, [r3, #5]

    return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000072c 	.word	0x2000072c

08001c88 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e00d      	b.n	8001cb4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <ssd1306_Fill+0x1a>
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	e000      	b.n	8001ca4 <ssd1306_Fill+0x1c>
 8001ca2:	21ff      	movs	r1, #255	@ 0xff
 8001ca4:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <ssd1306_Fill+0x44>)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	460a      	mov	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d3ed      	bcc.n	8001c98 <ssd1306_Fill+0x10>
    }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000032c 	.word	0x2000032c

08001cd0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e020      	b.n	8001d20 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	3b50      	subs	r3, #80	@ 0x50
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fe96 	bl	8001a18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001cec:	2100      	movs	r1, #0
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fe92 	bl	8001a18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fe8e 	bl	8001a18 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <ssd1306_UpdateScreen+0x60>)
 8001d02:	4413      	add	r3, r2
 8001d04:	2264      	movs	r2, #100	@ 0x64
 8001d06:	9202      	str	r2, [sp, #8]
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	9201      	str	r2, [sp, #4]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	2178      	movs	r1, #120	@ 0x78
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f002 fae3 	bl	80042e0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	d9db      	bls.n	8001cde <ssd1306_UpdateScreen+0xe>
    }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000032c 	.word	0x2000032c

08001d34 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	71bb      	strb	r3, [r7, #6]
 8001d42:	4613      	mov	r3, r2
 8001d44:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db48      	blt.n	8001de0 <ssd1306_DrawPixel+0xac>
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d52:	d845      	bhi.n	8001de0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <ssd1306_DrawPixel+0xb8>)
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001d5c:	797b      	ldrb	r3, [r7, #5]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001d6a:	797b      	ldrb	r3, [r7, #5]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11a      	bne.n	8001da6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d70:	79fa      	ldrb	r2, [r7, #7]
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	b2d8      	uxtb	r0, r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	01db      	lsls	r3, r3, #7
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <ssd1306_DrawPixel+0xbc>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b259      	sxtb	r1, r3
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2c9      	uxtb	r1, r1
 8001da0:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <ssd1306_DrawPixel+0xbc>)
 8001da2:	54d1      	strb	r1, [r2, r3]
 8001da4:	e01d      	b.n	8001de2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	b2d8      	uxtb	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	01db      	lsls	r3, r3, #7
 8001db2:	4413      	add	r3, r2
 8001db4:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <ssd1306_DrawPixel+0xbc>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	b25a      	sxtb	r2, r3
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b259      	sxtb	r1, r3
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	01db      	lsls	r3, r3, #7
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2c9      	uxtb	r1, r1
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <ssd1306_DrawPixel+0xbc>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
 8001dde:	e000      	b.n	8001de2 <ssd1306_DrawPixel+0xae>
        return;
 8001de0:	bf00      	nop
    }
}
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	2000072c 	.word	0x2000072c
 8001df0:	2000032c 	.word	0x2000032c

08001df4 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	1d38      	adds	r0, r7, #4
 8001dfe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e0c:	4b38      	ldr	r3, [pc, #224]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	793b      	ldrb	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e18:	dc06      	bgt.n	8001e28 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001e1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001e1c:	885b      	ldrh	r3, [r3, #2]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e24:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e26:	dd01      	ble.n	8001e2c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e05c      	b.n	8001ee6 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e04c      	b.n	8001ecc <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3b20      	subs	r3, #32
 8001e38:	7979      	ldrb	r1, [r7, #5]
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	440b      	add	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e034      	b.n	8001ebc <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e62:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b2d8      	uxtb	r0, r3
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	7bba      	ldrb	r2, [r7, #14]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7ff ff57 	bl	8001d34 <ssd1306_DrawPixel>
 8001e86:	e016      	b.n	8001eb6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	b2d8      	uxtb	r0, r3
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001e98:	885b      	ldrh	r3, [r3, #2]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2d9      	uxtb	r1, r3
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f7ff ff3f 	bl	8001d34 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	793b      	ldrb	r3, [r7, #4]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d3c5      	bcc.n	8001e52 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	797b      	ldrb	r3, [r7, #5]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d3ad      	bcc.n	8001e32 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	793a      	ldrb	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <ssd1306_WriteChar+0xfc>)
 8001ee2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000072c 	.word	0x2000072c

08001ef4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	1d38      	adds	r0, r7, #4
 8001efe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f02:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001f04:	e012      	b.n	8001f2c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	7818      	ldrb	r0, [r3, #0]
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	1d3a      	adds	r2, r7, #4
 8001f0e:	ca06      	ldmia	r2, {r1, r2}
 8001f10:	f7ff ff70 	bl	8001df4 <ssd1306_WriteChar>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d002      	beq.n	8001f26 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	e008      	b.n	8001f38 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e8      	bne.n	8001f06 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	781b      	ldrb	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <ssd1306_SetCursor+0x2c>)
 8001f56:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <ssd1306_SetCursor+0x2c>)
 8001f5e:	805a      	strh	r2, [r3, #2]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	2000072c 	.word	0x2000072c

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fae:	2007      	movs	r0, #7
 8001fb0:	f000 ffde 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002016:	f000 faa5 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA2_Stream0_IRQHandler+0x10>)
 8002026:	f001 f8eb 	bl	8003200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000240 	.word	0x20000240

08002034 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_kill>:

int _kill(int pid, int sig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800204e:	f005 f889 	bl	8007164 <__errno>
 8002052:	4603      	mov	r3, r0
 8002054:	2216      	movs	r2, #22
 8002056:	601a      	str	r2, [r3, #0]
  return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_exit>:

void _exit (int status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ffe7 	bl	8002044 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002076:	bf00      	nop
 8002078:	e7fd      	b.n	8002076 <_exit+0x12>

0800207a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e00a      	b.n	80020a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800208c:	f3af 8000 	nop.w
 8002090:	4601      	mov	r1, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	60ba      	str	r2, [r7, #8]
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dbf0      	blt.n	800208c <_read+0x12>
  }

  return len;
 80020aa:	687b      	ldr	r3, [r7, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e009      	b.n	80020da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	60ba      	str	r2, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbf1      	blt.n	80020c6 <_write+0x12>
  }
  return len;
 80020e2:	687b      	ldr	r3, [r7, #4]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_close>:

int _close(int file)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002114:	605a      	str	r2, [r3, #4]
  return 0;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_isatty>:

int _isatty(int file)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f004 ffee 	bl	8007164 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20018000 	.word	0x20018000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	20000734 	.word	0x20000734
 80021bc:	20000918 	.word	0x20000918

080021c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SystemInit+0x20>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <SystemInit+0x20>)
 80021cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	@ 0x38
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	615a      	str	r2, [r3, #20]
 8002212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002214:	4b2c      	ldr	r3, [pc, #176]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002216:	4a2d      	ldr	r2, [pc, #180]	@ (80022cc <MX_TIM3_Init+0xe8>)
 8002218:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2097;
 800221a:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 800221c:	f640 0231 	movw	r2, #2097	@ 0x831
 8002220:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8002228:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 800222a:	220a      	movs	r2, #10
 800222c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800223a:	4823      	ldr	r0, [pc, #140]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 800223c:	f003 f9a6 	bl	800558c <HAL_TIM_Base_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002246:	f7ff fbe1 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800224e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002254:	4619      	mov	r1, r3
 8002256:	481c      	ldr	r0, [pc, #112]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002258:	f003 fb02 	bl	8005860 <HAL_TIM_ConfigClockSource>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002262:	f7ff fbd3 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002266:	4818      	ldr	r0, [pc, #96]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002268:	f003 f9df 	bl	800562a <HAL_TIM_PWM_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002272:	f7ff fbcb 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227e:	f107 0320 	add.w	r3, r7, #32
 8002282:	4619      	mov	r1, r3
 8002284:	4810      	ldr	r0, [pc, #64]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 8002286:	f003 fe59 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002290:	f7ff fbbc 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002294:	2360      	movs	r3, #96	@ 0x60
 8002296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4807      	ldr	r0, [pc, #28]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 80022ac:	f003 fa16 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022b6:	f7ff fba9 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022ba:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <MX_TIM3_Init+0xe4>)
 80022bc:	f000 f82a 	bl	8002314 <HAL_TIM_MspPostInit>

}
 80022c0:	bf00      	nop
 80022c2:	3738      	adds	r7, #56	@ 0x38
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000738 	.word	0x20000738
 80022cc:	40000400 	.word	0x40000400

080022d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0b      	ldr	r2, [pc, #44]	@ (800230c <HAL_TIM_Base_MspInit+0x3c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10d      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_TIM_Base_MspInit+0x40>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4a09      	ldr	r2, [pc, #36]	@ (8002310 <HAL_TIM_Base_MspInit+0x40>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <HAL_TIM_Base_MspInit+0x40>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40000400 	.word	0x40000400
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a12      	ldr	r2, [pc, #72]	@ (800237c <HAL_TIM_MspPostInit+0x68>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11d      	bne.n	8002372 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_TIM_MspPostInit+0x6c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <HAL_TIM_MspPostInit+0x6c>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_TIM_MspPostInit+0x6c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002352:	2310      	movs	r3, #16
 8002354:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002362:	2302      	movs	r3, #2
 8002364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_TIM_MspPostInit+0x70>)
 800236e:	f001 f9b1 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40000400 	.word	0x40000400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020400 	.word	0x40020400

08002388 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	@ (80023d8 <MX_USART2_UART_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023c0:	f003 fe2a 	bl	8006018 <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ca:	f7ff fb1f 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000780 	.word	0x20000780
 80023d8:	40004400 	.word	0x40004400

080023dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <HAL_UART_MspInit+0x84>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d12b      	bne.n	8002456 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a10      	ldr	r2, [pc, #64]	@ (8002464 <HAL_UART_MspInit+0x88>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_UART_MspInit+0x88>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002436:	230c      	movs	r3, #12
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002446:	2307      	movs	r3, #7
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <HAL_UART_MspInit+0x8c>)
 8002452:	f001 f93f 	bl	80036d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	@ 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40004400 	.word	0x40004400
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002470:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002472:	490e      	ldr	r1, [pc, #56]	@ (80024ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002474:	4a0e      	ldr	r2, [pc, #56]	@ (80024b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0b      	ldr	r2, [pc, #44]	@ (80024b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002488:	4c0b      	ldr	r4, [pc, #44]	@ (80024b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002496:	f7ff fe93 	bl	80021c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f004 fe69 	bl	8007170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff f95f 	bl	8001760 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024b0:	08009d90 	.word	0x08009d90
  ldr r2, =_sbss
 80024b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024b8:	20000914 	.word	0x20000914

080024bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <HAL_Init+0x40>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_Init+0x40>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_Init+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_Init+0x40>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 fd41 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f808 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f4:	f7ff fd3c 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fd59 	bl	8002fda <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 fd21 	bl	8002f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000008 	.word	0x20000008
 800255c:	20000010 	.word	0x20000010
 8002560:	2000000c 	.word	0x2000000c

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000010 	.word	0x20000010
 8002588:	200007c4 	.word	0x200007c4

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200007c4 	.word	0x200007c4

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000010 	.word	0x20000010

080025ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e033      	b.n	800266a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fcb6 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002632:	f023 0302 	bic.w	r3, r3, #2
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa48 	bl	8002ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
 800265a:	e001      	b.n	8002660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_ADC_Start_DMA+0x1e>
 800268e:	2302      	movs	r3, #2
 8002690:	e0ce      	b.n	8002830 <HAL_ADC_Start_DMA+0x1bc>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d018      	beq.n	80026da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002838 <HAL_ADC_Start_DMA+0x1c4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5f      	ldr	r2, [pc, #380]	@ (800283c <HAL_ADC_Start_DMA+0x1c8>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0c9a      	lsrs	r2, r3, #18
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e8:	d107      	bne.n	80026fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8086 	bne.w	8002816 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002734:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002748:	d106      	bne.n	8002758 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f023 0206 	bic.w	r2, r3, #6
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44
 8002756:	e002      	b.n	800275e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002766:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <HAL_ADC_Start_DMA+0x1cc>)
 8002768:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	4a35      	ldr	r2, [pc, #212]	@ (8002844 <HAL_ADC_Start_DMA+0x1d0>)
 8002770:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	4a34      	ldr	r2, [pc, #208]	@ (8002848 <HAL_ADC_Start_DMA+0x1d4>)
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277e:	4a33      	ldr	r2, [pc, #204]	@ (800284c <HAL_ADC_Start_DMA+0x1d8>)
 8002780:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800278a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800279a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	334c      	adds	r3, #76	@ 0x4c
 80027b6:	4619      	mov	r1, r3
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f000 fcc8 	bl	8003150 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10f      	bne.n	80027ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d129      	bne.n	800282e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	e020      	b.n	800282e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a17      	ldr	r2, [pc, #92]	@ (8002850 <HAL_ADC_Start_DMA+0x1dc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11b      	bne.n	800282e <HAL_ADC_Start_DMA+0x1ba>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d114      	bne.n	800282e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00b      	b.n	800282e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f043 0210 	orr.w	r2, r3, #16
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000008 	.word	0x20000008
 800283c:	431bde83 	.word	0x431bde83
 8002840:	40012300 	.word	0x40012300
 8002844:	08002ccd 	.word	0x08002ccd
 8002848:	08002d87 	.word	0x08002d87
 800284c:	08002da3 	.word	0x08002da3
 8002850:	40012000 	.word	0x40012000

08002854 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1c>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e105      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x228>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	d925      	bls.n	8002908 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	3b1e      	subs	r3, #30
 80028d2:	2207      	movs	r2, #7
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68d9      	ldr	r1, [r3, #12]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4403      	add	r3, r0
 80028fa:	3b1e      	subs	r3, #30
 80028fc:	409a      	lsls	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	e022      	b.n	800294e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6919      	ldr	r1, [r3, #16]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	2207      	movs	r2, #7
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	400a      	ands	r2, r1
 800292a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6919      	ldr	r1, [r3, #16]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	4603      	mov	r3, r0
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4403      	add	r3, r0
 8002944:	409a      	lsls	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d824      	bhi.n	80029a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b05      	subs	r3, #5
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b05      	subs	r3, #5
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
 800299e:	e04c      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d824      	bhi.n	80029f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b23      	subs	r3, #35	@ 0x23
 80029ba:	221f      	movs	r2, #31
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43da      	mvns	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	400a      	ands	r2, r1
 80029c8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	3b23      	subs	r3, #35	@ 0x23
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80029f0:	e023      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3b41      	subs	r3, #65	@ 0x41
 8002a04:	221f      	movs	r2, #31
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	400a      	ands	r2, r1
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b41      	subs	r3, #65	@ 0x41
 8002a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x234>)
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a21      	ldr	r2, [pc, #132]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x238>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d109      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1cc>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b12      	cmp	r3, #18
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x238>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d123      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x21e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d003      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x1e6>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b11      	cmp	r3, #17
 8002a74:	d11b      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d111      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_ADC_ConfigChannel+0x23c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x240>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	40012000 	.word	0x40012000
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	431bde83 	.word	0x431bde83

08002ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002adc:	4b79      	ldr	r3, [pc, #484]	@ (8002cc4 <ADC_Init+0x1f0>)
 8002ade:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	021a      	lsls	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	4a58      	ldr	r2, [pc, #352]	@ (8002cc8 <ADC_Init+0x1f4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e00f      	b.n	8002bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0202 	bic.w	r2, r2, #2
 8002be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7e1b      	ldrb	r3, [r3, #24]
 8002bec:	005a      	lsls	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01b      	beq.n	8002c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	035a      	lsls	r2, r3, #13
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e007      	b.n	8002c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	051a      	lsls	r2, r3, #20
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c8a:	025a      	lsls	r2, r3, #9
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	029a      	lsls	r2, r3, #10
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012300 	.word	0x40012300
 8002cc8:	0f000001 	.word	0x0f000001

08002ccc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d13c      	bne.n	8002d60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d12b      	bne.n	8002d58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d127      	bne.n	8002d58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d119      	bne.n	8002d58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0220 	bic.w	r2, r2, #32
 8002d32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fd7b 	bl	8002854 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d5e:	e00e      	b.n	8002d7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff fd85 	bl	800287c <HAL_ADC_ErrorCallback>
}
 8002d72:	e004      	b.n	8002d7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fd67 	bl	8002868 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff fd5a 	bl	800287c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4907      	ldr	r1, [pc, #28]	@ (8002e6c <__NVIC_EnableIRQ+0x38>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db0a      	blt.n	8002e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	@ (8002ebc <__NVIC_SetPriority+0x4c>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e98:	e00a      	b.n	8002eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4908      	ldr	r1, [pc, #32]	@ (8002ec0 <__NVIC_SetPriority+0x50>)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	761a      	strb	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	@ 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
         );
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	@ 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f3c:	d301      	bcc.n	8002f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00f      	b.n	8002f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <SysTick_Config+0x40>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4a:	210f      	movs	r1, #15
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f7ff ff8e 	bl	8002e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <SysTick_Config+0x40>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5a:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <SysTick_Config+0x40>)
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	e000e010 	.word	0xe000e010

08002f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff29 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f98:	f7ff ff3e 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff ff8e 	bl	8002ec4 <NVIC_EncodePriority>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff5d 	bl	8002e70 <__NVIC_SetPriority>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff31 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffa2 	bl	8002f2c <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff fac4 	bl	800258c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e099      	b.n	8003144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003030:	e00f      	b.n	8003052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003032:	f7ff faab 	bl	800258c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b05      	cmp	r3, #5
 800303e:	d908      	bls.n	8003052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e078      	b.n	8003144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e8      	bne.n	8003032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4b38      	ldr	r3, [pc, #224]	@ (800314c <HAL_DMA_Init+0x158>)
 800306c:	4013      	ands	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d107      	bne.n	80030bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	4313      	orrs	r3, r2
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0307 	bic.w	r3, r3, #7
 80030d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d117      	bne.n	8003116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fa6f 	bl	80035dc <DMA_CheckFifoParam>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2240      	movs	r2, #64	@ 0x40
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003112:	2301      	movs	r3, #1
 8003114:	e016      	b.n	8003144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa26 	bl	8003570 <DMA_CalcBaseAndBitshift>
 8003124:	4603      	mov	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	223f      	movs	r2, #63	@ 0x3f
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	f010803f 	.word	0xf010803f

08003150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_DMA_Start_IT+0x26>
 8003172:	2302      	movs	r3, #2
 8003174:	e040      	b.n	80031f8 <HAL_DMA_Start_IT+0xa8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d12f      	bne.n	80031ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f9b8 	bl	8003514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	223f      	movs	r2, #63	@ 0x3f
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0216 	orr.w	r2, r2, #22
 80031be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e005      	b.n	80031f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800320c:	4b8e      	ldr	r3, [pc, #568]	@ (8003448 <HAL_DMA_IRQHandler+0x248>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a8e      	ldr	r2, [pc, #568]	@ (800344c <HAL_DMA_IRQHandler+0x24c>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	2208      	movs	r2, #8
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0204 	bic.w	r2, r2, #4
 8003252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	2208      	movs	r2, #8
 800325a:	409a      	lsls	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	2201      	movs	r2, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2204      	movs	r2, #4
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c4:	2204      	movs	r2, #4
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	2210      	movs	r2, #16
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d043      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03c      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	2210      	movs	r2, #16
 80032fc:	409a      	lsls	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d024      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
 800332e:	e01f      	b.n	8003370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
 8003340:	e016      	b.n	8003370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0208 	bic.w	r2, r2, #8
 800335e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	2220      	movs	r2, #32
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 808f 	beq.w	80034a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8087 	beq.w	80034a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2220      	movs	r2, #32
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d136      	bne.n	8003418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0216 	bic.w	r2, r2, #22
 80033b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <HAL_DMA_IRQHandler+0x1da>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0208 	bic.w	r2, r2, #8
 80033e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ee:	223f      	movs	r2, #63	@ 0x3f
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340a:	2b00      	cmp	r3, #0
 800340c:	d07e      	beq.n	800350c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
        }
        return;
 8003416:	e079      	b.n	800350c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	2b00      	cmp	r3, #0
 800343a:	d031      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e02c      	b.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
 8003446:	bf00      	nop
 8003448:	20000008 	.word	0x20000008
 800344c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
 8003460:	e01e      	b.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10f      	bne.n	8003490 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0210 	bic.w	r2, r2, #16
 800347e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d032      	beq.n	800350e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2205      	movs	r2, #5
 80034b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d307      	bcc.n	80034e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f2      	bne.n	80034cc <HAL_DMA_IRQHandler+0x2cc>
 80034e6:	e000      	b.n	80034ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	e000      	b.n	800350e <HAL_DMA_IRQHandler+0x30e>
        return;
 800350c:	bf00      	nop
    }
  }
}
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d108      	bne.n	8003554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003552:	e007      	b.n	8003564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b10      	subs	r3, #16
 8003580:	4a14      	ldr	r2, [pc, #80]	@ (80035d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800358a:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <DMA_CalcBaseAndBitshift+0x68>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d909      	bls.n	80035b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80035b0:	e007      	b.n	80035c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	aaaaaaab 	.word	0xaaaaaaab
 80035d8:	08009a08 	.word	0x08009a08

080035dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d856      	bhi.n	80036aa <DMA_CheckFifoParam+0xce>
 80035fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <DMA_CheckFifoParam+0x28>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003627 	.word	0x08003627
 800360c:	08003615 	.word	0x08003615
 8003610:	080036ab 	.word	0x080036ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d046      	beq.n	80036ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e043      	b.n	80036ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800362e:	d140      	bne.n	80036b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e03d      	b.n	80036b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800363e:	d121      	bne.n	8003684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d837      	bhi.n	80036b6 <DMA_CheckFifoParam+0xda>
 8003646:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <DMA_CheckFifoParam+0x70>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003663 	.word	0x08003663
 8003654:	0800365d 	.word	0x0800365d
 8003658:	08003675 	.word	0x08003675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e030      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e022      	b.n	80036ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003682:	e01c      	b.n	80036be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d903      	bls.n	8003692 <DMA_CheckFifoParam+0xb6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003690:	e018      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e015      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e00b      	b.n	80036c2 <DMA_CheckFifoParam+0xe6>
      break;
 80036aa:	bf00      	nop
 80036ac:	e00a      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e008      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e006      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
    }
  } 
  
  return status; 
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	@ 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e159      	b.n	80039a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	f040 8148 	bne.w	800399e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d005      	beq.n	8003726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	2b02      	cmp	r3, #2
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a2 	beq.w	800399e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b57      	ldr	r3, [pc, #348]	@ (80039bc <HAL_GPIO_Init+0x2e8>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a56      	ldr	r2, [pc, #344]	@ (80039bc <HAL_GPIO_Init+0x2e8>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b54      	ldr	r3, [pc, #336]	@ (80039bc <HAL_GPIO_Init+0x2e8>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_GPIO_Init+0x2ec>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a49      	ldr	r2, [pc, #292]	@ (80039c4 <HAL_GPIO_Init+0x2f0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0x202>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a48      	ldr	r2, [pc, #288]	@ (80039c8 <HAL_GPIO_Init+0x2f4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_GPIO_Init+0x1fe>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a47      	ldr	r2, [pc, #284]	@ (80039cc <HAL_GPIO_Init+0x2f8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a46      	ldr	r2, [pc, #280]	@ (80039d0 <HAL_GPIO_Init+0x2fc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <HAL_GPIO_Init+0x1f6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a45      	ldr	r2, [pc, #276]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_GPIO_Init+0x1f2>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038c6:	2307      	movs	r3, #7
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	@ (80039c0 <HAL_GPIO_Init+0x2ec>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f6:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800391a:	4a2f      	ldr	r2, [pc, #188]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003920:	4b2d      	ldr	r3, [pc, #180]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003944:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800394a:	4b23      	ldr	r3, [pc, #140]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396e:	4a1a      	ldr	r2, [pc, #104]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003998:	4a0f      	ldr	r2, [pc, #60]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f aea2 	bls.w	80036f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	@ 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f8:	e003      	b.n	8003a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	041a      	lsls	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e12b      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fe1a 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	@ 0x24
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a74:	f001 fd62 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8003a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a81      	ldr	r2, [pc, #516]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d807      	bhi.n	8003a94 <HAL_I2C_Init+0x84>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a80      	ldr	r2, [pc, #512]	@ (8003c88 <HAL_I2C_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e006      	b.n	8003aa2 <HAL_I2C_Init+0x92>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a7d      	ldr	r2, [pc, #500]	@ (8003c8c <HAL_I2C_Init+0x27c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf94      	ite	ls
 8003a9c:	2301      	movls	r3, #1
 8003a9e:	2300      	movhi	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0e7      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a78      	ldr	r2, [pc, #480]	@ (8003c90 <HAL_I2C_Init+0x280>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d802      	bhi.n	8003ae4 <HAL_I2C_Init+0xd4>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	e009      	b.n	8003af8 <HAL_I2C_Init+0xe8>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a69      	ldr	r2, [pc, #420]	@ (8003c94 <HAL_I2C_Init+0x284>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	3301      	adds	r3, #1
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	495c      	ldr	r1, [pc, #368]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003b14:	428b      	cmp	r3, r1
 8003b16:	d819      	bhi.n	8003b4c <HAL_I2C_Init+0x13c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e59      	subs	r1, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_I2C_Init+0x138>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e59      	subs	r1, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	e051      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	e04f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d111      	bne.n	8003b78 <HAL_I2C_Init+0x168>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e012      	b.n	8003b9e <HAL_I2C_Init+0x18e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Init+0x196>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e022      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <HAL_I2C_Init+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e58      	subs	r0, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	440b      	add	r3, r1
 8003bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bca:	e00f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6809      	ldr	r1, [r1, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6911      	ldr	r1, [r2, #16]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	000186a0 	.word	0x000186a0
 8003c88:	001e847f 	.word	0x001e847f
 8003c8c:	003d08ff 	.word	0x003d08ff
 8003c90:	431bde83 	.word	0x431bde83
 8003c94:	10624dd3 	.word	0x10624dd3

08003c98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	817b      	strh	r3, [r7, #10]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cac:	f7fe fc6e 	bl	800258c <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 80e0 	bne.w	8003e80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4970      	ldr	r1, [pc, #448]	@ (8003e8c <HAL_I2C_Master_Transmit+0x1f4>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fde8 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0d3      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0x50>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0cc      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d007      	beq.n	8003d0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2221      	movs	r2, #33	@ 0x21
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	893a      	ldrh	r2, [r7, #8]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a50      	ldr	r2, [pc, #320]	@ (8003e90 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fbbc 	bl	80044d4 <I2C_MasterRequestWrite>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08d      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d7c:	e066      	b.n	8003e4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	6a39      	ldr	r1, [r7, #32]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fe62 	bl	8004a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d107      	bne.n	8003da6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06b      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11b      	bne.n	8003e20 <HAL_I2C_Master_Transmit+0x188>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d017      	beq.n	8003e20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6a39      	ldr	r1, [r7, #32]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fe52 	bl	8004ace <I2C_WaitOnBTFFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d107      	bne.n	8003e48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e01a      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d194      	bne.n	8003d7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	00100002 	.word	0x00100002
 8003e90:	ffff0000 	.word	0xffff0000

08003e94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	817b      	strh	r3, [r7, #10]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7fe fb70 	bl	800258c <HAL_GetTick>
 8003eac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	f040 820b 	bne.w	80042d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	497c      	ldr	r1, [pc, #496]	@ (80040b8 <HAL_I2C_Master_Receive+0x224>)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fcea 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e1fe      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x50>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e1f7      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d007      	beq.n	8003f0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2222      	movs	r2, #34	@ 0x22
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2210      	movs	r2, #16
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	893a      	ldrh	r2, [r7, #8]
 8003f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a5c      	ldr	r2, [pc, #368]	@ (80040bc <HAL_I2C_Master_Receive+0x228>)
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f4c:	8979      	ldrh	r1, [r7, #10]
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fb40 	bl	80045d8 <I2C_MasterRequestRead>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e1b8      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e18c      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d11b      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e16c      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d11b      	bne.n	8004012 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	e14c      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004038:	e138      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	2b03      	cmp	r3, #3
 8004040:	f200 80f1 	bhi.w	8004226 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004048:	2b01      	cmp	r3, #1
 800404a:	d123      	bne.n	8004094 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fd7d 	bl	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e139      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004092:	e10b      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004098:	2b02      	cmp	r3, #2
 800409a:	d14e      	bne.n	800413a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	2200      	movs	r2, #0
 80040a4:	4906      	ldr	r1, [pc, #24]	@ (80040c0 <HAL_I2C_Master_Receive+0x22c>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fbfa 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e10e      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
 80040b6:	bf00      	nop
 80040b8:	00100002 	.word	0x00100002
 80040bc:	ffff0000 	.word	0xffff0000
 80040c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004138:	e0b8      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2200      	movs	r2, #0
 8004142:	4966      	ldr	r1, [pc, #408]	@ (80042dc <HAL_I2C_Master_Receive+0x448>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fbab 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0bf      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	2200      	movs	r2, #0
 800419e:	494f      	ldr	r1, [pc, #316]	@ (80042dc <HAL_I2C_Master_Receive+0x448>)
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fb7d 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e091      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004224:	e042      	b.n	80042ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004228:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fc90 	bl	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e04c      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b04      	cmp	r3, #4
 8004278:	d118      	bne.n	80042ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f47f aec2 	bne.w	800403a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3728      	adds	r7, #40	@ 0x28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	00010004 	.word	0x00010004

080042e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	4608      	mov	r0, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	461a      	mov	r2, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	817b      	strh	r3, [r7, #10]
 80042f2:	460b      	mov	r3, r1
 80042f4:	813b      	strh	r3, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042fa:	f7fe f947 	bl	800258c <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b20      	cmp	r3, #32
 800430a:	f040 80d9 	bne.w	80044c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2319      	movs	r3, #25
 8004314:	2201      	movs	r2, #1
 8004316:	496d      	ldr	r1, [pc, #436]	@ (80044cc <HAL_I2C_Mem_Write+0x1ec>)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fac1 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	e0cc      	b.n	80044c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Mem_Write+0x56>
 8004332:	2302      	movs	r3, #2
 8004334:	e0c5      	b.n	80044c2 <HAL_I2C_Mem_Write+0x1e2>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d007      	beq.n	800435c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800436a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2221      	movs	r2, #33	@ 0x21
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2240      	movs	r2, #64	@ 0x40
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800438c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a4d      	ldr	r2, [pc, #308]	@ (80044d0 <HAL_I2C_Mem_Write+0x1f0>)
 800439c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800439e:	88f8      	ldrh	r0, [r7, #6]
 80043a0:	893a      	ldrh	r2, [r7, #8]
 80043a2:	8979      	ldrh	r1, [r7, #10]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	4603      	mov	r3, r0
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f9e0 	bl	8004774 <I2C_RequestMemoryWrite>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d052      	beq.n	8004460 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e081      	b.n	80044c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fb42 	bl	8004a4c <I2C_WaitOnTXEFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d107      	bne.n	80043e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e06b      	b.n	80044c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b04      	cmp	r3, #4
 8004426:	d11b      	bne.n	8004460 <HAL_I2C_Mem_Write+0x180>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d017      	beq.n	8004460 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1aa      	bne.n	80043be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fb2e 	bl	8004ace <I2C_WaitOnBTFFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	2b04      	cmp	r3, #4
 800447e:	d107      	bne.n	8004490 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e016      	b.n	80044c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	00100002 	.word	0x00100002
 80044d0:	ffff0000 	.word	0xffff0000

080044d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	460b      	mov	r3, r1
 80044e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d006      	beq.n	80044fe <I2C_MasterRequestWrite+0x2a>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d003      	beq.n	80044fe <I2C_MasterRequestWrite+0x2a>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044fc:	d108      	bne.n	8004510 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e00b      	b.n	8004528 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	2b12      	cmp	r3, #18
 8004516:	d107      	bne.n	8004528 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004526:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f9b3 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454e:	d103      	bne.n	8004558 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e035      	b.n	80045c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004564:	d108      	bne.n	8004578 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004574:	611a      	str	r2, [r3, #16]
 8004576:	e01b      	b.n	80045b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004578:	897b      	ldrh	r3, [r7, #10]
 800457a:	11db      	asrs	r3, r3, #7
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0306 	and.w	r3, r3, #6
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f063 030f 	orn	r3, r3, #15
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	490e      	ldr	r1, [pc, #56]	@ (80045d0 <I2C_MasterRequestWrite+0xfc>)
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9d9 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e010      	b.n	80045c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4907      	ldr	r1, [pc, #28]	@ (80045d4 <I2C_MasterRequestWrite+0x100>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9c9 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	00010008 	.word	0x00010008
 80045d4:	00010002 	.word	0x00010002

080045d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	460b      	mov	r3, r1
 80045e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d006      	beq.n	8004612 <I2C_MasterRequestRead+0x3a>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d003      	beq.n	8004612 <I2C_MasterRequestRead+0x3a>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004610:	d108      	bne.n	8004624 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e00b      	b.n	800463c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	2b11      	cmp	r3, #17
 800462a:	d107      	bne.n	800463c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800463a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f929 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004662:	d103      	bne.n	800466c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e079      	b.n	8004764 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004678:	d108      	bne.n	800468c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800467a:	897b      	ldrh	r3, [r7, #10]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]
 800468a:	e05f      	b.n	800474c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800468c:	897b      	ldrh	r3, [r7, #10]
 800468e:	11db      	asrs	r3, r3, #7
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f063 030f 	orn	r3, r3, #15
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4930      	ldr	r1, [pc, #192]	@ (800476c <I2C_MasterRequestRead+0x194>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f94f 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e054      	b.n	8004764 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046ba:	897b      	ldrh	r3, [r7, #10]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4929      	ldr	r1, [pc, #164]	@ (8004770 <I2C_MasterRequestRead+0x198>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f93f 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e044      	b.n	8004764 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f8c7 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004726:	d103      	bne.n	8004730 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e017      	b.n	8004764 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004734:	897b      	ldrh	r3, [r7, #10]
 8004736:	11db      	asrs	r3, r3, #7
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0306 	and.w	r3, r3, #6
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f063 030e 	orn	r3, r3, #14
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4907      	ldr	r1, [pc, #28]	@ (8004770 <I2C_MasterRequestRead+0x198>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f8fb 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	00010008 	.word	0x00010008
 8004770:	00010002 	.word	0x00010002

08004774 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	4608      	mov	r0, r1
 800477e:	4611      	mov	r1, r2
 8004780:	461a      	mov	r2, r3
 8004782:	4603      	mov	r3, r0
 8004784:	817b      	strh	r3, [r7, #10]
 8004786:	460b      	mov	r3, r1
 8004788:	813b      	strh	r3, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800479c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f878 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c4:	d103      	bne.n	80047ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e05f      	b.n	8004892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	492d      	ldr	r1, [pc, #180]	@ (800489c <I2C_RequestMemoryWrite+0x128>)
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f8b0 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04c      	b.n	8004892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	6a39      	ldr	r1, [r7, #32]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f91a 	bl	8004a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	2b04      	cmp	r3, #4
 8004824:	d107      	bne.n	8004836 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004834:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e02b      	b.n	8004892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004840:	893b      	ldrh	r3, [r7, #8]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	611a      	str	r2, [r3, #16]
 800484a:	e021      	b.n	8004890 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800484c:	893b      	ldrh	r3, [r7, #8]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	b29b      	uxth	r3, r3
 8004852:	b2da      	uxtb	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485c:	6a39      	ldr	r1, [r7, #32]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f8f4 	bl	8004a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00d      	beq.n	8004886 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	2b04      	cmp	r3, #4
 8004870:	d107      	bne.n	8004882 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004880:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e005      	b.n	8004892 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004886:	893b      	ldrh	r3, [r7, #8]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	00010002 	.word	0x00010002

080048a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b0:	e025      	b.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d021      	beq.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ba:	f7fd fe67 	bl	800258c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e023      	b.n	8004946 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10d      	bne.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	43da      	mvns	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	e00c      	b.n	800493e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d0b6      	beq.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495c:	e051      	b.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496c:	d123      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004986:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e046      	b.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d021      	beq.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fd fde5 	bl	800258c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e020      	b.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10c      	bne.n	8004a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e00b      	b.n	8004a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d18d      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a58:	e02d      	b.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f8ce 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e02d      	b.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d021      	beq.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fd fd8b 	bl	800258c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d116      	bne.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e007      	b.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac0:	2b80      	cmp	r3, #128	@ 0x80
 8004ac2:	d1ca      	bne.n	8004a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ada:	e02d      	b.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f88d 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e02d      	b.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d021      	beq.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af4:	f7fd fd4a 	bl	800258c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d116      	bne.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e007      	b.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d1ca      	bne.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b5c:	e042      	b.n	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d119      	bne.n	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e029      	b.n	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba0:	f7fd fcf4 	bl	800258c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d116      	bne.n	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e007      	b.n	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d1b5      	bne.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c12:	d11b      	bne.n	8004c4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e267      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d075      	beq.n	8004d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c7a:	4b88      	ldr	r3, [pc, #544]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d00c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c86:	4b85      	ldr	r3, [pc, #532]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d112      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c92:	4b82      	ldr	r3, [pc, #520]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05b      	beq.n	8004d64 <HAL_RCC_OscConfig+0x108>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d157      	bne.n	8004d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e242      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x74>
 8004cc2:	4b76      	ldr	r3, [pc, #472]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e01d      	b.n	8004d0c <HAL_RCC_OscConfig+0xb0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x98>
 8004cda:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6f      	ldr	r2, [pc, #444]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6c      	ldr	r2, [pc, #432]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0xb0>
 8004cf4:	4b69      	ldr	r3, [pc, #420]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b66      	ldr	r3, [pc, #408]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a65      	ldr	r2, [pc, #404]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d013      	beq.n	8004d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d14:	f7fd fc3a 	bl	800258c <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fd fc36 	bl	800258c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	@ 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e207      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0xc0>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fc26 	bl	800258c <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fd fc22 	bl	800258c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	@ 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e1f3      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d56:	4b51      	ldr	r3, [pc, #324]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0xe8>
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d063      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d72:	4b4a      	ldr	r3, [pc, #296]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b47      	ldr	r3, [pc, #284]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d11c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b44      	ldr	r3, [pc, #272]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	4b41      	ldr	r3, [pc, #260]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x152>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e1c7      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b3b      	ldr	r3, [pc, #236]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4937      	ldr	r1, [pc, #220]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	e03a      	b.n	8004e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dcc:	4b34      	ldr	r3, [pc, #208]	@ (8004ea0 <HAL_RCC_OscConfig+0x244>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fd fbdb 	bl	800258c <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fd fbd7 	bl	800258c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1a8      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b28      	ldr	r3, [pc, #160]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4925      	ldr	r1, [pc, #148]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	e015      	b.n	8004e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <HAL_RCC_OscConfig+0x244>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fbba 	bl	800258c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fd fbb6 	bl	800258c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e187      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d036      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <HAL_RCC_OscConfig+0x248>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd fb9a 	bl	800258c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fd fb96 	bl	800258c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e167      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x200>
 8004e7a:	e01b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ea4 <HAL_RCC_OscConfig+0x248>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e82:	f7fd fb83 	bl	800258c <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	e00e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fd fb7f 	bl	800258c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d907      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e150      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470000 	.word	0x42470000
 8004ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b88      	ldr	r3, [pc, #544]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ea      	bne.n	8004e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8097 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b81      	ldr	r3, [pc, #516]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b7d      	ldr	r3, [pc, #500]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	4a7c      	ldr	r2, [pc, #496]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b77      	ldr	r3, [pc, #476]	@ (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efe:	4b74      	ldr	r3, [pc, #464]	@ (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a73      	ldr	r2, [pc, #460]	@ (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fd fb3f 	bl	800258c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fd fb3b 	bl	800258c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e10c      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x2ea>
 8004f38:	4b64      	ldr	r3, [pc, #400]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3c:	4a63      	ldr	r2, [pc, #396]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f44:	e01c      	b.n	8004f80 <HAL_RCC_OscConfig+0x324>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x30c>
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f52:	4a5e      	ldr	r2, [pc, #376]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0x324>
 8004f68:	4b58      	ldr	r3, [pc, #352]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a57      	ldr	r2, [pc, #348]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	4b55      	ldr	r3, [pc, #340]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	4a54      	ldr	r2, [pc, #336]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fb00 	bl	800258c <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fd fafc 	bl	800258c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0cb      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa6:	4b49      	ldr	r3, [pc, #292]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ee      	beq.n	8004f90 <HAL_RCC_OscConfig+0x334>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb4:	f7fd faea 	bl	800258c <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fd fae6 	bl	800258c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0b5      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ee      	bne.n	8004fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	4a38      	ldr	r2, [pc, #224]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80a1 	beq.w	800513c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ffa:	4b34      	ldr	r3, [pc, #208]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d05c      	beq.n	80050c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d141      	bne.n	8005092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fd faba 	bl	800258c <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501c:	f7fd fab6 	bl	800258c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e087      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	4b27      	ldr	r3, [pc, #156]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	491b      	ldr	r1, [pc, #108]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b1b      	ldr	r3, [pc, #108]	@ (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fd fa8f 	bl	800258c <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005072:	f7fd fa8b 	bl	800258c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e05c      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005084:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x416>
 8005090:	e054      	b.n	800513c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fd fa78 	bl	800258c <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fd fa74 	bl	800258c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e045      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x444>
 80050be:	e03d      	b.n	800513c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e038      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <HAL_RCC_OscConfig+0x4ec>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d028      	beq.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d121      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d11a      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800510e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005110:	4293      	cmp	r3, r2
 8005112:	d111      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d107      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0cc      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005160:	4b68      	ldr	r3, [pc, #416]	@ (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d90c      	bls.n	8005188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b65      	ldr	r3, [pc, #404]	@ (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b63      	ldr	r3, [pc, #396]	@ (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b8      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a0:	4b59      	ldr	r3, [pc, #356]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a58      	ldr	r2, [pc, #352]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b8:	4b53      	ldr	r3, [pc, #332]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a52      	ldr	r2, [pc, #328]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c4:	4b50      	ldr	r3, [pc, #320]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	494d      	ldr	r1, [pc, #308]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d044      	beq.n	800526c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b47      	ldr	r3, [pc, #284]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d119      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e07f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d003      	beq.n	800520a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005206:	2b03      	cmp	r3, #3
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520a:	4b3f      	ldr	r3, [pc, #252]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e06f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521a:	4b3b      	ldr	r3, [pc, #236]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e067      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522a:	4b37      	ldr	r3, [pc, #220]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4934      	ldr	r1, [pc, #208]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	4313      	orrs	r3, r2
 800523a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800523c:	f7fd f9a6 	bl	800258c <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	e00a      	b.n	800525a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005244:	f7fd f9a2 	bl	800258c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e04f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525a:	4b2b      	ldr	r3, [pc, #172]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 020c 	and.w	r2, r3, #12
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	429a      	cmp	r2, r3
 800526a:	d1eb      	bne.n	8005244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800526c:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d20c      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b22      	ldr	r3, [pc, #136]	@ (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e032      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a0:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4916      	ldr	r1, [pc, #88]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052be:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	490e      	ldr	r1, [pc, #56]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052d2:	f000 f821 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	490a      	ldr	r1, [pc, #40]	@ (800530c <HAL_RCC_ClockConfig+0x1c0>)
 80052e4:	5ccb      	ldrb	r3, [r1, r3]
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a09      	ldr	r2, [pc, #36]	@ (8005310 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_ClockConfig+0x1c8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd f906 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023c00 	.word	0x40023c00
 8005308:	40023800 	.word	0x40023800
 800530c:	080099f0 	.word	0x080099f0
 8005310:	20000008 	.word	0x20000008
 8005314:	2000000c 	.word	0x2000000c

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b094      	sub	sp, #80	@ 0x50
 800531e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	647b      	str	r3, [r7, #68]	@ 0x44
 8005324:	2300      	movs	r3, #0
 8005326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005328:	2300      	movs	r3, #0
 800532a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005330:	4b79      	ldr	r3, [pc, #484]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d00d      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x40>
 800533c:	2b08      	cmp	r3, #8
 800533e:	f200 80e1 	bhi.w	8005504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x34>
 8005346:	2b04      	cmp	r3, #4
 8005348:	d003      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x3a>
 800534a:	e0db      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b73      	ldr	r3, [pc, #460]	@ (800551c <HAL_RCC_GetSysClockFreq+0x204>)
 800534e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005350:	e0db      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005352:	4b73      	ldr	r3, [pc, #460]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x208>)
 8005354:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005356:	e0d8      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005358:	4b6f      	ldr	r3, [pc, #444]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005362:	4b6d      	ldr	r3, [pc, #436]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d063      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536e:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	2200      	movs	r2, #0
 8005376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005378:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005380:	633b      	str	r3, [r7, #48]	@ 0x30
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
 8005386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	0159      	lsls	r1, r3, #5
 8005398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539c:	0150      	lsls	r0, r2, #5
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4621      	mov	r1, r4
 80053a4:	1a51      	subs	r1, r2, r1
 80053a6:	6139      	str	r1, [r7, #16]
 80053a8:	4629      	mov	r1, r5
 80053aa:	eb63 0301 	sbc.w	r3, r3, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053bc:	4659      	mov	r1, fp
 80053be:	018b      	lsls	r3, r1, #6
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053c6:	4651      	mov	r1, sl
 80053c8:	018a      	lsls	r2, r1, #6
 80053ca:	4651      	mov	r1, sl
 80053cc:	ebb2 0801 	subs.w	r8, r2, r1
 80053d0:	4659      	mov	r1, fp
 80053d2:	eb63 0901 	sbc.w	r9, r3, r1
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ea:	4690      	mov	r8, r2
 80053ec:	4699      	mov	r9, r3
 80053ee:	4623      	mov	r3, r4
 80053f0:	eb18 0303 	adds.w	r3, r8, r3
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	462b      	mov	r3, r5
 80053f8:	eb49 0303 	adc.w	r3, r9, r3
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800540a:	4629      	mov	r1, r5
 800540c:	024b      	lsls	r3, r1, #9
 800540e:	4621      	mov	r1, r4
 8005410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005414:	4621      	mov	r1, r4
 8005416:	024a      	lsls	r2, r1, #9
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541e:	2200      	movs	r2, #0
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005428:	f7fb fbc6 	bl	8000bb8 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4613      	mov	r3, r2
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	e058      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005436:	4b38      	ldr	r3, [pc, #224]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	2200      	movs	r2, #0
 800543e:	4618      	mov	r0, r3
 8005440:	4611      	mov	r1, r2
 8005442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	2300      	movs	r3, #0
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
 800544c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	0159      	lsls	r1, r3, #5
 800545e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005462:	0150      	lsls	r0, r2, #5
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4641      	mov	r1, r8
 800546a:	ebb2 0a01 	subs.w	sl, r2, r1
 800546e:	4649      	mov	r1, r9
 8005470:	eb63 0b01 	sbc.w	fp, r3, r1
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005488:	ebb2 040a 	subs.w	r4, r2, sl
 800548c:	eb63 050b 	sbc.w	r5, r3, fp
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	00eb      	lsls	r3, r5, #3
 800549a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549e:	00e2      	lsls	r2, r4, #3
 80054a0:	4614      	mov	r4, r2
 80054a2:	461d      	mov	r5, r3
 80054a4:	4643      	mov	r3, r8
 80054a6:	18e3      	adds	r3, r4, r3
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	464b      	mov	r3, r9
 80054ac:	eb45 0303 	adc.w	r3, r5, r3
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054be:	4629      	mov	r1, r5
 80054c0:	028b      	lsls	r3, r1, #10
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c8:	4621      	mov	r1, r4
 80054ca:	028a      	lsls	r2, r1, #10
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d2:	2200      	movs	r2, #0
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	61fa      	str	r2, [r7, #28]
 80054d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054dc:	f7fb fb6c 	bl	8000bb8 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005502:	e002      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b05      	ldr	r3, [pc, #20]	@ (800551c <HAL_RCC_GetSysClockFreq+0x204>)
 8005506:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800550c:	4618      	mov	r0, r3
 800550e:	3750      	adds	r7, #80	@ 0x50
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	00f42400 	.word	0x00f42400
 8005520:	007a1200 	.word	0x007a1200

08005524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005528:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <HAL_RCC_GetHCLKFreq+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000008 	.word	0x20000008

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff0 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	@ (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	@ (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	08009a00 	.word	0x08009a00

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffdc 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0b5b      	lsrs	r3, r3, #13
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	@ (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	08009a00 	.word	0x08009a00

0800558c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e041      	b.n	8005622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fc fe8c 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f000 fa10 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e041      	b.n	80056c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f839 	bl	80056c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f000 f9c1 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0ae      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	f200 809f 	bhi.w	8005848 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800570a:	a201      	add	r2, pc, #4	@ (adr r2, 8005710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005745 	.word	0x08005745
 8005714:	08005849 	.word	0x08005849
 8005718:	08005849 	.word	0x08005849
 800571c:	08005849 	.word	0x08005849
 8005720:	08005785 	.word	0x08005785
 8005724:	08005849 	.word	0x08005849
 8005728:	08005849 	.word	0x08005849
 800572c:	08005849 	.word	0x08005849
 8005730:	080057c7 	.word	0x080057c7
 8005734:	08005849 	.word	0x08005849
 8005738:	08005849 	.word	0x08005849
 800573c:	08005849 	.word	0x08005849
 8005740:	08005807 	.word	0x08005807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f9d0 	bl	8005af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0204 	bic.w	r2, r2, #4
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	619a      	str	r2, [r3, #24]
      break;
 8005782:	e064      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fa16 	bl	8005bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800579e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6999      	ldr	r1, [r3, #24]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	619a      	str	r2, [r3, #24]
      break;
 80057c4:	e043      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fa61 	bl	8005c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0208 	orr.w	r2, r2, #8
 80057e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0204 	bic.w	r2, r2, #4
 80057f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	61da      	str	r2, [r3, #28]
      break;
 8005804:	e023      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 faab 	bl	8005d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	021a      	lsls	r2, r3, #8
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	61da      	str	r2, [r3, #28]
      break;
 8005846:	e002      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
      break;
 800584c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_TIM_ConfigClockSource+0x1c>
 8005878:	2302      	movs	r3, #2
 800587a:	e0b4      	b.n	80059e6 <HAL_TIM_ConfigClockSource+0x186>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800589a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b4:	d03e      	beq.n	8005934 <HAL_TIM_ConfigClockSource+0xd4>
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ba:	f200 8087 	bhi.w	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c2:	f000 8086 	beq.w	80059d2 <HAL_TIM_ConfigClockSource+0x172>
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ca:	d87f      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b70      	cmp	r3, #112	@ 0x70
 80058ce:	d01a      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0xa6>
 80058d0:	2b70      	cmp	r3, #112	@ 0x70
 80058d2:	d87b      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b60      	cmp	r3, #96	@ 0x60
 80058d6:	d050      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x11a>
 80058d8:	2b60      	cmp	r3, #96	@ 0x60
 80058da:	d877      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b50      	cmp	r3, #80	@ 0x50
 80058de:	d03c      	beq.n	800595a <HAL_TIM_ConfigClockSource+0xfa>
 80058e0:	2b50      	cmp	r3, #80	@ 0x50
 80058e2:	d873      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d058      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x13a>
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d86f      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b30      	cmp	r3, #48	@ 0x30
 80058ee:	d064      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	2b30      	cmp	r3, #48	@ 0x30
 80058f2:	d86b      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d060      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x15a>
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d867      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05c      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x15a>
 8005900:	2b10      	cmp	r3, #16
 8005902:	d05a      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x15a>
 8005904:	e062      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6899      	ldr	r1, [r3, #8]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f000 faf1 	bl	8005efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	609a      	str	r2, [r3, #8]
      break;
 8005932:	e04f      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6899      	ldr	r1, [r3, #8]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f000 fada 	bl	8005efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005956:	609a      	str	r2, [r3, #8]
      break;
 8005958:	e03c      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	461a      	mov	r2, r3
 8005968:	f000 fa4e 	bl	8005e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2150      	movs	r1, #80	@ 0x50
 8005972:	4618      	mov	r0, r3
 8005974:	f000 faa7 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 8005978:	e02c      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fa6d 	bl	8005e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2160      	movs	r1, #96	@ 0x60
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fa97 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 8005998:	e01c      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 fa2e 	bl	8005e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2140      	movs	r1, #64	@ 0x40
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fa87 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 80059b8:	e00c      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f000 fa7e 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 80059ca:	e003      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
      break;
 80059d0:	e000      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a34      	ldr	r2, [pc, #208]	@ (8005ad4 <TIM_Base_SetConfig+0xe4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00f      	beq.n	8005a28 <TIM_Base_SetConfig+0x38>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x38>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a31      	ldr	r2, [pc, #196]	@ (8005ad8 <TIM_Base_SetConfig+0xe8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x38>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a30      	ldr	r2, [pc, #192]	@ (8005adc <TIM_Base_SetConfig+0xec>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x38>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae0 <TIM_Base_SetConfig+0xf0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a25      	ldr	r2, [pc, #148]	@ (8005ad4 <TIM_Base_SetConfig+0xe4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01b      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a48:	d017      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	@ (8005ad8 <TIM_Base_SetConfig+0xe8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a21      	ldr	r2, [pc, #132]	@ (8005adc <TIM_Base_SetConfig+0xec>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00f      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	@ (8005ae0 <TIM_Base_SetConfig+0xf0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00b      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <TIM_Base_SetConfig+0xf4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d007      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae8 <TIM_Base_SetConfig+0xf8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_Base_SetConfig+0x8a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1d      	ldr	r2, [pc, #116]	@ (8005aec <TIM_Base_SetConfig+0xfc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d108      	bne.n	8005a8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a08      	ldr	r2, [pc, #32]	@ (8005ad4 <TIM_Base_SetConfig+0xe4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0201 	bic.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f023 0302 	bic.w	r3, r3, #2
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb8 <TIM_OC1_SetConfig+0xc8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10c      	bne.n	8005b66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0308 	bic.w	r3, r3, #8
 8005b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a13      	ldr	r2, [pc, #76]	@ (8005bb8 <TIM_OC1_SetConfig+0xc8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d111      	bne.n	8005b92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40010000 	.word	0x40010000

08005bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0210 	bic.w	r2, r3, #16
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0320 	bic.w	r3, r3, #32
 8005c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <TIM_OC2_SetConfig+0xd4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10d      	bne.n	8005c38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	@ (8005c90 <TIM_OC2_SetConfig+0xd4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d113      	bne.n	8005c68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40010000 	.word	0x40010000

08005c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1d      	ldr	r2, [pc, #116]	@ (8005d64 <TIM_OC3_SetConfig+0xd0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10d      	bne.n	8005d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a14      	ldr	r2, [pc, #80]	@ (8005d64 <TIM_OC3_SetConfig+0xd0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d113      	bne.n	8005d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40010000 	.word	0x40010000

08005d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	031b      	lsls	r3, r3, #12
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a10      	ldr	r2, [pc, #64]	@ (8005e04 <TIM_OC4_SetConfig+0x9c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d109      	bne.n	8005ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	019b      	lsls	r3, r3, #6
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000

08005e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 030a 	bic.w	r3, r3, #10
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0210 	bic.w	r2, r3, #16
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f043 0307 	orr.w	r3, r3, #7
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	021a      	lsls	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e050      	b.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1c      	ldr	r2, [pc, #112]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d018      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa0:	d013      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a16      	ldr	r2, [pc, #88]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a15      	ldr	r2, [pc, #84]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a13      	ldr	r2, [pc, #76]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000

08006018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e03f      	b.n	80060aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fc f9cc 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	@ 0x24
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800605a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f829 	bl	80060b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b8:	b0c0      	sub	sp, #256	@ 0x100
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	ea40 0301 	orr.w	r3, r0, r1
 80060dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800610c:	f021 010c 	bic.w	r1, r1, #12
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800611a:	430b      	orrs	r3, r1
 800611c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	6999      	ldr	r1, [r3, #24]
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	ea40 0301 	orr.w	r3, r0, r1
 800613a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b8f      	ldr	r3, [pc, #572]	@ (8006380 <UART_SetConfig+0x2cc>)
 8006144:	429a      	cmp	r2, r3
 8006146:	d005      	beq.n	8006154 <UART_SetConfig+0xa0>
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b8d      	ldr	r3, [pc, #564]	@ (8006384 <UART_SetConfig+0x2d0>)
 8006150:	429a      	cmp	r2, r3
 8006152:	d104      	bne.n	800615e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7ff fa06 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800615c:	e003      	b.n	8006166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800615e:	f7ff f9ed 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006170:	f040 810c 	bne.w	800638c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800617e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006186:	4622      	mov	r2, r4
 8006188:	462b      	mov	r3, r5
 800618a:	1891      	adds	r1, r2, r2
 800618c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800618e:	415b      	adcs	r3, r3
 8006190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006196:	4621      	mov	r1, r4
 8006198:	eb12 0801 	adds.w	r8, r2, r1
 800619c:	4629      	mov	r1, r5
 800619e:	eb43 0901 	adc.w	r9, r3, r1
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061b6:	4690      	mov	r8, r2
 80061b8:	4699      	mov	r9, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	eb18 0303 	adds.w	r3, r8, r3
 80061c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061c4:	462b      	mov	r3, r5
 80061c6:	eb49 0303 	adc.w	r3, r9, r3
 80061ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061e2:	460b      	mov	r3, r1
 80061e4:	18db      	adds	r3, r3, r3
 80061e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e8:	4613      	mov	r3, r2
 80061ea:	eb42 0303 	adc.w	r3, r2, r3
 80061ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80061f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061f8:	f7fa fcde 	bl	8000bb8 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4b61      	ldr	r3, [pc, #388]	@ (8006388 <UART_SetConfig+0x2d4>)
 8006202:	fba3 2302 	umull	r2, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	011c      	lsls	r4, r3, #4
 800620a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	1891      	adds	r1, r2, r2
 8006222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006224:	415b      	adcs	r3, r3
 8006226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800622c:	4641      	mov	r1, r8
 800622e:	eb12 0a01 	adds.w	sl, r2, r1
 8006232:	4649      	mov	r1, r9
 8006234:	eb43 0b01 	adc.w	fp, r3, r1
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800624c:	4692      	mov	sl, r2
 800624e:	469b      	mov	fp, r3
 8006250:	4643      	mov	r3, r8
 8006252:	eb1a 0303 	adds.w	r3, sl, r3
 8006256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800625a:	464b      	mov	r3, r9
 800625c:	eb4b 0303 	adc.w	r3, fp, r3
 8006260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006278:	460b      	mov	r3, r1
 800627a:	18db      	adds	r3, r3, r3
 800627c:	643b      	str	r3, [r7, #64]	@ 0x40
 800627e:	4613      	mov	r3, r2
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	647b      	str	r3, [r7, #68]	@ 0x44
 8006286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800628a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800628e:	f7fa fc93 	bl	8000bb8 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4611      	mov	r1, r2
 8006298:	4b3b      	ldr	r3, [pc, #236]	@ (8006388 <UART_SetConfig+0x2d4>)
 800629a:	fba3 2301 	umull	r2, r3, r3, r1
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2264      	movs	r2, #100	@ 0x64
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	1acb      	subs	r3, r1, r3
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062ae:	4b36      	ldr	r3, [pc, #216]	@ (8006388 <UART_SetConfig+0x2d4>)
 80062b0:	fba3 2302 	umull	r2, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062bc:	441c      	add	r4, r3
 80062be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	1891      	adds	r1, r2, r2
 80062d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062d8:	415b      	adcs	r3, r3
 80062da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062e0:	4641      	mov	r1, r8
 80062e2:	1851      	adds	r1, r2, r1
 80062e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80062e6:	4649      	mov	r1, r9
 80062e8:	414b      	adcs	r3, r1
 80062ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062f8:	4659      	mov	r1, fp
 80062fa:	00cb      	lsls	r3, r1, #3
 80062fc:	4651      	mov	r1, sl
 80062fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006302:	4651      	mov	r1, sl
 8006304:	00ca      	lsls	r2, r1, #3
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	4603      	mov	r3, r0
 800630c:	4642      	mov	r2, r8
 800630e:	189b      	adds	r3, r3, r2
 8006310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006314:	464b      	mov	r3, r9
 8006316:	460a      	mov	r2, r1
 8006318:	eb42 0303 	adc.w	r3, r2, r3
 800631c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800632c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006334:	460b      	mov	r3, r1
 8006336:	18db      	adds	r3, r3, r3
 8006338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800633a:	4613      	mov	r3, r2
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800634a:	f7fa fc35 	bl	8000bb8 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <UART_SetConfig+0x2d4>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	@ 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	3332      	adds	r3, #50	@ 0x32
 8006366:	4a08      	ldr	r2, [pc, #32]	@ (8006388 <UART_SetConfig+0x2d4>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 0207 	and.w	r2, r3, #7
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4422      	add	r2, r4
 800637a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800637c:	e106      	b.n	800658c <UART_SetConfig+0x4d8>
 800637e:	bf00      	nop
 8006380:	40011000 	.word	0x40011000
 8006384:	40011400 	.word	0x40011400
 8006388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800639a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800639e:	4642      	mov	r2, r8
 80063a0:	464b      	mov	r3, r9
 80063a2:	1891      	adds	r1, r2, r2
 80063a4:	6239      	str	r1, [r7, #32]
 80063a6:	415b      	adcs	r3, r3
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ae:	4641      	mov	r1, r8
 80063b0:	1854      	adds	r4, r2, r1
 80063b2:	4649      	mov	r1, r9
 80063b4:	eb43 0501 	adc.w	r5, r3, r1
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	00eb      	lsls	r3, r5, #3
 80063c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063c6:	00e2      	lsls	r2, r4, #3
 80063c8:	4614      	mov	r4, r2
 80063ca:	461d      	mov	r5, r3
 80063cc:	4643      	mov	r3, r8
 80063ce:	18e3      	adds	r3, r4, r3
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063d4:	464b      	mov	r3, r9
 80063d6:	eb45 0303 	adc.w	r3, r5, r3
 80063da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063fa:	4629      	mov	r1, r5
 80063fc:	008b      	lsls	r3, r1, #2
 80063fe:	4621      	mov	r1, r4
 8006400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006404:	4621      	mov	r1, r4
 8006406:	008a      	lsls	r2, r1, #2
 8006408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800640c:	f7fa fbd4 	bl	8000bb8 <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4b60      	ldr	r3, [pc, #384]	@ (8006598 <UART_SetConfig+0x4e4>)
 8006416:	fba3 2302 	umull	r2, r3, r3, r2
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	011c      	lsls	r4, r3, #4
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006422:	2200      	movs	r2, #0
 8006424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800642c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	1891      	adds	r1, r2, r2
 8006436:	61b9      	str	r1, [r7, #24]
 8006438:	415b      	adcs	r3, r3
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006440:	4641      	mov	r1, r8
 8006442:	1851      	adds	r1, r2, r1
 8006444:	6139      	str	r1, [r7, #16]
 8006446:	4649      	mov	r1, r9
 8006448:	414b      	adcs	r3, r1
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006458:	4659      	mov	r1, fp
 800645a:	00cb      	lsls	r3, r1, #3
 800645c:	4651      	mov	r1, sl
 800645e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006462:	4651      	mov	r1, sl
 8006464:	00ca      	lsls	r2, r1, #3
 8006466:	4610      	mov	r0, r2
 8006468:	4619      	mov	r1, r3
 800646a:	4603      	mov	r3, r0
 800646c:	4642      	mov	r2, r8
 800646e:	189b      	adds	r3, r3, r2
 8006470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006474:	464b      	mov	r3, r9
 8006476:	460a      	mov	r2, r1
 8006478:	eb42 0303 	adc.w	r3, r2, r3
 800647c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800648a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006498:	4649      	mov	r1, r9
 800649a:	008b      	lsls	r3, r1, #2
 800649c:	4641      	mov	r1, r8
 800649e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a2:	4641      	mov	r1, r8
 80064a4:	008a      	lsls	r2, r1, #2
 80064a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064aa:	f7fa fb85 	bl	8000bb8 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	4b38      	ldr	r3, [pc, #224]	@ (8006598 <UART_SetConfig+0x4e4>)
 80064b6:	fba3 2301 	umull	r2, r3, r3, r1
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2264      	movs	r2, #100	@ 0x64
 80064be:	fb02 f303 	mul.w	r3, r2, r3
 80064c2:	1acb      	subs	r3, r1, r3
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	3332      	adds	r3, #50	@ 0x32
 80064c8:	4a33      	ldr	r2, [pc, #204]	@ (8006598 <UART_SetConfig+0x4e4>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064d4:	441c      	add	r4, r3
 80064d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064da:	2200      	movs	r2, #0
 80064dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80064de:	677a      	str	r2, [r7, #116]	@ 0x74
 80064e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064e4:	4642      	mov	r2, r8
 80064e6:	464b      	mov	r3, r9
 80064e8:	1891      	adds	r1, r2, r2
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	415b      	adcs	r3, r3
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f4:	4641      	mov	r1, r8
 80064f6:	1851      	adds	r1, r2, r1
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	4649      	mov	r1, r9
 80064fc:	414b      	adcs	r3, r1
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800650c:	4659      	mov	r1, fp
 800650e:	00cb      	lsls	r3, r1, #3
 8006510:	4651      	mov	r1, sl
 8006512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006516:	4651      	mov	r1, sl
 8006518:	00ca      	lsls	r2, r1, #3
 800651a:	4610      	mov	r0, r2
 800651c:	4619      	mov	r1, r3
 800651e:	4603      	mov	r3, r0
 8006520:	4642      	mov	r2, r8
 8006522:	189b      	adds	r3, r3, r2
 8006524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006526:	464b      	mov	r3, r9
 8006528:	460a      	mov	r2, r1
 800652a:	eb42 0303 	adc.w	r3, r2, r3
 800652e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	663b      	str	r3, [r7, #96]	@ 0x60
 800653a:	667a      	str	r2, [r7, #100]	@ 0x64
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006548:	4649      	mov	r1, r9
 800654a:	008b      	lsls	r3, r1, #2
 800654c:	4641      	mov	r1, r8
 800654e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006552:	4641      	mov	r1, r8
 8006554:	008a      	lsls	r2, r1, #2
 8006556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800655a:	f7fa fb2d 	bl	8000bb8 <__aeabi_uldivmod>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <UART_SetConfig+0x4e4>)
 8006564:	fba3 1302 	umull	r1, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	2164      	movs	r1, #100	@ 0x64
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	3332      	adds	r3, #50	@ 0x32
 8006576:	4a08      	ldr	r2, [pc, #32]	@ (8006598 <UART_SetConfig+0x4e4>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4422      	add	r2, r4
 800658a:	609a      	str	r2, [r3, #8]
}
 800658c:	bf00      	nop
 800658e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006592:	46bd      	mov	sp, r7
 8006594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006598:	51eb851f 	.word	0x51eb851f

0800659c <__cvt>:
 800659c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	ec57 6b10 	vmov	r6, r7, d0
 80065a4:	2f00      	cmp	r7, #0
 80065a6:	460c      	mov	r4, r1
 80065a8:	4619      	mov	r1, r3
 80065aa:	463b      	mov	r3, r7
 80065ac:	bfbb      	ittet	lt
 80065ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065b2:	461f      	movlt	r7, r3
 80065b4:	2300      	movge	r3, #0
 80065b6:	232d      	movlt	r3, #45	@ 0x2d
 80065b8:	700b      	strb	r3, [r1, #0]
 80065ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065c0:	4691      	mov	r9, r2
 80065c2:	f023 0820 	bic.w	r8, r3, #32
 80065c6:	bfbc      	itt	lt
 80065c8:	4632      	movlt	r2, r6
 80065ca:	4616      	movlt	r6, r2
 80065cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065d0:	d005      	beq.n	80065de <__cvt+0x42>
 80065d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065d6:	d100      	bne.n	80065da <__cvt+0x3e>
 80065d8:	3401      	adds	r4, #1
 80065da:	2102      	movs	r1, #2
 80065dc:	e000      	b.n	80065e0 <__cvt+0x44>
 80065de:	2103      	movs	r1, #3
 80065e0:	ab03      	add	r3, sp, #12
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	ab02      	add	r3, sp, #8
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	ec47 6b10 	vmov	d0, r6, r7
 80065ec:	4653      	mov	r3, sl
 80065ee:	4622      	mov	r2, r4
 80065f0:	f000 fe6e 	bl	80072d0 <_dtoa_r>
 80065f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065f8:	4605      	mov	r5, r0
 80065fa:	d119      	bne.n	8006630 <__cvt+0x94>
 80065fc:	f019 0f01 	tst.w	r9, #1
 8006600:	d00e      	beq.n	8006620 <__cvt+0x84>
 8006602:	eb00 0904 	add.w	r9, r0, r4
 8006606:	2200      	movs	r2, #0
 8006608:	2300      	movs	r3, #0
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7fa fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 8006612:	b108      	cbz	r0, 8006618 <__cvt+0x7c>
 8006614:	f8cd 900c 	str.w	r9, [sp, #12]
 8006618:	2230      	movs	r2, #48	@ 0x30
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	454b      	cmp	r3, r9
 800661e:	d31e      	bcc.n	800665e <__cvt+0xc2>
 8006620:	9b03      	ldr	r3, [sp, #12]
 8006622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006624:	1b5b      	subs	r3, r3, r5
 8006626:	4628      	mov	r0, r5
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	b004      	add	sp, #16
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006634:	eb00 0904 	add.w	r9, r0, r4
 8006638:	d1e5      	bne.n	8006606 <__cvt+0x6a>
 800663a:	7803      	ldrb	r3, [r0, #0]
 800663c:	2b30      	cmp	r3, #48	@ 0x30
 800663e:	d10a      	bne.n	8006656 <__cvt+0xba>
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	4630      	mov	r0, r6
 8006646:	4639      	mov	r1, r7
 8006648:	f7fa fa46 	bl	8000ad8 <__aeabi_dcmpeq>
 800664c:	b918      	cbnz	r0, 8006656 <__cvt+0xba>
 800664e:	f1c4 0401 	rsb	r4, r4, #1
 8006652:	f8ca 4000 	str.w	r4, [sl]
 8006656:	f8da 3000 	ldr.w	r3, [sl]
 800665a:	4499      	add	r9, r3
 800665c:	e7d3      	b.n	8006606 <__cvt+0x6a>
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	9103      	str	r1, [sp, #12]
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	e7d9      	b.n	800661a <__cvt+0x7e>

08006666 <__exponent>:
 8006666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006668:	2900      	cmp	r1, #0
 800666a:	bfba      	itte	lt
 800666c:	4249      	neglt	r1, r1
 800666e:	232d      	movlt	r3, #45	@ 0x2d
 8006670:	232b      	movge	r3, #43	@ 0x2b
 8006672:	2909      	cmp	r1, #9
 8006674:	7002      	strb	r2, [r0, #0]
 8006676:	7043      	strb	r3, [r0, #1]
 8006678:	dd29      	ble.n	80066ce <__exponent+0x68>
 800667a:	f10d 0307 	add.w	r3, sp, #7
 800667e:	461d      	mov	r5, r3
 8006680:	270a      	movs	r7, #10
 8006682:	461a      	mov	r2, r3
 8006684:	fbb1 f6f7 	udiv	r6, r1, r7
 8006688:	fb07 1416 	mls	r4, r7, r6, r1
 800668c:	3430      	adds	r4, #48	@ 0x30
 800668e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006692:	460c      	mov	r4, r1
 8006694:	2c63      	cmp	r4, #99	@ 0x63
 8006696:	f103 33ff 	add.w	r3, r3, #4294967295
 800669a:	4631      	mov	r1, r6
 800669c:	dcf1      	bgt.n	8006682 <__exponent+0x1c>
 800669e:	3130      	adds	r1, #48	@ 0x30
 80066a0:	1e94      	subs	r4, r2, #2
 80066a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066a6:	1c41      	adds	r1, r0, #1
 80066a8:	4623      	mov	r3, r4
 80066aa:	42ab      	cmp	r3, r5
 80066ac:	d30a      	bcc.n	80066c4 <__exponent+0x5e>
 80066ae:	f10d 0309 	add.w	r3, sp, #9
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	42ac      	cmp	r4, r5
 80066b6:	bf88      	it	hi
 80066b8:	2300      	movhi	r3, #0
 80066ba:	3302      	adds	r3, #2
 80066bc:	4403      	add	r3, r0
 80066be:	1a18      	subs	r0, r3, r0
 80066c0:	b003      	add	sp, #12
 80066c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066cc:	e7ed      	b.n	80066aa <__exponent+0x44>
 80066ce:	2330      	movs	r3, #48	@ 0x30
 80066d0:	3130      	adds	r1, #48	@ 0x30
 80066d2:	7083      	strb	r3, [r0, #2]
 80066d4:	70c1      	strb	r1, [r0, #3]
 80066d6:	1d03      	adds	r3, r0, #4
 80066d8:	e7f1      	b.n	80066be <__exponent+0x58>
	...

080066dc <_printf_float>:
 80066dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e0:	b08d      	sub	sp, #52	@ 0x34
 80066e2:	460c      	mov	r4, r1
 80066e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066e8:	4616      	mov	r6, r2
 80066ea:	461f      	mov	r7, r3
 80066ec:	4605      	mov	r5, r0
 80066ee:	f000 fcef 	bl	80070d0 <_localeconv_r>
 80066f2:	6803      	ldr	r3, [r0, #0]
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7f9 fdc2 	bl	8000280 <strlen>
 80066fc:	2300      	movs	r3, #0
 80066fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006700:	f8d8 3000 	ldr.w	r3, [r8]
 8006704:	9005      	str	r0, [sp, #20]
 8006706:	3307      	adds	r3, #7
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	f103 0208 	add.w	r2, r3, #8
 8006710:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006714:	f8d4 b000 	ldr.w	fp, [r4]
 8006718:	f8c8 2000 	str.w	r2, [r8]
 800671c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006720:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006724:	9307      	str	r3, [sp, #28]
 8006726:	f8cd 8018 	str.w	r8, [sp, #24]
 800672a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800672e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006732:	4b9c      	ldr	r3, [pc, #624]	@ (80069a4 <_printf_float+0x2c8>)
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	f7fa fa00 	bl	8000b3c <__aeabi_dcmpun>
 800673c:	bb70      	cbnz	r0, 800679c <_printf_float+0xc0>
 800673e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006742:	4b98      	ldr	r3, [pc, #608]	@ (80069a4 <_printf_float+0x2c8>)
 8006744:	f04f 32ff 	mov.w	r2, #4294967295
 8006748:	f7fa f9da 	bl	8000b00 <__aeabi_dcmple>
 800674c:	bb30      	cbnz	r0, 800679c <_printf_float+0xc0>
 800674e:	2200      	movs	r2, #0
 8006750:	2300      	movs	r3, #0
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7fa f9c9 	bl	8000aec <__aeabi_dcmplt>
 800675a:	b110      	cbz	r0, 8006762 <_printf_float+0x86>
 800675c:	232d      	movs	r3, #45	@ 0x2d
 800675e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006762:	4a91      	ldr	r2, [pc, #580]	@ (80069a8 <_printf_float+0x2cc>)
 8006764:	4b91      	ldr	r3, [pc, #580]	@ (80069ac <_printf_float+0x2d0>)
 8006766:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800676a:	bf94      	ite	ls
 800676c:	4690      	movls	r8, r2
 800676e:	4698      	movhi	r8, r3
 8006770:	2303      	movs	r3, #3
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	f02b 0304 	bic.w	r3, fp, #4
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	f04f 0900 	mov.w	r9, #0
 800677e:	9700      	str	r7, [sp, #0]
 8006780:	4633      	mov	r3, r6
 8006782:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f9d2 	bl	8006b30 <_printf_common>
 800678c:	3001      	adds	r0, #1
 800678e:	f040 808d 	bne.w	80068ac <_printf_float+0x1d0>
 8006792:	f04f 30ff 	mov.w	r0, #4294967295
 8006796:	b00d      	add	sp, #52	@ 0x34
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	f7fa f9ca 	bl	8000b3c <__aeabi_dcmpun>
 80067a8:	b140      	cbz	r0, 80067bc <_printf_float+0xe0>
 80067aa:	464b      	mov	r3, r9
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfbc      	itt	lt
 80067b0:	232d      	movlt	r3, #45	@ 0x2d
 80067b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067b6:	4a7e      	ldr	r2, [pc, #504]	@ (80069b0 <_printf_float+0x2d4>)
 80067b8:	4b7e      	ldr	r3, [pc, #504]	@ (80069b4 <_printf_float+0x2d8>)
 80067ba:	e7d4      	b.n	8006766 <_printf_float+0x8a>
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067c2:	9206      	str	r2, [sp, #24]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	d13b      	bne.n	8006840 <_printf_float+0x164>
 80067c8:	2306      	movs	r3, #6
 80067ca:	6063      	str	r3, [r4, #4]
 80067cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067d0:	2300      	movs	r3, #0
 80067d2:	6022      	str	r2, [r4, #0]
 80067d4:	9303      	str	r3, [sp, #12]
 80067d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80067d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067dc:	ab09      	add	r3, sp, #36	@ 0x24
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	6861      	ldr	r1, [r4, #4]
 80067e2:	ec49 8b10 	vmov	d0, r8, r9
 80067e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067ea:	4628      	mov	r0, r5
 80067ec:	f7ff fed6 	bl	800659c <__cvt>
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067f4:	2b47      	cmp	r3, #71	@ 0x47
 80067f6:	4680      	mov	r8, r0
 80067f8:	d129      	bne.n	800684e <_printf_float+0x172>
 80067fa:	1cc8      	adds	r0, r1, #3
 80067fc:	db02      	blt.n	8006804 <_printf_float+0x128>
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	4299      	cmp	r1, r3
 8006802:	dd41      	ble.n	8006888 <_printf_float+0x1ac>
 8006804:	f1aa 0a02 	sub.w	sl, sl, #2
 8006808:	fa5f fa8a 	uxtb.w	sl, sl
 800680c:	3901      	subs	r1, #1
 800680e:	4652      	mov	r2, sl
 8006810:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006814:	9109      	str	r1, [sp, #36]	@ 0x24
 8006816:	f7ff ff26 	bl	8006666 <__exponent>
 800681a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800681c:	1813      	adds	r3, r2, r0
 800681e:	2a01      	cmp	r2, #1
 8006820:	4681      	mov	r9, r0
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	dc02      	bgt.n	800682c <_printf_float+0x150>
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	07d2      	lsls	r2, r2, #31
 800682a:	d501      	bpl.n	8006830 <_printf_float+0x154>
 800682c:	3301      	adds	r3, #1
 800682e:	6123      	str	r3, [r4, #16]
 8006830:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0a2      	beq.n	800677e <_printf_float+0xa2>
 8006838:	232d      	movs	r3, #45	@ 0x2d
 800683a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683e:	e79e      	b.n	800677e <_printf_float+0xa2>
 8006840:	9a06      	ldr	r2, [sp, #24]
 8006842:	2a47      	cmp	r2, #71	@ 0x47
 8006844:	d1c2      	bne.n	80067cc <_printf_float+0xf0>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1c0      	bne.n	80067cc <_printf_float+0xf0>
 800684a:	2301      	movs	r3, #1
 800684c:	e7bd      	b.n	80067ca <_printf_float+0xee>
 800684e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006852:	d9db      	bls.n	800680c <_printf_float+0x130>
 8006854:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006858:	d118      	bne.n	800688c <_printf_float+0x1b0>
 800685a:	2900      	cmp	r1, #0
 800685c:	6863      	ldr	r3, [r4, #4]
 800685e:	dd0b      	ble.n	8006878 <_printf_float+0x19c>
 8006860:	6121      	str	r1, [r4, #16]
 8006862:	b913      	cbnz	r3, 800686a <_printf_float+0x18e>
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	07d0      	lsls	r0, r2, #31
 8006868:	d502      	bpl.n	8006870 <_printf_float+0x194>
 800686a:	3301      	adds	r3, #1
 800686c:	440b      	add	r3, r1
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	e7db      	b.n	8006830 <_printf_float+0x154>
 8006878:	b913      	cbnz	r3, 8006880 <_printf_float+0x1a4>
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	07d2      	lsls	r2, r2, #31
 800687e:	d501      	bpl.n	8006884 <_printf_float+0x1a8>
 8006880:	3302      	adds	r3, #2
 8006882:	e7f4      	b.n	800686e <_printf_float+0x192>
 8006884:	2301      	movs	r3, #1
 8006886:	e7f2      	b.n	800686e <_printf_float+0x192>
 8006888:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800688c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800688e:	4299      	cmp	r1, r3
 8006890:	db05      	blt.n	800689e <_printf_float+0x1c2>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	6121      	str	r1, [r4, #16]
 8006896:	07d8      	lsls	r0, r3, #31
 8006898:	d5ea      	bpl.n	8006870 <_printf_float+0x194>
 800689a:	1c4b      	adds	r3, r1, #1
 800689c:	e7e7      	b.n	800686e <_printf_float+0x192>
 800689e:	2900      	cmp	r1, #0
 80068a0:	bfd4      	ite	le
 80068a2:	f1c1 0202 	rsble	r2, r1, #2
 80068a6:	2201      	movgt	r2, #1
 80068a8:	4413      	add	r3, r2
 80068aa:	e7e0      	b.n	800686e <_printf_float+0x192>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	055a      	lsls	r2, r3, #21
 80068b0:	d407      	bmi.n	80068c2 <_printf_float+0x1e6>
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	4642      	mov	r2, r8
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	d12b      	bne.n	8006918 <_printf_float+0x23c>
 80068c0:	e767      	b.n	8006792 <_printf_float+0xb6>
 80068c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068c6:	f240 80dd 	bls.w	8006a84 <_printf_float+0x3a8>
 80068ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068ce:	2200      	movs	r2, #0
 80068d0:	2300      	movs	r3, #0
 80068d2:	f7fa f901 	bl	8000ad8 <__aeabi_dcmpeq>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d033      	beq.n	8006942 <_printf_float+0x266>
 80068da:	4a37      	ldr	r2, [pc, #220]	@ (80069b8 <_printf_float+0x2dc>)
 80068dc:	2301      	movs	r3, #1
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f af54 	beq.w	8006792 <_printf_float+0xb6>
 80068ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068ee:	4543      	cmp	r3, r8
 80068f0:	db02      	blt.n	80068f8 <_printf_float+0x21c>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07d8      	lsls	r0, r3, #31
 80068f6:	d50f      	bpl.n	8006918 <_printf_float+0x23c>
 80068f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af45 	beq.w	8006792 <_printf_float+0xb6>
 8006908:	f04f 0900 	mov.w	r9, #0
 800690c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006910:	f104 0a1a 	add.w	sl, r4, #26
 8006914:	45c8      	cmp	r8, r9
 8006916:	dc09      	bgt.n	800692c <_printf_float+0x250>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	079b      	lsls	r3, r3, #30
 800691c:	f100 8103 	bmi.w	8006b26 <_printf_float+0x44a>
 8006920:	68e0      	ldr	r0, [r4, #12]
 8006922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006924:	4298      	cmp	r0, r3
 8006926:	bfb8      	it	lt
 8006928:	4618      	movlt	r0, r3
 800692a:	e734      	b.n	8006796 <_printf_float+0xba>
 800692c:	2301      	movs	r3, #1
 800692e:	4652      	mov	r2, sl
 8006930:	4631      	mov	r1, r6
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	f43f af2b 	beq.w	8006792 <_printf_float+0xb6>
 800693c:	f109 0901 	add.w	r9, r9, #1
 8006940:	e7e8      	b.n	8006914 <_printf_float+0x238>
 8006942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	dc39      	bgt.n	80069bc <_printf_float+0x2e0>
 8006948:	4a1b      	ldr	r2, [pc, #108]	@ (80069b8 <_printf_float+0x2dc>)
 800694a:	2301      	movs	r3, #1
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	f43f af1d 	beq.w	8006792 <_printf_float+0xb6>
 8006958:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800695c:	ea59 0303 	orrs.w	r3, r9, r3
 8006960:	d102      	bne.n	8006968 <_printf_float+0x28c>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	07d9      	lsls	r1, r3, #31
 8006966:	d5d7      	bpl.n	8006918 <_printf_float+0x23c>
 8006968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f af0d 	beq.w	8006792 <_printf_float+0xb6>
 8006978:	f04f 0a00 	mov.w	sl, #0
 800697c:	f104 0b1a 	add.w	fp, r4, #26
 8006980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006982:	425b      	negs	r3, r3
 8006984:	4553      	cmp	r3, sl
 8006986:	dc01      	bgt.n	800698c <_printf_float+0x2b0>
 8006988:	464b      	mov	r3, r9
 800698a:	e793      	b.n	80068b4 <_printf_float+0x1d8>
 800698c:	2301      	movs	r3, #1
 800698e:	465a      	mov	r2, fp
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f aefb 	beq.w	8006792 <_printf_float+0xb6>
 800699c:	f10a 0a01 	add.w	sl, sl, #1
 80069a0:	e7ee      	b.n	8006980 <_printf_float+0x2a4>
 80069a2:	bf00      	nop
 80069a4:	7fefffff 	.word	0x7fefffff
 80069a8:	08009a10 	.word	0x08009a10
 80069ac:	08009a14 	.word	0x08009a14
 80069b0:	08009a18 	.word	0x08009a18
 80069b4:	08009a1c 	.word	0x08009a1c
 80069b8:	08009a20 	.word	0x08009a20
 80069bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069c2:	4553      	cmp	r3, sl
 80069c4:	bfa8      	it	ge
 80069c6:	4653      	movge	r3, sl
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	4699      	mov	r9, r3
 80069cc:	dc36      	bgt.n	8006a3c <_printf_float+0x360>
 80069ce:	f04f 0b00 	mov.w	fp, #0
 80069d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069d6:	f104 021a 	add.w	r2, r4, #26
 80069da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069dc:	9306      	str	r3, [sp, #24]
 80069de:	eba3 0309 	sub.w	r3, r3, r9
 80069e2:	455b      	cmp	r3, fp
 80069e4:	dc31      	bgt.n	8006a4a <_printf_float+0x36e>
 80069e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e8:	459a      	cmp	sl, r3
 80069ea:	dc3a      	bgt.n	8006a62 <_printf_float+0x386>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	07da      	lsls	r2, r3, #31
 80069f0:	d437      	bmi.n	8006a62 <_printf_float+0x386>
 80069f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f4:	ebaa 0903 	sub.w	r9, sl, r3
 80069f8:	9b06      	ldr	r3, [sp, #24]
 80069fa:	ebaa 0303 	sub.w	r3, sl, r3
 80069fe:	4599      	cmp	r9, r3
 8006a00:	bfa8      	it	ge
 8006a02:	4699      	movge	r9, r3
 8006a04:	f1b9 0f00 	cmp.w	r9, #0
 8006a08:	dc33      	bgt.n	8006a72 <_printf_float+0x396>
 8006a0a:	f04f 0800 	mov.w	r8, #0
 8006a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a12:	f104 0b1a 	add.w	fp, r4, #26
 8006a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a18:	ebaa 0303 	sub.w	r3, sl, r3
 8006a1c:	eba3 0309 	sub.w	r3, r3, r9
 8006a20:	4543      	cmp	r3, r8
 8006a22:	f77f af79 	ble.w	8006918 <_printf_float+0x23c>
 8006a26:	2301      	movs	r3, #1
 8006a28:	465a      	mov	r2, fp
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f aeae 	beq.w	8006792 <_printf_float+0xb6>
 8006a36:	f108 0801 	add.w	r8, r8, #1
 8006a3a:	e7ec      	b.n	8006a16 <_printf_float+0x33a>
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b8      	blx	r7
 8006a44:	3001      	adds	r0, #1
 8006a46:	d1c2      	bne.n	80069ce <_printf_float+0x2f2>
 8006a48:	e6a3      	b.n	8006792 <_printf_float+0xb6>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	9206      	str	r2, [sp, #24]
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f ae9c 	beq.w	8006792 <_printf_float+0xb6>
 8006a5a:	9a06      	ldr	r2, [sp, #24]
 8006a5c:	f10b 0b01 	add.w	fp, fp, #1
 8006a60:	e7bb      	b.n	80069da <_printf_float+0x2fe>
 8006a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d1c0      	bne.n	80069f2 <_printf_float+0x316>
 8006a70:	e68f      	b.n	8006792 <_printf_float+0xb6>
 8006a72:	9a06      	ldr	r2, [sp, #24]
 8006a74:	464b      	mov	r3, r9
 8006a76:	4442      	add	r2, r8
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d1c3      	bne.n	8006a0a <_printf_float+0x32e>
 8006a82:	e686      	b.n	8006792 <_printf_float+0xb6>
 8006a84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a88:	f1ba 0f01 	cmp.w	sl, #1
 8006a8c:	dc01      	bgt.n	8006a92 <_printf_float+0x3b6>
 8006a8e:	07db      	lsls	r3, r3, #31
 8006a90:	d536      	bpl.n	8006b00 <_printf_float+0x424>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4642      	mov	r2, r8
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae78 	beq.w	8006792 <_printf_float+0xb6>
 8006aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae70 	beq.w	8006792 <_printf_float+0xb6>
 8006ab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006abe:	f7fa f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac2:	b9c0      	cbnz	r0, 8006af6 <_printf_float+0x41a>
 8006ac4:	4653      	mov	r3, sl
 8006ac6:	f108 0201 	add.w	r2, r8, #1
 8006aca:	4631      	mov	r1, r6
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d10c      	bne.n	8006aee <_printf_float+0x412>
 8006ad4:	e65d      	b.n	8006792 <_printf_float+0xb6>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	465a      	mov	r2, fp
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f ae56 	beq.w	8006792 <_printf_float+0xb6>
 8006ae6:	f108 0801 	add.w	r8, r8, #1
 8006aea:	45d0      	cmp	r8, sl
 8006aec:	dbf3      	blt.n	8006ad6 <_printf_float+0x3fa>
 8006aee:	464b      	mov	r3, r9
 8006af0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006af4:	e6df      	b.n	80068b6 <_printf_float+0x1da>
 8006af6:	f04f 0800 	mov.w	r8, #0
 8006afa:	f104 0b1a 	add.w	fp, r4, #26
 8006afe:	e7f4      	b.n	8006aea <_printf_float+0x40e>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4642      	mov	r2, r8
 8006b04:	e7e1      	b.n	8006aca <_printf_float+0x3ee>
 8006b06:	2301      	movs	r3, #1
 8006b08:	464a      	mov	r2, r9
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b8      	blx	r7
 8006b10:	3001      	adds	r0, #1
 8006b12:	f43f ae3e 	beq.w	8006792 <_printf_float+0xb6>
 8006b16:	f108 0801 	add.w	r8, r8, #1
 8006b1a:	68e3      	ldr	r3, [r4, #12]
 8006b1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b1e:	1a5b      	subs	r3, r3, r1
 8006b20:	4543      	cmp	r3, r8
 8006b22:	dcf0      	bgt.n	8006b06 <_printf_float+0x42a>
 8006b24:	e6fc      	b.n	8006920 <_printf_float+0x244>
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	f104 0919 	add.w	r9, r4, #25
 8006b2e:	e7f4      	b.n	8006b1a <_printf_float+0x43e>

08006b30 <_printf_common>:
 8006b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	4616      	mov	r6, r2
 8006b36:	4698      	mov	r8, r3
 8006b38:	688a      	ldr	r2, [r1, #8]
 8006b3a:	690b      	ldr	r3, [r1, #16]
 8006b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b40:	4293      	cmp	r3, r2
 8006b42:	bfb8      	it	lt
 8006b44:	4613      	movlt	r3, r2
 8006b46:	6033      	str	r3, [r6, #0]
 8006b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b10a      	cbz	r2, 8006b56 <_printf_common+0x26>
 8006b52:	3301      	adds	r3, #1
 8006b54:	6033      	str	r3, [r6, #0]
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	0699      	lsls	r1, r3, #26
 8006b5a:	bf42      	ittt	mi
 8006b5c:	6833      	ldrmi	r3, [r6, #0]
 8006b5e:	3302      	addmi	r3, #2
 8006b60:	6033      	strmi	r3, [r6, #0]
 8006b62:	6825      	ldr	r5, [r4, #0]
 8006b64:	f015 0506 	ands.w	r5, r5, #6
 8006b68:	d106      	bne.n	8006b78 <_printf_common+0x48>
 8006b6a:	f104 0a19 	add.w	sl, r4, #25
 8006b6e:	68e3      	ldr	r3, [r4, #12]
 8006b70:	6832      	ldr	r2, [r6, #0]
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	42ab      	cmp	r3, r5
 8006b76:	dc26      	bgt.n	8006bc6 <_printf_common+0x96>
 8006b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	3b00      	subs	r3, #0
 8006b80:	bf18      	it	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	0692      	lsls	r2, r2, #26
 8006b86:	d42b      	bmi.n	8006be0 <_printf_common+0xb0>
 8006b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	4638      	mov	r0, r7
 8006b90:	47c8      	blx	r9
 8006b92:	3001      	adds	r0, #1
 8006b94:	d01e      	beq.n	8006bd4 <_printf_common+0xa4>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	6922      	ldr	r2, [r4, #16]
 8006b9a:	f003 0306 	and.w	r3, r3, #6
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	bf02      	ittt	eq
 8006ba2:	68e5      	ldreq	r5, [r4, #12]
 8006ba4:	6833      	ldreq	r3, [r6, #0]
 8006ba6:	1aed      	subeq	r5, r5, r3
 8006ba8:	68a3      	ldr	r3, [r4, #8]
 8006baa:	bf0c      	ite	eq
 8006bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb0:	2500      	movne	r5, #0
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	bfc4      	itt	gt
 8006bb6:	1a9b      	subgt	r3, r3, r2
 8006bb8:	18ed      	addgt	r5, r5, r3
 8006bba:	2600      	movs	r6, #0
 8006bbc:	341a      	adds	r4, #26
 8006bbe:	42b5      	cmp	r5, r6
 8006bc0:	d11a      	bne.n	8006bf8 <_printf_common+0xc8>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	e008      	b.n	8006bd8 <_printf_common+0xa8>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4652      	mov	r2, sl
 8006bca:	4641      	mov	r1, r8
 8006bcc:	4638      	mov	r0, r7
 8006bce:	47c8      	blx	r9
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d103      	bne.n	8006bdc <_printf_common+0xac>
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bdc:	3501      	adds	r5, #1
 8006bde:	e7c6      	b.n	8006b6e <_printf_common+0x3e>
 8006be0:	18e1      	adds	r1, r4, r3
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	2030      	movs	r0, #48	@ 0x30
 8006be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bea:	4422      	add	r2, r4
 8006bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	e7c7      	b.n	8006b88 <_printf_common+0x58>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	4638      	mov	r0, r7
 8006c00:	47c8      	blx	r9
 8006c02:	3001      	adds	r0, #1
 8006c04:	d0e6      	beq.n	8006bd4 <_printf_common+0xa4>
 8006c06:	3601      	adds	r6, #1
 8006c08:	e7d9      	b.n	8006bbe <_printf_common+0x8e>
	...

08006c0c <_printf_i>:
 8006c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	7e0f      	ldrb	r7, [r1, #24]
 8006c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c14:	2f78      	cmp	r7, #120	@ 0x78
 8006c16:	4691      	mov	r9, r2
 8006c18:	4680      	mov	r8, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	469a      	mov	sl, r3
 8006c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c22:	d807      	bhi.n	8006c34 <_printf_i+0x28>
 8006c24:	2f62      	cmp	r7, #98	@ 0x62
 8006c26:	d80a      	bhi.n	8006c3e <_printf_i+0x32>
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	f000 80d2 	beq.w	8006dd2 <_printf_i+0x1c6>
 8006c2e:	2f58      	cmp	r7, #88	@ 0x58
 8006c30:	f000 80b9 	beq.w	8006da6 <_printf_i+0x19a>
 8006c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c3c:	e03a      	b.n	8006cb4 <_printf_i+0xa8>
 8006c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c42:	2b15      	cmp	r3, #21
 8006c44:	d8f6      	bhi.n	8006c34 <_printf_i+0x28>
 8006c46:	a101      	add	r1, pc, #4	@ (adr r1, 8006c4c <_printf_i+0x40>)
 8006c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c4c:	08006ca5 	.word	0x08006ca5
 8006c50:	08006cb9 	.word	0x08006cb9
 8006c54:	08006c35 	.word	0x08006c35
 8006c58:	08006c35 	.word	0x08006c35
 8006c5c:	08006c35 	.word	0x08006c35
 8006c60:	08006c35 	.word	0x08006c35
 8006c64:	08006cb9 	.word	0x08006cb9
 8006c68:	08006c35 	.word	0x08006c35
 8006c6c:	08006c35 	.word	0x08006c35
 8006c70:	08006c35 	.word	0x08006c35
 8006c74:	08006c35 	.word	0x08006c35
 8006c78:	08006db9 	.word	0x08006db9
 8006c7c:	08006ce3 	.word	0x08006ce3
 8006c80:	08006d73 	.word	0x08006d73
 8006c84:	08006c35 	.word	0x08006c35
 8006c88:	08006c35 	.word	0x08006c35
 8006c8c:	08006ddb 	.word	0x08006ddb
 8006c90:	08006c35 	.word	0x08006c35
 8006c94:	08006ce3 	.word	0x08006ce3
 8006c98:	08006c35 	.word	0x08006c35
 8006c9c:	08006c35 	.word	0x08006c35
 8006ca0:	08006d7b 	.word	0x08006d7b
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	1d1a      	adds	r2, r3, #4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6032      	str	r2, [r6, #0]
 8006cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e09d      	b.n	8006df4 <_printf_i+0x1e8>
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	6031      	str	r1, [r6, #0]
 8006cc0:	0606      	lsls	r6, r0, #24
 8006cc2:	d501      	bpl.n	8006cc8 <_printf_i+0xbc>
 8006cc4:	681d      	ldr	r5, [r3, #0]
 8006cc6:	e003      	b.n	8006cd0 <_printf_i+0xc4>
 8006cc8:	0645      	lsls	r5, r0, #25
 8006cca:	d5fb      	bpl.n	8006cc4 <_printf_i+0xb8>
 8006ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cd0:	2d00      	cmp	r5, #0
 8006cd2:	da03      	bge.n	8006cdc <_printf_i+0xd0>
 8006cd4:	232d      	movs	r3, #45	@ 0x2d
 8006cd6:	426d      	negs	r5, r5
 8006cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cdc:	4859      	ldr	r0, [pc, #356]	@ (8006e44 <_printf_i+0x238>)
 8006cde:	230a      	movs	r3, #10
 8006ce0:	e011      	b.n	8006d06 <_printf_i+0xfa>
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	6833      	ldr	r3, [r6, #0]
 8006ce6:	0608      	lsls	r0, r1, #24
 8006ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cec:	d402      	bmi.n	8006cf4 <_printf_i+0xe8>
 8006cee:	0649      	lsls	r1, r1, #25
 8006cf0:	bf48      	it	mi
 8006cf2:	b2ad      	uxthmi	r5, r5
 8006cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cf6:	4853      	ldr	r0, [pc, #332]	@ (8006e44 <_printf_i+0x238>)
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	bf14      	ite	ne
 8006cfc:	230a      	movne	r3, #10
 8006cfe:	2308      	moveq	r3, #8
 8006d00:	2100      	movs	r1, #0
 8006d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d06:	6866      	ldr	r6, [r4, #4]
 8006d08:	60a6      	str	r6, [r4, #8]
 8006d0a:	2e00      	cmp	r6, #0
 8006d0c:	bfa2      	ittt	ge
 8006d0e:	6821      	ldrge	r1, [r4, #0]
 8006d10:	f021 0104 	bicge.w	r1, r1, #4
 8006d14:	6021      	strge	r1, [r4, #0]
 8006d16:	b90d      	cbnz	r5, 8006d1c <_printf_i+0x110>
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	d04b      	beq.n	8006db4 <_printf_i+0x1a8>
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d22:	fb03 5711 	mls	r7, r3, r1, r5
 8006d26:	5dc7      	ldrb	r7, [r0, r7]
 8006d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d2c:	462f      	mov	r7, r5
 8006d2e:	42bb      	cmp	r3, r7
 8006d30:	460d      	mov	r5, r1
 8006d32:	d9f4      	bls.n	8006d1e <_printf_i+0x112>
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d10b      	bne.n	8006d50 <_printf_i+0x144>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	07df      	lsls	r7, r3, #31
 8006d3c:	d508      	bpl.n	8006d50 <_printf_i+0x144>
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	6861      	ldr	r1, [r4, #4]
 8006d42:	4299      	cmp	r1, r3
 8006d44:	bfde      	ittt	le
 8006d46:	2330      	movle	r3, #48	@ 0x30
 8006d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d50:	1b92      	subs	r2, r2, r6
 8006d52:	6122      	str	r2, [r4, #16]
 8006d54:	f8cd a000 	str.w	sl, [sp]
 8006d58:	464b      	mov	r3, r9
 8006d5a:	aa03      	add	r2, sp, #12
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7ff fee6 	bl	8006b30 <_printf_common>
 8006d64:	3001      	adds	r0, #1
 8006d66:	d14a      	bne.n	8006dfe <_printf_i+0x1f2>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	b004      	add	sp, #16
 8006d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	f043 0320 	orr.w	r3, r3, #32
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	4833      	ldr	r0, [pc, #204]	@ (8006e48 <_printf_i+0x23c>)
 8006d7c:	2778      	movs	r7, #120	@ 0x78
 8006d7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	6831      	ldr	r1, [r6, #0]
 8006d86:	061f      	lsls	r7, r3, #24
 8006d88:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d8c:	d402      	bmi.n	8006d94 <_printf_i+0x188>
 8006d8e:	065f      	lsls	r7, r3, #25
 8006d90:	bf48      	it	mi
 8006d92:	b2ad      	uxthmi	r5, r5
 8006d94:	6031      	str	r1, [r6, #0]
 8006d96:	07d9      	lsls	r1, r3, #31
 8006d98:	bf44      	itt	mi
 8006d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d9e:	6023      	strmi	r3, [r4, #0]
 8006da0:	b11d      	cbz	r5, 8006daa <_printf_i+0x19e>
 8006da2:	2310      	movs	r3, #16
 8006da4:	e7ac      	b.n	8006d00 <_printf_i+0xf4>
 8006da6:	4827      	ldr	r0, [pc, #156]	@ (8006e44 <_printf_i+0x238>)
 8006da8:	e7e9      	b.n	8006d7e <_printf_i+0x172>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f023 0320 	bic.w	r3, r3, #32
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	e7f6      	b.n	8006da2 <_printf_i+0x196>
 8006db4:	4616      	mov	r6, r2
 8006db6:	e7bd      	b.n	8006d34 <_printf_i+0x128>
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	6825      	ldr	r5, [r4, #0]
 8006dbc:	6961      	ldr	r1, [r4, #20]
 8006dbe:	1d18      	adds	r0, r3, #4
 8006dc0:	6030      	str	r0, [r6, #0]
 8006dc2:	062e      	lsls	r6, r5, #24
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	d501      	bpl.n	8006dcc <_printf_i+0x1c0>
 8006dc8:	6019      	str	r1, [r3, #0]
 8006dca:	e002      	b.n	8006dd2 <_printf_i+0x1c6>
 8006dcc:	0668      	lsls	r0, r5, #25
 8006dce:	d5fb      	bpl.n	8006dc8 <_printf_i+0x1bc>
 8006dd0:	8019      	strh	r1, [r3, #0]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	4616      	mov	r6, r2
 8006dd8:	e7bc      	b.n	8006d54 <_printf_i+0x148>
 8006dda:	6833      	ldr	r3, [r6, #0]
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	6032      	str	r2, [r6, #0]
 8006de0:	681e      	ldr	r6, [r3, #0]
 8006de2:	6862      	ldr	r2, [r4, #4]
 8006de4:	2100      	movs	r1, #0
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7f9 f9fa 	bl	80001e0 <memchr>
 8006dec:	b108      	cbz	r0, 8006df2 <_printf_i+0x1e6>
 8006dee:	1b80      	subs	r0, r0, r6
 8006df0:	6060      	str	r0, [r4, #4]
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	2300      	movs	r3, #0
 8006df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dfc:	e7aa      	b.n	8006d54 <_printf_i+0x148>
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	4632      	mov	r2, r6
 8006e02:	4649      	mov	r1, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	47d0      	blx	sl
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d0ad      	beq.n	8006d68 <_printf_i+0x15c>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	079b      	lsls	r3, r3, #30
 8006e10:	d413      	bmi.n	8006e3a <_printf_i+0x22e>
 8006e12:	68e0      	ldr	r0, [r4, #12]
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	4298      	cmp	r0, r3
 8006e18:	bfb8      	it	lt
 8006e1a:	4618      	movlt	r0, r3
 8006e1c:	e7a6      	b.n	8006d6c <_printf_i+0x160>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4632      	mov	r2, r6
 8006e22:	4649      	mov	r1, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	47d0      	blx	sl
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d09d      	beq.n	8006d68 <_printf_i+0x15c>
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	9903      	ldr	r1, [sp, #12]
 8006e32:	1a5b      	subs	r3, r3, r1
 8006e34:	42ab      	cmp	r3, r5
 8006e36:	dcf2      	bgt.n	8006e1e <_printf_i+0x212>
 8006e38:	e7eb      	b.n	8006e12 <_printf_i+0x206>
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	f104 0619 	add.w	r6, r4, #25
 8006e40:	e7f5      	b.n	8006e2e <_printf_i+0x222>
 8006e42:	bf00      	nop
 8006e44:	08009a22 	.word	0x08009a22
 8006e48:	08009a33 	.word	0x08009a33

08006e4c <std>:
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	e9c0 3300 	strd	r3, r3, [r0]
 8006e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e5a:	6083      	str	r3, [r0, #8]
 8006e5c:	8181      	strh	r1, [r0, #12]
 8006e5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e60:	81c2      	strh	r2, [r0, #14]
 8006e62:	6183      	str	r3, [r0, #24]
 8006e64:	4619      	mov	r1, r3
 8006e66:	2208      	movs	r2, #8
 8006e68:	305c      	adds	r0, #92	@ 0x5c
 8006e6a:	f000 f928 	bl	80070be <memset>
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <std+0x58>)
 8006e70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <std+0x5c>)
 8006e74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x60>)
 8006e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <std+0x64>)
 8006e7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <std+0x68>)
 8006e80:	6224      	str	r4, [r4, #32]
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d006      	beq.n	8006e94 <std+0x48>
 8006e86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e8a:	4294      	cmp	r4, r2
 8006e8c:	d002      	beq.n	8006e94 <std+0x48>
 8006e8e:	33d0      	adds	r3, #208	@ 0xd0
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d105      	bne.n	8006ea0 <std+0x54>
 8006e94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f000 b98c 	b.w	80071b8 <__retarget_lock_init_recursive>
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08007039 	.word	0x08007039
 8006ea8:	0800705b 	.word	0x0800705b
 8006eac:	08007093 	.word	0x08007093
 8006eb0:	080070b7 	.word	0x080070b7
 8006eb4:	200007c8 	.word	0x200007c8

08006eb8 <stdio_exit_handler>:
 8006eb8:	4a02      	ldr	r2, [pc, #8]	@ (8006ec4 <stdio_exit_handler+0xc>)
 8006eba:	4903      	ldr	r1, [pc, #12]	@ (8006ec8 <stdio_exit_handler+0x10>)
 8006ebc:	4803      	ldr	r0, [pc, #12]	@ (8006ecc <stdio_exit_handler+0x14>)
 8006ebe:	f000 b869 	b.w	8006f94 <_fwalk_sglue>
 8006ec2:	bf00      	nop
 8006ec4:	20000014 	.word	0x20000014
 8006ec8:	08008b15 	.word	0x08008b15
 8006ecc:	20000024 	.word	0x20000024

08006ed0 <cleanup_stdio>:
 8006ed0:	6841      	ldr	r1, [r0, #4]
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <cleanup_stdio+0x34>)
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4604      	mov	r4, r0
 8006eda:	d001      	beq.n	8006ee0 <cleanup_stdio+0x10>
 8006edc:	f001 fe1a 	bl	8008b14 <_fflush_r>
 8006ee0:	68a1      	ldr	r1, [r4, #8]
 8006ee2:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <cleanup_stdio+0x38>)
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	d002      	beq.n	8006eee <cleanup_stdio+0x1e>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f001 fe13 	bl	8008b14 <_fflush_r>
 8006eee:	68e1      	ldr	r1, [r4, #12]
 8006ef0:	4b06      	ldr	r3, [pc, #24]	@ (8006f0c <cleanup_stdio+0x3c>)
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d004      	beq.n	8006f00 <cleanup_stdio+0x30>
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f001 be0a 	b.w	8008b14 <_fflush_r>
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	200007c8 	.word	0x200007c8
 8006f08:	20000830 	.word	0x20000830
 8006f0c:	20000898 	.word	0x20000898

08006f10 <global_stdio_init.part.0>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <global_stdio_init.part.0+0x30>)
 8006f14:	4c0b      	ldr	r4, [pc, #44]	@ (8006f44 <global_stdio_init.part.0+0x34>)
 8006f16:	4a0c      	ldr	r2, [pc, #48]	@ (8006f48 <global_stdio_init.part.0+0x38>)
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2104      	movs	r1, #4
 8006f20:	f7ff ff94 	bl	8006e4c <std>
 8006f24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f28:	2201      	movs	r2, #1
 8006f2a:	2109      	movs	r1, #9
 8006f2c:	f7ff ff8e 	bl	8006e4c <std>
 8006f30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f34:	2202      	movs	r2, #2
 8006f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f3a:	2112      	movs	r1, #18
 8006f3c:	f7ff bf86 	b.w	8006e4c <std>
 8006f40:	20000900 	.word	0x20000900
 8006f44:	200007c8 	.word	0x200007c8
 8006f48:	08006eb9 	.word	0x08006eb9

08006f4c <__sfp_lock_acquire>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__sfp_lock_acquire+0x8>)
 8006f4e:	f000 b934 	b.w	80071ba <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	20000909 	.word	0x20000909

08006f58 <__sfp_lock_release>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__sfp_lock_release+0x8>)
 8006f5a:	f000 b92f 	b.w	80071bc <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20000909 	.word	0x20000909

08006f64 <__sinit>:
 8006f64:	b510      	push	{r4, lr}
 8006f66:	4604      	mov	r4, r0
 8006f68:	f7ff fff0 	bl	8006f4c <__sfp_lock_acquire>
 8006f6c:	6a23      	ldr	r3, [r4, #32]
 8006f6e:	b11b      	cbz	r3, 8006f78 <__sinit+0x14>
 8006f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f74:	f7ff bff0 	b.w	8006f58 <__sfp_lock_release>
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <__sinit+0x28>)
 8006f7a:	6223      	str	r3, [r4, #32]
 8006f7c:	4b04      	ldr	r3, [pc, #16]	@ (8006f90 <__sinit+0x2c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f5      	bne.n	8006f70 <__sinit+0xc>
 8006f84:	f7ff ffc4 	bl	8006f10 <global_stdio_init.part.0>
 8006f88:	e7f2      	b.n	8006f70 <__sinit+0xc>
 8006f8a:	bf00      	nop
 8006f8c:	08006ed1 	.word	0x08006ed1
 8006f90:	20000900 	.word	0x20000900

08006f94 <_fwalk_sglue>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4607      	mov	r7, r0
 8006f9a:	4688      	mov	r8, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fa4:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa8:	d505      	bpl.n	8006fb6 <_fwalk_sglue+0x22>
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	d1f7      	bne.n	8006fa0 <_fwalk_sglue+0xc>
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d907      	bls.n	8006fcc <_fwalk_sglue+0x38>
 8006fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	d003      	beq.n	8006fcc <_fwalk_sglue+0x38>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c0      	blx	r8
 8006fca:	4306      	orrs	r6, r0
 8006fcc:	3568      	adds	r5, #104	@ 0x68
 8006fce:	e7e9      	b.n	8006fa4 <_fwalk_sglue+0x10>

08006fd0 <sniprintf>:
 8006fd0:	b40c      	push	{r2, r3}
 8006fd2:	b530      	push	{r4, r5, lr}
 8006fd4:	4b17      	ldr	r3, [pc, #92]	@ (8007034 <sniprintf+0x64>)
 8006fd6:	1e0c      	subs	r4, r1, #0
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	b09d      	sub	sp, #116	@ 0x74
 8006fdc:	da08      	bge.n	8006ff0 <sniprintf+0x20>
 8006fde:	238b      	movs	r3, #139	@ 0x8b
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	b01d      	add	sp, #116	@ 0x74
 8006fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fec:	b002      	add	sp, #8
 8006fee:	4770      	bx	lr
 8006ff0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ff4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ff8:	bf14      	ite	ne
 8006ffa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ffe:	4623      	moveq	r3, r4
 8007000:	9304      	str	r3, [sp, #16]
 8007002:	9307      	str	r3, [sp, #28]
 8007004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007008:	9002      	str	r0, [sp, #8]
 800700a:	9006      	str	r0, [sp, #24]
 800700c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007010:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007012:	ab21      	add	r3, sp, #132	@ 0x84
 8007014:	a902      	add	r1, sp, #8
 8007016:	4628      	mov	r0, r5
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	f001 fbfb 	bl	8008814 <_svfiprintf_r>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	bfbc      	itt	lt
 8007022:	238b      	movlt	r3, #139	@ 0x8b
 8007024:	602b      	strlt	r3, [r5, #0]
 8007026:	2c00      	cmp	r4, #0
 8007028:	d0dd      	beq.n	8006fe6 <sniprintf+0x16>
 800702a:	9b02      	ldr	r3, [sp, #8]
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e7d9      	b.n	8006fe6 <sniprintf+0x16>
 8007032:	bf00      	nop
 8007034:	20000020 	.word	0x20000020

08007038 <__sread>:
 8007038:	b510      	push	{r4, lr}
 800703a:	460c      	mov	r4, r1
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	f000 f86c 	bl	800711c <_read_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	bfab      	itete	ge
 8007048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800704a:	89a3      	ldrhlt	r3, [r4, #12]
 800704c:	181b      	addge	r3, r3, r0
 800704e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007052:	bfac      	ite	ge
 8007054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007056:	81a3      	strhlt	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__swrite>:
 800705a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705e:	461f      	mov	r7, r3
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	05db      	lsls	r3, r3, #23
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
 8007068:	4616      	mov	r6, r2
 800706a:	d505      	bpl.n	8007078 <__swrite+0x1e>
 800706c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007070:	2302      	movs	r3, #2
 8007072:	2200      	movs	r2, #0
 8007074:	f000 f840 	bl	80070f8 <_lseek_r>
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800707e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	4632      	mov	r2, r6
 8007086:	463b      	mov	r3, r7
 8007088:	4628      	mov	r0, r5
 800708a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	f000 b857 	b.w	8007140 <_write_r>

08007092 <__sseek>:
 8007092:	b510      	push	{r4, lr}
 8007094:	460c      	mov	r4, r1
 8007096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709a:	f000 f82d 	bl	80070f8 <_lseek_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	bf15      	itete	ne
 80070a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070ae:	81a3      	strheq	r3, [r4, #12]
 80070b0:	bf18      	it	ne
 80070b2:	81a3      	strhne	r3, [r4, #12]
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <__sclose>:
 80070b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ba:	f000 b80d 	b.w	80070d8 <_close_r>

080070be <memset>:
 80070be:	4402      	add	r2, r0
 80070c0:	4603      	mov	r3, r0
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d100      	bne.n	80070c8 <memset+0xa>
 80070c6:	4770      	bx	lr
 80070c8:	f803 1b01 	strb.w	r1, [r3], #1
 80070cc:	e7f9      	b.n	80070c2 <memset+0x4>
	...

080070d0 <_localeconv_r>:
 80070d0:	4800      	ldr	r0, [pc, #0]	@ (80070d4 <_localeconv_r+0x4>)
 80070d2:	4770      	bx	lr
 80070d4:	20000160 	.word	0x20000160

080070d8 <_close_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d06      	ldr	r5, [pc, #24]	@ (80070f4 <_close_r+0x1c>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7fb f802 	bl	80020ec <_close>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_close_r+0x1a>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_close_r+0x1a>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20000904 	.word	0x20000904

080070f8 <_lseek_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d07      	ldr	r5, [pc, #28]	@ (8007118 <_lseek_r+0x20>)
 80070fc:	4604      	mov	r4, r0
 80070fe:	4608      	mov	r0, r1
 8007100:	4611      	mov	r1, r2
 8007102:	2200      	movs	r2, #0
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fb f817 	bl	800213a <_lseek>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_lseek_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_lseek_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000904 	.word	0x20000904

0800711c <_read_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	@ (800713c <_read_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fa ffa5 	bl	800207a <_read>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_read_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_read_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20000904 	.word	0x20000904

08007140 <_write_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d07      	ldr	r5, [pc, #28]	@ (8007160 <_write_r+0x20>)
 8007144:	4604      	mov	r4, r0
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	2200      	movs	r2, #0
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7fa ffb0 	bl	80020b4 <_write>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_write_r+0x1e>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_write_r+0x1e>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20000904 	.word	0x20000904

08007164 <__errno>:
 8007164:	4b01      	ldr	r3, [pc, #4]	@ (800716c <__errno+0x8>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000020 	.word	0x20000020

08007170 <__libc_init_array>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4d0d      	ldr	r5, [pc, #52]	@ (80071a8 <__libc_init_array+0x38>)
 8007174:	4c0d      	ldr	r4, [pc, #52]	@ (80071ac <__libc_init_array+0x3c>)
 8007176:	1b64      	subs	r4, r4, r5
 8007178:	10a4      	asrs	r4, r4, #2
 800717a:	2600      	movs	r6, #0
 800717c:	42a6      	cmp	r6, r4
 800717e:	d109      	bne.n	8007194 <__libc_init_array+0x24>
 8007180:	4d0b      	ldr	r5, [pc, #44]	@ (80071b0 <__libc_init_array+0x40>)
 8007182:	4c0c      	ldr	r4, [pc, #48]	@ (80071b4 <__libc_init_array+0x44>)
 8007184:	f002 f864 	bl	8009250 <_init>
 8007188:	1b64      	subs	r4, r4, r5
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	2600      	movs	r6, #0
 800718e:	42a6      	cmp	r6, r4
 8007190:	d105      	bne.n	800719e <__libc_init_array+0x2e>
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	f855 3b04 	ldr.w	r3, [r5], #4
 8007198:	4798      	blx	r3
 800719a:	3601      	adds	r6, #1
 800719c:	e7ee      	b.n	800717c <__libc_init_array+0xc>
 800719e:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a2:	4798      	blx	r3
 80071a4:	3601      	adds	r6, #1
 80071a6:	e7f2      	b.n	800718e <__libc_init_array+0x1e>
 80071a8:	08009d88 	.word	0x08009d88
 80071ac:	08009d88 	.word	0x08009d88
 80071b0:	08009d88 	.word	0x08009d88
 80071b4:	08009d8c 	.word	0x08009d8c

080071b8 <__retarget_lock_init_recursive>:
 80071b8:	4770      	bx	lr

080071ba <__retarget_lock_acquire_recursive>:
 80071ba:	4770      	bx	lr

080071bc <__retarget_lock_release_recursive>:
 80071bc:	4770      	bx	lr

080071be <quorem>:
 80071be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c2:	6903      	ldr	r3, [r0, #16]
 80071c4:	690c      	ldr	r4, [r1, #16]
 80071c6:	42a3      	cmp	r3, r4
 80071c8:	4607      	mov	r7, r0
 80071ca:	db7e      	blt.n	80072ca <quorem+0x10c>
 80071cc:	3c01      	subs	r4, #1
 80071ce:	f101 0814 	add.w	r8, r1, #20
 80071d2:	00a3      	lsls	r3, r4, #2
 80071d4:	f100 0514 	add.w	r5, r0, #20
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e8:	3301      	adds	r3, #1
 80071ea:	429a      	cmp	r2, r3
 80071ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80071f4:	d32e      	bcc.n	8007254 <quorem+0x96>
 80071f6:	f04f 0a00 	mov.w	sl, #0
 80071fa:	46c4      	mov	ip, r8
 80071fc:	46ae      	mov	lr, r5
 80071fe:	46d3      	mov	fp, sl
 8007200:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007204:	b298      	uxth	r0, r3
 8007206:	fb06 a000 	mla	r0, r6, r0, sl
 800720a:	0c02      	lsrs	r2, r0, #16
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	fb06 2303 	mla	r3, r6, r3, r2
 8007212:	f8de 2000 	ldr.w	r2, [lr]
 8007216:	b280      	uxth	r0, r0
 8007218:	b292      	uxth	r2, r2
 800721a:	1a12      	subs	r2, r2, r0
 800721c:	445a      	add	r2, fp
 800721e:	f8de 0000 	ldr.w	r0, [lr]
 8007222:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007226:	b29b      	uxth	r3, r3
 8007228:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800722c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007230:	b292      	uxth	r2, r2
 8007232:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007236:	45e1      	cmp	r9, ip
 8007238:	f84e 2b04 	str.w	r2, [lr], #4
 800723c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007240:	d2de      	bcs.n	8007200 <quorem+0x42>
 8007242:	9b00      	ldr	r3, [sp, #0]
 8007244:	58eb      	ldr	r3, [r5, r3]
 8007246:	b92b      	cbnz	r3, 8007254 <quorem+0x96>
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	3b04      	subs	r3, #4
 800724c:	429d      	cmp	r5, r3
 800724e:	461a      	mov	r2, r3
 8007250:	d32f      	bcc.n	80072b2 <quorem+0xf4>
 8007252:	613c      	str	r4, [r7, #16]
 8007254:	4638      	mov	r0, r7
 8007256:	f001 f979 	bl	800854c <__mcmp>
 800725a:	2800      	cmp	r0, #0
 800725c:	db25      	blt.n	80072aa <quorem+0xec>
 800725e:	4629      	mov	r1, r5
 8007260:	2000      	movs	r0, #0
 8007262:	f858 2b04 	ldr.w	r2, [r8], #4
 8007266:	f8d1 c000 	ldr.w	ip, [r1]
 800726a:	fa1f fe82 	uxth.w	lr, r2
 800726e:	fa1f f38c 	uxth.w	r3, ip
 8007272:	eba3 030e 	sub.w	r3, r3, lr
 8007276:	4403      	add	r3, r0
 8007278:	0c12      	lsrs	r2, r2, #16
 800727a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800727e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007288:	45c1      	cmp	r9, r8
 800728a:	f841 3b04 	str.w	r3, [r1], #4
 800728e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007292:	d2e6      	bcs.n	8007262 <quorem+0xa4>
 8007294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800729c:	b922      	cbnz	r2, 80072a8 <quorem+0xea>
 800729e:	3b04      	subs	r3, #4
 80072a0:	429d      	cmp	r5, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	d30b      	bcc.n	80072be <quorem+0x100>
 80072a6:	613c      	str	r4, [r7, #16]
 80072a8:	3601      	adds	r6, #1
 80072aa:	4630      	mov	r0, r6
 80072ac:	b003      	add	sp, #12
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d1cb      	bne.n	8007252 <quorem+0x94>
 80072ba:	3c01      	subs	r4, #1
 80072bc:	e7c6      	b.n	800724c <quorem+0x8e>
 80072be:	6812      	ldr	r2, [r2, #0]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d1ef      	bne.n	80072a6 <quorem+0xe8>
 80072c6:	3c01      	subs	r4, #1
 80072c8:	e7ea      	b.n	80072a0 <quorem+0xe2>
 80072ca:	2000      	movs	r0, #0
 80072cc:	e7ee      	b.n	80072ac <quorem+0xee>
	...

080072d0 <_dtoa_r>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	69c7      	ldr	r7, [r0, #28]
 80072d6:	b099      	sub	sp, #100	@ 0x64
 80072d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072dc:	ec55 4b10 	vmov	r4, r5, d0
 80072e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80072e4:	4683      	mov	fp, r0
 80072e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80072e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072ea:	b97f      	cbnz	r7, 800730c <_dtoa_r+0x3c>
 80072ec:	2010      	movs	r0, #16
 80072ee:	f000 fdfd 	bl	8007eec <malloc>
 80072f2:	4602      	mov	r2, r0
 80072f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80072f8:	b920      	cbnz	r0, 8007304 <_dtoa_r+0x34>
 80072fa:	4ba7      	ldr	r3, [pc, #668]	@ (8007598 <_dtoa_r+0x2c8>)
 80072fc:	21ef      	movs	r1, #239	@ 0xef
 80072fe:	48a7      	ldr	r0, [pc, #668]	@ (800759c <_dtoa_r+0x2cc>)
 8007300:	f001 fc68 	bl	8008bd4 <__assert_func>
 8007304:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007308:	6007      	str	r7, [r0, #0]
 800730a:	60c7      	str	r7, [r0, #12]
 800730c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	b159      	cbz	r1, 800732c <_dtoa_r+0x5c>
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	604a      	str	r2, [r1, #4]
 8007318:	2301      	movs	r3, #1
 800731a:	4093      	lsls	r3, r2
 800731c:	608b      	str	r3, [r1, #8]
 800731e:	4658      	mov	r0, fp
 8007320:	f000 feda 	bl	80080d8 <_Bfree>
 8007324:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	1e2b      	subs	r3, r5, #0
 800732e:	bfb9      	ittee	lt
 8007330:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007334:	9303      	strlt	r3, [sp, #12]
 8007336:	2300      	movge	r3, #0
 8007338:	6033      	strge	r3, [r6, #0]
 800733a:	9f03      	ldr	r7, [sp, #12]
 800733c:	4b98      	ldr	r3, [pc, #608]	@ (80075a0 <_dtoa_r+0x2d0>)
 800733e:	bfbc      	itt	lt
 8007340:	2201      	movlt	r2, #1
 8007342:	6032      	strlt	r2, [r6, #0]
 8007344:	43bb      	bics	r3, r7
 8007346:	d112      	bne.n	800736e <_dtoa_r+0x9e>
 8007348:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800734a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007354:	4323      	orrs	r3, r4
 8007356:	f000 854d 	beq.w	8007df4 <_dtoa_r+0xb24>
 800735a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800735c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80075b4 <_dtoa_r+0x2e4>
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 854f 	beq.w	8007e04 <_dtoa_r+0xb34>
 8007366:	f10a 0303 	add.w	r3, sl, #3
 800736a:	f000 bd49 	b.w	8007e00 <_dtoa_r+0xb30>
 800736e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	ec51 0b17 	vmov	r0, r1, d7
 8007378:	2300      	movs	r3, #0
 800737a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800737e:	f7f9 fbab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007382:	4680      	mov	r8, r0
 8007384:	b158      	cbz	r0, 800739e <_dtoa_r+0xce>
 8007386:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007388:	2301      	movs	r3, #1
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800738e:	b113      	cbz	r3, 8007396 <_dtoa_r+0xc6>
 8007390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007392:	4b84      	ldr	r3, [pc, #528]	@ (80075a4 <_dtoa_r+0x2d4>)
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80075b8 <_dtoa_r+0x2e8>
 800739a:	f000 bd33 	b.w	8007e04 <_dtoa_r+0xb34>
 800739e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073a2:	aa16      	add	r2, sp, #88	@ 0x58
 80073a4:	a917      	add	r1, sp, #92	@ 0x5c
 80073a6:	4658      	mov	r0, fp
 80073a8:	f001 f980 	bl	80086ac <__d2b>
 80073ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073b0:	4681      	mov	r9, r0
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d077      	beq.n	80074a6 <_dtoa_r+0x1d6>
 80073b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80073bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073d0:	4619      	mov	r1, r3
 80073d2:	2200      	movs	r2, #0
 80073d4:	4b74      	ldr	r3, [pc, #464]	@ (80075a8 <_dtoa_r+0x2d8>)
 80073d6:	f7f8 ff5f 	bl	8000298 <__aeabi_dsub>
 80073da:	a369      	add	r3, pc, #420	@ (adr r3, 8007580 <_dtoa_r+0x2b0>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f9 f912 	bl	8000608 <__aeabi_dmul>
 80073e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007588 <_dtoa_r+0x2b8>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f8 ff57 	bl	800029c <__adddf3>
 80073ee:	4604      	mov	r4, r0
 80073f0:	4630      	mov	r0, r6
 80073f2:	460d      	mov	r5, r1
 80073f4:	f7f9 f89e 	bl	8000534 <__aeabi_i2d>
 80073f8:	a365      	add	r3, pc, #404	@ (adr r3, 8007590 <_dtoa_r+0x2c0>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f9 f903 	bl	8000608 <__aeabi_dmul>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f8 ff47 	bl	800029c <__adddf3>
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	f7f9 fba9 	bl	8000b68 <__aeabi_d2iz>
 8007416:	2200      	movs	r2, #0
 8007418:	4607      	mov	r7, r0
 800741a:	2300      	movs	r3, #0
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f9 fb64 	bl	8000aec <__aeabi_dcmplt>
 8007424:	b140      	cbz	r0, 8007438 <_dtoa_r+0x168>
 8007426:	4638      	mov	r0, r7
 8007428:	f7f9 f884 	bl	8000534 <__aeabi_i2d>
 800742c:	4622      	mov	r2, r4
 800742e:	462b      	mov	r3, r5
 8007430:	f7f9 fb52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007434:	b900      	cbnz	r0, 8007438 <_dtoa_r+0x168>
 8007436:	3f01      	subs	r7, #1
 8007438:	2f16      	cmp	r7, #22
 800743a:	d851      	bhi.n	80074e0 <_dtoa_r+0x210>
 800743c:	4b5b      	ldr	r3, [pc, #364]	@ (80075ac <_dtoa_r+0x2dc>)
 800743e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800744a:	f7f9 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	d048      	beq.n	80074e4 <_dtoa_r+0x214>
 8007452:	3f01      	subs	r7, #1
 8007454:	2300      	movs	r3, #0
 8007456:	9312      	str	r3, [sp, #72]	@ 0x48
 8007458:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800745a:	1b9b      	subs	r3, r3, r6
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	bf44      	itt	mi
 8007460:	f1c3 0801 	rsbmi	r8, r3, #1
 8007464:	2300      	movmi	r3, #0
 8007466:	9208      	str	r2, [sp, #32]
 8007468:	bf54      	ite	pl
 800746a:	f04f 0800 	movpl.w	r8, #0
 800746e:	9308      	strmi	r3, [sp, #32]
 8007470:	2f00      	cmp	r7, #0
 8007472:	db39      	blt.n	80074e8 <_dtoa_r+0x218>
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007478:	443b      	add	r3, r7
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	2300      	movs	r3, #0
 800747e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007482:	2b09      	cmp	r3, #9
 8007484:	d864      	bhi.n	8007550 <_dtoa_r+0x280>
 8007486:	2b05      	cmp	r3, #5
 8007488:	bfc4      	itt	gt
 800748a:	3b04      	subgt	r3, #4
 800748c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007490:	f1a3 0302 	sub.w	r3, r3, #2
 8007494:	bfcc      	ite	gt
 8007496:	2400      	movgt	r4, #0
 8007498:	2401      	movle	r4, #1
 800749a:	2b03      	cmp	r3, #3
 800749c:	d863      	bhi.n	8007566 <_dtoa_r+0x296>
 800749e:	e8df f003 	tbb	[pc, r3]
 80074a2:	372a      	.short	0x372a
 80074a4:	5535      	.short	0x5535
 80074a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80074aa:	441e      	add	r6, r3
 80074ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	bfc1      	itttt	gt
 80074b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074b8:	409f      	lslgt	r7, r3
 80074ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074c2:	bfd6      	itet	le
 80074c4:	f1c3 0320 	rsble	r3, r3, #32
 80074c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80074cc:	fa04 f003 	lslle.w	r0, r4, r3
 80074d0:	f7f9 f820 	bl	8000514 <__aeabi_ui2d>
 80074d4:	2201      	movs	r2, #1
 80074d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074da:	3e01      	subs	r6, #1
 80074dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80074de:	e777      	b.n	80073d0 <_dtoa_r+0x100>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7b8      	b.n	8007456 <_dtoa_r+0x186>
 80074e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80074e6:	e7b7      	b.n	8007458 <_dtoa_r+0x188>
 80074e8:	427b      	negs	r3, r7
 80074ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ec:	2300      	movs	r3, #0
 80074ee:	eba8 0807 	sub.w	r8, r8, r7
 80074f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074f4:	e7c4      	b.n	8007480 <_dtoa_r+0x1b0>
 80074f6:	2300      	movs	r3, #0
 80074f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dc35      	bgt.n	800756c <_dtoa_r+0x29c>
 8007500:	2301      	movs	r3, #1
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	9307      	str	r3, [sp, #28]
 8007506:	461a      	mov	r2, r3
 8007508:	920e      	str	r2, [sp, #56]	@ 0x38
 800750a:	e00b      	b.n	8007524 <_dtoa_r+0x254>
 800750c:	2301      	movs	r3, #1
 800750e:	e7f3      	b.n	80074f8 <_dtoa_r+0x228>
 8007510:	2300      	movs	r3, #0
 8007512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	bfb8      	it	lt
 8007522:	2301      	movlt	r3, #1
 8007524:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007528:	2100      	movs	r1, #0
 800752a:	2204      	movs	r2, #4
 800752c:	f102 0514 	add.w	r5, r2, #20
 8007530:	429d      	cmp	r5, r3
 8007532:	d91f      	bls.n	8007574 <_dtoa_r+0x2a4>
 8007534:	6041      	str	r1, [r0, #4]
 8007536:	4658      	mov	r0, fp
 8007538:	f000 fd8e 	bl	8008058 <_Balloc>
 800753c:	4682      	mov	sl, r0
 800753e:	2800      	cmp	r0, #0
 8007540:	d13c      	bne.n	80075bc <_dtoa_r+0x2ec>
 8007542:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <_dtoa_r+0x2e0>)
 8007544:	4602      	mov	r2, r0
 8007546:	f240 11af 	movw	r1, #431	@ 0x1af
 800754a:	e6d8      	b.n	80072fe <_dtoa_r+0x2e>
 800754c:	2301      	movs	r3, #1
 800754e:	e7e0      	b.n	8007512 <_dtoa_r+0x242>
 8007550:	2401      	movs	r4, #1
 8007552:	2300      	movs	r3, #0
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007558:	f04f 33ff 	mov.w	r3, #4294967295
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	9307      	str	r3, [sp, #28]
 8007560:	2200      	movs	r2, #0
 8007562:	2312      	movs	r3, #18
 8007564:	e7d0      	b.n	8007508 <_dtoa_r+0x238>
 8007566:	2301      	movs	r3, #1
 8007568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800756a:	e7f5      	b.n	8007558 <_dtoa_r+0x288>
 800756c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	9307      	str	r3, [sp, #28]
 8007572:	e7d7      	b.n	8007524 <_dtoa_r+0x254>
 8007574:	3101      	adds	r1, #1
 8007576:	0052      	lsls	r2, r2, #1
 8007578:	e7d8      	b.n	800752c <_dtoa_r+0x25c>
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w
 8007580:	636f4361 	.word	0x636f4361
 8007584:	3fd287a7 	.word	0x3fd287a7
 8007588:	8b60c8b3 	.word	0x8b60c8b3
 800758c:	3fc68a28 	.word	0x3fc68a28
 8007590:	509f79fb 	.word	0x509f79fb
 8007594:	3fd34413 	.word	0x3fd34413
 8007598:	08009a51 	.word	0x08009a51
 800759c:	08009a68 	.word	0x08009a68
 80075a0:	7ff00000 	.word	0x7ff00000
 80075a4:	08009a21 	.word	0x08009a21
 80075a8:	3ff80000 	.word	0x3ff80000
 80075ac:	08009b60 	.word	0x08009b60
 80075b0:	08009ac0 	.word	0x08009ac0
 80075b4:	08009a4d 	.word	0x08009a4d
 80075b8:	08009a20 	.word	0x08009a20
 80075bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075c0:	6018      	str	r0, [r3, #0]
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	2b0e      	cmp	r3, #14
 80075c6:	f200 80a4 	bhi.w	8007712 <_dtoa_r+0x442>
 80075ca:	2c00      	cmp	r4, #0
 80075cc:	f000 80a1 	beq.w	8007712 <_dtoa_r+0x442>
 80075d0:	2f00      	cmp	r7, #0
 80075d2:	dd33      	ble.n	800763c <_dtoa_r+0x36c>
 80075d4:	4bad      	ldr	r3, [pc, #692]	@ (800788c <_dtoa_r+0x5bc>)
 80075d6:	f007 020f 	and.w	r2, r7, #15
 80075da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075de:	ed93 7b00 	vldr	d7, [r3]
 80075e2:	05f8      	lsls	r0, r7, #23
 80075e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075ec:	d516      	bpl.n	800761c <_dtoa_r+0x34c>
 80075ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007890 <_dtoa_r+0x5c0>)
 80075f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075f8:	f7f9 f930 	bl	800085c <__aeabi_ddiv>
 80075fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007600:	f004 040f 	and.w	r4, r4, #15
 8007604:	2603      	movs	r6, #3
 8007606:	4da2      	ldr	r5, [pc, #648]	@ (8007890 <_dtoa_r+0x5c0>)
 8007608:	b954      	cbnz	r4, 8007620 <_dtoa_r+0x350>
 800760a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	f7f9 f923 	bl	800085c <__aeabi_ddiv>
 8007616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800761a:	e028      	b.n	800766e <_dtoa_r+0x39e>
 800761c:	2602      	movs	r6, #2
 800761e:	e7f2      	b.n	8007606 <_dtoa_r+0x336>
 8007620:	07e1      	lsls	r1, r4, #31
 8007622:	d508      	bpl.n	8007636 <_dtoa_r+0x366>
 8007624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007628:	e9d5 2300 	ldrd	r2, r3, [r5]
 800762c:	f7f8 ffec 	bl	8000608 <__aeabi_dmul>
 8007630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007634:	3601      	adds	r6, #1
 8007636:	1064      	asrs	r4, r4, #1
 8007638:	3508      	adds	r5, #8
 800763a:	e7e5      	b.n	8007608 <_dtoa_r+0x338>
 800763c:	f000 80d2 	beq.w	80077e4 <_dtoa_r+0x514>
 8007640:	427c      	negs	r4, r7
 8007642:	4b92      	ldr	r3, [pc, #584]	@ (800788c <_dtoa_r+0x5bc>)
 8007644:	4d92      	ldr	r5, [pc, #584]	@ (8007890 <_dtoa_r+0x5c0>)
 8007646:	f004 020f 	and.w	r2, r4, #15
 800764a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007656:	f7f8 ffd7 	bl	8000608 <__aeabi_dmul>
 800765a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800765e:	1124      	asrs	r4, r4, #4
 8007660:	2300      	movs	r3, #0
 8007662:	2602      	movs	r6, #2
 8007664:	2c00      	cmp	r4, #0
 8007666:	f040 80b2 	bne.w	80077ce <_dtoa_r+0x4fe>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1d3      	bne.n	8007616 <_dtoa_r+0x346>
 800766e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007670:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80b7 	beq.w	80077e8 <_dtoa_r+0x518>
 800767a:	4b86      	ldr	r3, [pc, #536]	@ (8007894 <_dtoa_r+0x5c4>)
 800767c:	2200      	movs	r2, #0
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f9 fa33 	bl	8000aec <__aeabi_dcmplt>
 8007686:	2800      	cmp	r0, #0
 8007688:	f000 80ae 	beq.w	80077e8 <_dtoa_r+0x518>
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80aa 	beq.w	80077e8 <_dtoa_r+0x518>
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd37      	ble.n	800770a <_dtoa_r+0x43a>
 800769a:	1e7b      	subs	r3, r7, #1
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	4620      	mov	r0, r4
 80076a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007898 <_dtoa_r+0x5c8>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f8 ffaf 	bl	8000608 <__aeabi_dmul>
 80076aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ae:	9c00      	ldr	r4, [sp, #0]
 80076b0:	3601      	adds	r6, #1
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7f8 ff3e 	bl	8000534 <__aeabi_i2d>
 80076b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076bc:	f7f8 ffa4 	bl	8000608 <__aeabi_dmul>
 80076c0:	4b76      	ldr	r3, [pc, #472]	@ (800789c <_dtoa_r+0x5cc>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	f7f8 fdea 	bl	800029c <__adddf3>
 80076c8:	4605      	mov	r5, r0
 80076ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	f040 808d 	bne.w	80077ee <_dtoa_r+0x51e>
 80076d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d8:	4b71      	ldr	r3, [pc, #452]	@ (80078a0 <_dtoa_r+0x5d0>)
 80076da:	2200      	movs	r2, #0
 80076dc:	f7f8 fddc 	bl	8000298 <__aeabi_dsub>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e8:	462a      	mov	r2, r5
 80076ea:	4633      	mov	r3, r6
 80076ec:	f7f9 fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	f040 828b 	bne.w	8007c0c <_dtoa_r+0x93c>
 80076f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fa:	462a      	mov	r2, r5
 80076fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007700:	f7f9 f9f4 	bl	8000aec <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 8128 	bne.w	800795a <_dtoa_r+0x68a>
 800770a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800770e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007712:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007714:	2b00      	cmp	r3, #0
 8007716:	f2c0 815a 	blt.w	80079ce <_dtoa_r+0x6fe>
 800771a:	2f0e      	cmp	r7, #14
 800771c:	f300 8157 	bgt.w	80079ce <_dtoa_r+0x6fe>
 8007720:	4b5a      	ldr	r3, [pc, #360]	@ (800788c <_dtoa_r+0x5bc>)
 8007722:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007726:	ed93 7b00 	vldr	d7, [r3]
 800772a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	ed8d 7b00 	vstr	d7, [sp]
 8007732:	da03      	bge.n	800773c <_dtoa_r+0x46c>
 8007734:	9b07      	ldr	r3, [sp, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f340 8101 	ble.w	800793e <_dtoa_r+0x66e>
 800773c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007740:	4656      	mov	r6, sl
 8007742:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f887 	bl	800085c <__aeabi_ddiv>
 800774e:	f7f9 fa0b 	bl	8000b68 <__aeabi_d2iz>
 8007752:	4680      	mov	r8, r0
 8007754:	f7f8 feee 	bl	8000534 <__aeabi_i2d>
 8007758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775c:	f7f8 ff54 	bl	8000608 <__aeabi_dmul>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800776c:	f7f8 fd94 	bl	8000298 <__aeabi_dsub>
 8007770:	f806 4b01 	strb.w	r4, [r6], #1
 8007774:	9d07      	ldr	r5, [sp, #28]
 8007776:	eba6 040a 	sub.w	r4, r6, sl
 800777a:	42a5      	cmp	r5, r4
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	f040 8117 	bne.w	80079b2 <_dtoa_r+0x6e2>
 8007784:	f7f8 fd8a 	bl	800029c <__adddf3>
 8007788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	f7f9 f9ca 	bl	8000b28 <__aeabi_dcmpgt>
 8007794:	2800      	cmp	r0, #0
 8007796:	f040 80f9 	bne.w	800798c <_dtoa_r+0x6bc>
 800779a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f999 	bl	8000ad8 <__aeabi_dcmpeq>
 80077a6:	b118      	cbz	r0, 80077b0 <_dtoa_r+0x4e0>
 80077a8:	f018 0f01 	tst.w	r8, #1
 80077ac:	f040 80ee 	bne.w	800798c <_dtoa_r+0x6bc>
 80077b0:	4649      	mov	r1, r9
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fc90 	bl	80080d8 <_Bfree>
 80077b8:	2300      	movs	r3, #0
 80077ba:	7033      	strb	r3, [r6, #0]
 80077bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077be:	3701      	adds	r7, #1
 80077c0:	601f      	str	r7, [r3, #0]
 80077c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 831d 	beq.w	8007e04 <_dtoa_r+0xb34>
 80077ca:	601e      	str	r6, [r3, #0]
 80077cc:	e31a      	b.n	8007e04 <_dtoa_r+0xb34>
 80077ce:	07e2      	lsls	r2, r4, #31
 80077d0:	d505      	bpl.n	80077de <_dtoa_r+0x50e>
 80077d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077d6:	f7f8 ff17 	bl	8000608 <__aeabi_dmul>
 80077da:	3601      	adds	r6, #1
 80077dc:	2301      	movs	r3, #1
 80077de:	1064      	asrs	r4, r4, #1
 80077e0:	3508      	adds	r5, #8
 80077e2:	e73f      	b.n	8007664 <_dtoa_r+0x394>
 80077e4:	2602      	movs	r6, #2
 80077e6:	e742      	b.n	800766e <_dtoa_r+0x39e>
 80077e8:	9c07      	ldr	r4, [sp, #28]
 80077ea:	9704      	str	r7, [sp, #16]
 80077ec:	e761      	b.n	80076b2 <_dtoa_r+0x3e2>
 80077ee:	4b27      	ldr	r3, [pc, #156]	@ (800788c <_dtoa_r+0x5bc>)
 80077f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077fa:	4454      	add	r4, sl
 80077fc:	2900      	cmp	r1, #0
 80077fe:	d053      	beq.n	80078a8 <_dtoa_r+0x5d8>
 8007800:	4928      	ldr	r1, [pc, #160]	@ (80078a4 <_dtoa_r+0x5d4>)
 8007802:	2000      	movs	r0, #0
 8007804:	f7f9 f82a 	bl	800085c <__aeabi_ddiv>
 8007808:	4633      	mov	r3, r6
 800780a:	462a      	mov	r2, r5
 800780c:	f7f8 fd44 	bl	8000298 <__aeabi_dsub>
 8007810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007814:	4656      	mov	r6, sl
 8007816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781a:	f7f9 f9a5 	bl	8000b68 <__aeabi_d2iz>
 800781e:	4605      	mov	r5, r0
 8007820:	f7f8 fe88 	bl	8000534 <__aeabi_i2d>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782c:	f7f8 fd34 	bl	8000298 <__aeabi_dsub>
 8007830:	3530      	adds	r5, #48	@ 0x30
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800783a:	f806 5b01 	strb.w	r5, [r6], #1
 800783e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007842:	f7f9 f953 	bl	8000aec <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d171      	bne.n	800792e <_dtoa_r+0x65e>
 800784a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800784e:	4911      	ldr	r1, [pc, #68]	@ (8007894 <_dtoa_r+0x5c4>)
 8007850:	2000      	movs	r0, #0
 8007852:	f7f8 fd21 	bl	8000298 <__aeabi_dsub>
 8007856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800785a:	f7f9 f947 	bl	8000aec <__aeabi_dcmplt>
 800785e:	2800      	cmp	r0, #0
 8007860:	f040 8095 	bne.w	800798e <_dtoa_r+0x6be>
 8007864:	42a6      	cmp	r6, r4
 8007866:	f43f af50 	beq.w	800770a <_dtoa_r+0x43a>
 800786a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800786e:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <_dtoa_r+0x5c8>)
 8007870:	2200      	movs	r2, #0
 8007872:	f7f8 fec9 	bl	8000608 <__aeabi_dmul>
 8007876:	4b08      	ldr	r3, [pc, #32]	@ (8007898 <_dtoa_r+0x5c8>)
 8007878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800787c:	2200      	movs	r2, #0
 800787e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007882:	f7f8 fec1 	bl	8000608 <__aeabi_dmul>
 8007886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788a:	e7c4      	b.n	8007816 <_dtoa_r+0x546>
 800788c:	08009b60 	.word	0x08009b60
 8007890:	08009b38 	.word	0x08009b38
 8007894:	3ff00000 	.word	0x3ff00000
 8007898:	40240000 	.word	0x40240000
 800789c:	401c0000 	.word	0x401c0000
 80078a0:	40140000 	.word	0x40140000
 80078a4:	3fe00000 	.word	0x3fe00000
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	f7f8 feac 	bl	8000608 <__aeabi_dmul>
 80078b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80078b6:	4656      	mov	r6, sl
 80078b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078bc:	f7f9 f954 	bl	8000b68 <__aeabi_d2iz>
 80078c0:	4605      	mov	r5, r0
 80078c2:	f7f8 fe37 	bl	8000534 <__aeabi_i2d>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ce:	f7f8 fce3 	bl	8000298 <__aeabi_dsub>
 80078d2:	3530      	adds	r5, #48	@ 0x30
 80078d4:	f806 5b01 	strb.w	r5, [r6], #1
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	42a6      	cmp	r6, r4
 80078de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	d124      	bne.n	8007932 <_dtoa_r+0x662>
 80078e8:	4bac      	ldr	r3, [pc, #688]	@ (8007b9c <_dtoa_r+0x8cc>)
 80078ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078ee:	f7f8 fcd5 	bl	800029c <__adddf3>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078fa:	f7f9 f915 	bl	8000b28 <__aeabi_dcmpgt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d145      	bne.n	800798e <_dtoa_r+0x6be>
 8007902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007906:	49a5      	ldr	r1, [pc, #660]	@ (8007b9c <_dtoa_r+0x8cc>)
 8007908:	2000      	movs	r0, #0
 800790a:	f7f8 fcc5 	bl	8000298 <__aeabi_dsub>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007916:	f7f9 f8e9 	bl	8000aec <__aeabi_dcmplt>
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f aef5 	beq.w	800770a <_dtoa_r+0x43a>
 8007920:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007922:	1e73      	subs	r3, r6, #1
 8007924:	9315      	str	r3, [sp, #84]	@ 0x54
 8007926:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800792a:	2b30      	cmp	r3, #48	@ 0x30
 800792c:	d0f8      	beq.n	8007920 <_dtoa_r+0x650>
 800792e:	9f04      	ldr	r7, [sp, #16]
 8007930:	e73e      	b.n	80077b0 <_dtoa_r+0x4e0>
 8007932:	4b9b      	ldr	r3, [pc, #620]	@ (8007ba0 <_dtoa_r+0x8d0>)
 8007934:	f7f8 fe68 	bl	8000608 <__aeabi_dmul>
 8007938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800793c:	e7bc      	b.n	80078b8 <_dtoa_r+0x5e8>
 800793e:	d10c      	bne.n	800795a <_dtoa_r+0x68a>
 8007940:	4b98      	ldr	r3, [pc, #608]	@ (8007ba4 <_dtoa_r+0x8d4>)
 8007942:	2200      	movs	r2, #0
 8007944:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007948:	f7f8 fe5e 	bl	8000608 <__aeabi_dmul>
 800794c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007950:	f7f9 f8e0 	bl	8000b14 <__aeabi_dcmpge>
 8007954:	2800      	cmp	r0, #0
 8007956:	f000 8157 	beq.w	8007c08 <_dtoa_r+0x938>
 800795a:	2400      	movs	r4, #0
 800795c:	4625      	mov	r5, r4
 800795e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007960:	43db      	mvns	r3, r3
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	4656      	mov	r6, sl
 8007966:	2700      	movs	r7, #0
 8007968:	4621      	mov	r1, r4
 800796a:	4658      	mov	r0, fp
 800796c:	f000 fbb4 	bl	80080d8 <_Bfree>
 8007970:	2d00      	cmp	r5, #0
 8007972:	d0dc      	beq.n	800792e <_dtoa_r+0x65e>
 8007974:	b12f      	cbz	r7, 8007982 <_dtoa_r+0x6b2>
 8007976:	42af      	cmp	r7, r5
 8007978:	d003      	beq.n	8007982 <_dtoa_r+0x6b2>
 800797a:	4639      	mov	r1, r7
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fbab 	bl	80080d8 <_Bfree>
 8007982:	4629      	mov	r1, r5
 8007984:	4658      	mov	r0, fp
 8007986:	f000 fba7 	bl	80080d8 <_Bfree>
 800798a:	e7d0      	b.n	800792e <_dtoa_r+0x65e>
 800798c:	9704      	str	r7, [sp, #16]
 800798e:	4633      	mov	r3, r6
 8007990:	461e      	mov	r6, r3
 8007992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007996:	2a39      	cmp	r2, #57	@ 0x39
 8007998:	d107      	bne.n	80079aa <_dtoa_r+0x6da>
 800799a:	459a      	cmp	sl, r3
 800799c:	d1f8      	bne.n	8007990 <_dtoa_r+0x6c0>
 800799e:	9a04      	ldr	r2, [sp, #16]
 80079a0:	3201      	adds	r2, #1
 80079a2:	9204      	str	r2, [sp, #16]
 80079a4:	2230      	movs	r2, #48	@ 0x30
 80079a6:	f88a 2000 	strb.w	r2, [sl]
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	3201      	adds	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e7bd      	b.n	800792e <_dtoa_r+0x65e>
 80079b2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ba0 <_dtoa_r+0x8d0>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	f7f8 fe27 	bl	8000608 <__aeabi_dmul>
 80079ba:	2200      	movs	r2, #0
 80079bc:	2300      	movs	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	460d      	mov	r5, r1
 80079c2:	f7f9 f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f43f aebb 	beq.w	8007742 <_dtoa_r+0x472>
 80079cc:	e6f0      	b.n	80077b0 <_dtoa_r+0x4e0>
 80079ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	f000 80db 	beq.w	8007b8c <_dtoa_r+0x8bc>
 80079d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d8:	2a01      	cmp	r2, #1
 80079da:	f300 80bf 	bgt.w	8007b5c <_dtoa_r+0x88c>
 80079de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	f000 80b7 	beq.w	8007b54 <_dtoa_r+0x884>
 80079e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079ec:	4646      	mov	r6, r8
 80079ee:	9a08      	ldr	r2, [sp, #32]
 80079f0:	2101      	movs	r1, #1
 80079f2:	441a      	add	r2, r3
 80079f4:	4658      	mov	r0, fp
 80079f6:	4498      	add	r8, r3
 80079f8:	9208      	str	r2, [sp, #32]
 80079fa:	f000 fc21 	bl	8008240 <__i2b>
 80079fe:	4605      	mov	r5, r0
 8007a00:	b15e      	cbz	r6, 8007a1a <_dtoa_r+0x74a>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dd08      	ble.n	8007a1a <_dtoa_r+0x74a>
 8007a08:	42b3      	cmp	r3, r6
 8007a0a:	9a08      	ldr	r2, [sp, #32]
 8007a0c:	bfa8      	it	ge
 8007a0e:	4633      	movge	r3, r6
 8007a10:	eba8 0803 	sub.w	r8, r8, r3
 8007a14:	1af6      	subs	r6, r6, r3
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a1c:	b1f3      	cbz	r3, 8007a5c <_dtoa_r+0x78c>
 8007a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80b7 	beq.w	8007b94 <_dtoa_r+0x8c4>
 8007a26:	b18c      	cbz	r4, 8007a4c <_dtoa_r+0x77c>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	4658      	mov	r0, fp
 8007a2e:	f000 fcc7 	bl	80083c0 <__pow5mult>
 8007a32:	464a      	mov	r2, r9
 8007a34:	4601      	mov	r1, r0
 8007a36:	4605      	mov	r5, r0
 8007a38:	4658      	mov	r0, fp
 8007a3a:	f000 fc17 	bl	800826c <__multiply>
 8007a3e:	4649      	mov	r1, r9
 8007a40:	9004      	str	r0, [sp, #16]
 8007a42:	4658      	mov	r0, fp
 8007a44:	f000 fb48 	bl	80080d8 <_Bfree>
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	4699      	mov	r9, r3
 8007a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a4e:	1b1a      	subs	r2, r3, r4
 8007a50:	d004      	beq.n	8007a5c <_dtoa_r+0x78c>
 8007a52:	4649      	mov	r1, r9
 8007a54:	4658      	mov	r0, fp
 8007a56:	f000 fcb3 	bl	80083c0 <__pow5mult>
 8007a5a:	4681      	mov	r9, r0
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	4658      	mov	r0, fp
 8007a60:	f000 fbee 	bl	8008240 <__i2b>
 8007a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a66:	4604      	mov	r4, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 81cf 	beq.w	8007e0c <_dtoa_r+0xb3c>
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4601      	mov	r1, r0
 8007a72:	4658      	mov	r0, fp
 8007a74:	f000 fca4 	bl	80083c0 <__pow5mult>
 8007a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	f300 8095 	bgt.w	8007bac <_dtoa_r+0x8dc>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 8087 	bne.w	8007b98 <_dtoa_r+0x8c8>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f040 8089 	bne.w	8007ba8 <_dtoa_r+0x8d8>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a9c:	0d1b      	lsrs	r3, r3, #20
 8007a9e:	051b      	lsls	r3, r3, #20
 8007aa0:	b12b      	cbz	r3, 8007aae <_dtoa_r+0x7de>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	9308      	str	r3, [sp, #32]
 8007aa8:	f108 0801 	add.w	r8, r8, #1
 8007aac:	2301      	movs	r3, #1
 8007aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 81b0 	beq.w	8007e18 <_dtoa_r+0xb48>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007abe:	6918      	ldr	r0, [r3, #16]
 8007ac0:	f000 fb72 	bl	80081a8 <__hi0bits>
 8007ac4:	f1c0 0020 	rsb	r0, r0, #32
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	4418      	add	r0, r3
 8007acc:	f010 001f 	ands.w	r0, r0, #31
 8007ad0:	d077      	beq.n	8007bc2 <_dtoa_r+0x8f2>
 8007ad2:	f1c0 0320 	rsb	r3, r0, #32
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	dd6b      	ble.n	8007bb2 <_dtoa_r+0x8e2>
 8007ada:	9b08      	ldr	r3, [sp, #32]
 8007adc:	f1c0 001c 	rsb	r0, r0, #28
 8007ae0:	4403      	add	r3, r0
 8007ae2:	4480      	add	r8, r0
 8007ae4:	4406      	add	r6, r0
 8007ae6:	9308      	str	r3, [sp, #32]
 8007ae8:	f1b8 0f00 	cmp.w	r8, #0
 8007aec:	dd05      	ble.n	8007afa <_dtoa_r+0x82a>
 8007aee:	4649      	mov	r1, r9
 8007af0:	4642      	mov	r2, r8
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 fcbe 	bl	8008474 <__lshift>
 8007af8:	4681      	mov	r9, r0
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd05      	ble.n	8007b0c <_dtoa_r+0x83c>
 8007b00:	4621      	mov	r1, r4
 8007b02:	461a      	mov	r2, r3
 8007b04:	4658      	mov	r0, fp
 8007b06:	f000 fcb5 	bl	8008474 <__lshift>
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d059      	beq.n	8007bc6 <_dtoa_r+0x8f6>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fd19 	bl	800854c <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	da53      	bge.n	8007bc6 <_dtoa_r+0x8f6>
 8007b1e:	1e7b      	subs	r3, r7, #1
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	4649      	mov	r1, r9
 8007b24:	2300      	movs	r3, #0
 8007b26:	220a      	movs	r2, #10
 8007b28:	4658      	mov	r0, fp
 8007b2a:	f000 faf7 	bl	800811c <__multadd>
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b30:	4681      	mov	r9, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8172 	beq.w	8007e1c <_dtoa_r+0xb4c>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f000 faec 	bl	800811c <__multadd>
 8007b44:	9b00      	ldr	r3, [sp, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	4605      	mov	r5, r0
 8007b4a:	dc67      	bgt.n	8007c1c <_dtoa_r+0x94c>
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	dc41      	bgt.n	8007bd6 <_dtoa_r+0x906>
 8007b52:	e063      	b.n	8007c1c <_dtoa_r+0x94c>
 8007b54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b5a:	e746      	b.n	80079ea <_dtoa_r+0x71a>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	1e5c      	subs	r4, r3, #1
 8007b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	bfbf      	itttt	lt
 8007b66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b6c:	1ae3      	sublt	r3, r4, r3
 8007b6e:	bfb4      	ite	lt
 8007b70:	18d2      	addlt	r2, r2, r3
 8007b72:	1b1c      	subge	r4, r3, r4
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	bfbc      	itt	lt
 8007b78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b7a:	2400      	movlt	r4, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bfb5      	itete	lt
 8007b80:	eba8 0603 	sublt.w	r6, r8, r3
 8007b84:	9b07      	ldrge	r3, [sp, #28]
 8007b86:	2300      	movlt	r3, #0
 8007b88:	4646      	movge	r6, r8
 8007b8a:	e730      	b.n	80079ee <_dtoa_r+0x71e>
 8007b8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b90:	4646      	mov	r6, r8
 8007b92:	e735      	b.n	8007a00 <_dtoa_r+0x730>
 8007b94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b96:	e75c      	b.n	8007a52 <_dtoa_r+0x782>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e788      	b.n	8007aae <_dtoa_r+0x7de>
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	40240000 	.word	0x40240000
 8007ba4:	40140000 	.word	0x40140000
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	e780      	b.n	8007aae <_dtoa_r+0x7de>
 8007bac:	2300      	movs	r3, #0
 8007bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb0:	e782      	b.n	8007ab8 <_dtoa_r+0x7e8>
 8007bb2:	d099      	beq.n	8007ae8 <_dtoa_r+0x818>
 8007bb4:	9a08      	ldr	r2, [sp, #32]
 8007bb6:	331c      	adds	r3, #28
 8007bb8:	441a      	add	r2, r3
 8007bba:	4498      	add	r8, r3
 8007bbc:	441e      	add	r6, r3
 8007bbe:	9208      	str	r2, [sp, #32]
 8007bc0:	e792      	b.n	8007ae8 <_dtoa_r+0x818>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	e7f6      	b.n	8007bb4 <_dtoa_r+0x8e4>
 8007bc6:	9b07      	ldr	r3, [sp, #28]
 8007bc8:	9704      	str	r7, [sp, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dc20      	bgt.n	8007c10 <_dtoa_r+0x940>
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	dd1e      	ble.n	8007c14 <_dtoa_r+0x944>
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f47f aec0 	bne.w	800795e <_dtoa_r+0x68e>
 8007bde:	4621      	mov	r1, r4
 8007be0:	2205      	movs	r2, #5
 8007be2:	4658      	mov	r0, fp
 8007be4:	f000 fa9a 	bl	800811c <__multadd>
 8007be8:	4601      	mov	r1, r0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4648      	mov	r0, r9
 8007bee:	f000 fcad 	bl	800854c <__mcmp>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f77f aeb3 	ble.w	800795e <_dtoa_r+0x68e>
 8007bf8:	4656      	mov	r6, sl
 8007bfa:	2331      	movs	r3, #49	@ 0x31
 8007bfc:	f806 3b01 	strb.w	r3, [r6], #1
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	3301      	adds	r3, #1
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	e6ae      	b.n	8007966 <_dtoa_r+0x696>
 8007c08:	9c07      	ldr	r4, [sp, #28]
 8007c0a:	9704      	str	r7, [sp, #16]
 8007c0c:	4625      	mov	r5, r4
 8007c0e:	e7f3      	b.n	8007bf8 <_dtoa_r+0x928>
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8104 	beq.w	8007e24 <_dtoa_r+0xb54>
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	dd05      	ble.n	8007c2c <_dtoa_r+0x95c>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4632      	mov	r2, r6
 8007c24:	4658      	mov	r0, fp
 8007c26:	f000 fc25 	bl	8008474 <__lshift>
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d05a      	beq.n	8007ce8 <_dtoa_r+0xa18>
 8007c32:	6869      	ldr	r1, [r5, #4]
 8007c34:	4658      	mov	r0, fp
 8007c36:	f000 fa0f 	bl	8008058 <_Balloc>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	b928      	cbnz	r0, 8007c4a <_dtoa_r+0x97a>
 8007c3e:	4b84      	ldr	r3, [pc, #528]	@ (8007e50 <_dtoa_r+0xb80>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c46:	f7ff bb5a 	b.w	80072fe <_dtoa_r+0x2e>
 8007c4a:	692a      	ldr	r2, [r5, #16]
 8007c4c:	3202      	adds	r2, #2
 8007c4e:	0092      	lsls	r2, r2, #2
 8007c50:	f105 010c 	add.w	r1, r5, #12
 8007c54:	300c      	adds	r0, #12
 8007c56:	f000 ffaf 	bl	8008bb8 <memcpy>
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f000 fc08 	bl	8008474 <__lshift>
 8007c64:	f10a 0301 	add.w	r3, sl, #1
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	9b00      	ldr	r3, [sp, #0]
 8007c6c:	4453      	add	r3, sl
 8007c6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	462f      	mov	r7, r5
 8007c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	9b07      	ldr	r3, [sp, #28]
 8007c7e:	4621      	mov	r1, r4
 8007c80:	3b01      	subs	r3, #1
 8007c82:	4648      	mov	r0, r9
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	f7ff fa9a 	bl	80071be <quorem>
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	9002      	str	r0, [sp, #8]
 8007c8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c92:	4648      	mov	r0, r9
 8007c94:	f000 fc5a 	bl	800854c <__mcmp>
 8007c98:	462a      	mov	r2, r5
 8007c9a:	9008      	str	r0, [sp, #32]
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	4658      	mov	r0, fp
 8007ca0:	f000 fc70 	bl	8008584 <__mdiff>
 8007ca4:	68c2      	ldr	r2, [r0, #12]
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	bb02      	cbnz	r2, 8007cec <_dtoa_r+0xa1c>
 8007caa:	4601      	mov	r1, r0
 8007cac:	4648      	mov	r0, r9
 8007cae:	f000 fc4d 	bl	800854c <__mcmp>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cba:	f000 fa0d 	bl	80080d8 <_Bfree>
 8007cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cc2:	9e07      	ldr	r6, [sp, #28]
 8007cc4:	ea43 0102 	orr.w	r1, r3, r2
 8007cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cca:	4319      	orrs	r1, r3
 8007ccc:	d110      	bne.n	8007cf0 <_dtoa_r+0xa20>
 8007cce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cd2:	d029      	beq.n	8007d28 <_dtoa_r+0xa58>
 8007cd4:	9b08      	ldr	r3, [sp, #32]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	dd02      	ble.n	8007ce0 <_dtoa_r+0xa10>
 8007cda:	9b02      	ldr	r3, [sp, #8]
 8007cdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	f883 8000 	strb.w	r8, [r3]
 8007ce6:	e63f      	b.n	8007968 <_dtoa_r+0x698>
 8007ce8:	4628      	mov	r0, r5
 8007cea:	e7bb      	b.n	8007c64 <_dtoa_r+0x994>
 8007cec:	2201      	movs	r2, #1
 8007cee:	e7e1      	b.n	8007cb4 <_dtoa_r+0x9e4>
 8007cf0:	9b08      	ldr	r3, [sp, #32]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	db04      	blt.n	8007d00 <_dtoa_r+0xa30>
 8007cf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	d120      	bne.n	8007d42 <_dtoa_r+0xa72>
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	dded      	ble.n	8007ce0 <_dtoa_r+0xa10>
 8007d04:	4649      	mov	r1, r9
 8007d06:	2201      	movs	r2, #1
 8007d08:	4658      	mov	r0, fp
 8007d0a:	f000 fbb3 	bl	8008474 <__lshift>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4681      	mov	r9, r0
 8007d12:	f000 fc1b 	bl	800854c <__mcmp>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dc03      	bgt.n	8007d22 <_dtoa_r+0xa52>
 8007d1a:	d1e1      	bne.n	8007ce0 <_dtoa_r+0xa10>
 8007d1c:	f018 0f01 	tst.w	r8, #1
 8007d20:	d0de      	beq.n	8007ce0 <_dtoa_r+0xa10>
 8007d22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d26:	d1d8      	bne.n	8007cda <_dtoa_r+0xa0a>
 8007d28:	9a00      	ldr	r2, [sp, #0]
 8007d2a:	2339      	movs	r3, #57	@ 0x39
 8007d2c:	7013      	strb	r3, [r2, #0]
 8007d2e:	4633      	mov	r3, r6
 8007d30:	461e      	mov	r6, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d38:	2a39      	cmp	r2, #57	@ 0x39
 8007d3a:	d052      	beq.n	8007de2 <_dtoa_r+0xb12>
 8007d3c:	3201      	adds	r2, #1
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	e612      	b.n	8007968 <_dtoa_r+0x698>
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	dd07      	ble.n	8007d56 <_dtoa_r+0xa86>
 8007d46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d4a:	d0ed      	beq.n	8007d28 <_dtoa_r+0xa58>
 8007d4c:	9a00      	ldr	r2, [sp, #0]
 8007d4e:	f108 0301 	add.w	r3, r8, #1
 8007d52:	7013      	strb	r3, [r2, #0]
 8007d54:	e608      	b.n	8007968 <_dtoa_r+0x698>
 8007d56:	9b07      	ldr	r3, [sp, #28]
 8007d58:	9a07      	ldr	r2, [sp, #28]
 8007d5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d028      	beq.n	8007db6 <_dtoa_r+0xae6>
 8007d64:	4649      	mov	r1, r9
 8007d66:	2300      	movs	r3, #0
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4658      	mov	r0, fp
 8007d6c:	f000 f9d6 	bl	800811c <__multadd>
 8007d70:	42af      	cmp	r7, r5
 8007d72:	4681      	mov	r9, r0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	f04f 020a 	mov.w	r2, #10
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4658      	mov	r0, fp
 8007d80:	d107      	bne.n	8007d92 <_dtoa_r+0xac2>
 8007d82:	f000 f9cb 	bl	800811c <__multadd>
 8007d86:	4607      	mov	r7, r0
 8007d88:	4605      	mov	r5, r0
 8007d8a:	9b07      	ldr	r3, [sp, #28]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	e774      	b.n	8007c7c <_dtoa_r+0x9ac>
 8007d92:	f000 f9c3 	bl	800811c <__multadd>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4607      	mov	r7, r0
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	220a      	movs	r2, #10
 8007d9e:	4658      	mov	r0, fp
 8007da0:	f000 f9bc 	bl	800811c <__multadd>
 8007da4:	4605      	mov	r5, r0
 8007da6:	e7f0      	b.n	8007d8a <_dtoa_r+0xaba>
 8007da8:	9b00      	ldr	r3, [sp, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	bfcc      	ite	gt
 8007dae:	461e      	movgt	r6, r3
 8007db0:	2601      	movle	r6, #1
 8007db2:	4456      	add	r6, sl
 8007db4:	2700      	movs	r7, #0
 8007db6:	4649      	mov	r1, r9
 8007db8:	2201      	movs	r2, #1
 8007dba:	4658      	mov	r0, fp
 8007dbc:	f000 fb5a 	bl	8008474 <__lshift>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4681      	mov	r9, r0
 8007dc4:	f000 fbc2 	bl	800854c <__mcmp>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	dcb0      	bgt.n	8007d2e <_dtoa_r+0xa5e>
 8007dcc:	d102      	bne.n	8007dd4 <_dtoa_r+0xb04>
 8007dce:	f018 0f01 	tst.w	r8, #1
 8007dd2:	d1ac      	bne.n	8007d2e <_dtoa_r+0xa5e>
 8007dd4:	4633      	mov	r3, r6
 8007dd6:	461e      	mov	r6, r3
 8007dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ddc:	2a30      	cmp	r2, #48	@ 0x30
 8007dde:	d0fa      	beq.n	8007dd6 <_dtoa_r+0xb06>
 8007de0:	e5c2      	b.n	8007968 <_dtoa_r+0x698>
 8007de2:	459a      	cmp	sl, r3
 8007de4:	d1a4      	bne.n	8007d30 <_dtoa_r+0xa60>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	3301      	adds	r3, #1
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	2331      	movs	r3, #49	@ 0x31
 8007dee:	f88a 3000 	strb.w	r3, [sl]
 8007df2:	e5b9      	b.n	8007968 <_dtoa_r+0x698>
 8007df4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007df6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e54 <_dtoa_r+0xb84>
 8007dfa:	b11b      	cbz	r3, 8007e04 <_dtoa_r+0xb34>
 8007dfc:	f10a 0308 	add.w	r3, sl, #8
 8007e00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	4650      	mov	r0, sl
 8007e06:	b019      	add	sp, #100	@ 0x64
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	f77f ae37 	ble.w	8007a82 <_dtoa_r+0x7b2>
 8007e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e655      	b.n	8007ac8 <_dtoa_r+0x7f8>
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f77f aed6 	ble.w	8007bd0 <_dtoa_r+0x900>
 8007e24:	4656      	mov	r6, sl
 8007e26:	4621      	mov	r1, r4
 8007e28:	4648      	mov	r0, r9
 8007e2a:	f7ff f9c8 	bl	80071be <quorem>
 8007e2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e32:	f806 8b01 	strb.w	r8, [r6], #1
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	eba6 020a 	sub.w	r2, r6, sl
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	ddb3      	ble.n	8007da8 <_dtoa_r+0xad8>
 8007e40:	4649      	mov	r1, r9
 8007e42:	2300      	movs	r3, #0
 8007e44:	220a      	movs	r2, #10
 8007e46:	4658      	mov	r0, fp
 8007e48:	f000 f968 	bl	800811c <__multadd>
 8007e4c:	4681      	mov	r9, r0
 8007e4e:	e7ea      	b.n	8007e26 <_dtoa_r+0xb56>
 8007e50:	08009ac0 	.word	0x08009ac0
 8007e54:	08009a44 	.word	0x08009a44

08007e58 <_free_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d041      	beq.n	8007ee4 <_free_r+0x8c>
 8007e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e64:	1f0c      	subs	r4, r1, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfb8      	it	lt
 8007e6a:	18e4      	addlt	r4, r4, r3
 8007e6c:	f000 f8e8 	bl	8008040 <__malloc_lock>
 8007e70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <_free_r+0x90>)
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	b933      	cbnz	r3, 8007e84 <_free_r+0x2c>
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	6014      	str	r4, [r2, #0]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e80:	f000 b8e4 	b.w	800804c <__malloc_unlock>
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d908      	bls.n	8007e9a <_free_r+0x42>
 8007e88:	6820      	ldr	r0, [r4, #0]
 8007e8a:	1821      	adds	r1, r4, r0
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf01      	itttt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	e7ed      	b.n	8007e76 <_free_r+0x1e>
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	b10b      	cbz	r3, 8007ea4 <_free_r+0x4c>
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d9fa      	bls.n	8007e9a <_free_r+0x42>
 8007ea4:	6811      	ldr	r1, [r2, #0]
 8007ea6:	1850      	adds	r0, r2, r1
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d10b      	bne.n	8007ec4 <_free_r+0x6c>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	4401      	add	r1, r0
 8007eb0:	1850      	adds	r0, r2, r1
 8007eb2:	4283      	cmp	r3, r0
 8007eb4:	6011      	str	r1, [r2, #0]
 8007eb6:	d1e0      	bne.n	8007e7a <_free_r+0x22>
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	6053      	str	r3, [r2, #4]
 8007ebe:	4408      	add	r0, r1
 8007ec0:	6010      	str	r0, [r2, #0]
 8007ec2:	e7da      	b.n	8007e7a <_free_r+0x22>
 8007ec4:	d902      	bls.n	8007ecc <_free_r+0x74>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	e7d6      	b.n	8007e7a <_free_r+0x22>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf04      	itt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	bf04      	itt	eq
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	6054      	str	r4, [r2, #4]
 8007ee2:	e7ca      	b.n	8007e7a <_free_r+0x22>
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000910 	.word	0x20000910

08007eec <malloc>:
 8007eec:	4b02      	ldr	r3, [pc, #8]	@ (8007ef8 <malloc+0xc>)
 8007eee:	4601      	mov	r1, r0
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	f000 b825 	b.w	8007f40 <_malloc_r>
 8007ef6:	bf00      	nop
 8007ef8:	20000020 	.word	0x20000020

08007efc <sbrk_aligned>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4e0f      	ldr	r6, [pc, #60]	@ (8007f3c <sbrk_aligned+0x40>)
 8007f00:	460c      	mov	r4, r1
 8007f02:	6831      	ldr	r1, [r6, #0]
 8007f04:	4605      	mov	r5, r0
 8007f06:	b911      	cbnz	r1, 8007f0e <sbrk_aligned+0x12>
 8007f08:	f000 fe46 	bl	8008b98 <_sbrk_r>
 8007f0c:	6030      	str	r0, [r6, #0]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 fe41 	bl	8008b98 <_sbrk_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d103      	bne.n	8007f22 <sbrk_aligned+0x26>
 8007f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f1e:	4620      	mov	r0, r4
 8007f20:	bd70      	pop	{r4, r5, r6, pc}
 8007f22:	1cc4      	adds	r4, r0, #3
 8007f24:	f024 0403 	bic.w	r4, r4, #3
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d0f8      	beq.n	8007f1e <sbrk_aligned+0x22>
 8007f2c:	1a21      	subs	r1, r4, r0
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 fe32 	bl	8008b98 <_sbrk_r>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d1f2      	bne.n	8007f1e <sbrk_aligned+0x22>
 8007f38:	e7ef      	b.n	8007f1a <sbrk_aligned+0x1e>
 8007f3a:	bf00      	nop
 8007f3c:	2000090c 	.word	0x2000090c

08007f40 <_malloc_r>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	1ccd      	adds	r5, r1, #3
 8007f46:	f025 0503 	bic.w	r5, r5, #3
 8007f4a:	3508      	adds	r5, #8
 8007f4c:	2d0c      	cmp	r5, #12
 8007f4e:	bf38      	it	cc
 8007f50:	250c      	movcc	r5, #12
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	4606      	mov	r6, r0
 8007f56:	db01      	blt.n	8007f5c <_malloc_r+0x1c>
 8007f58:	42a9      	cmp	r1, r5
 8007f5a:	d904      	bls.n	8007f66 <_malloc_r+0x26>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	2000      	movs	r0, #0
 8007f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800803c <_malloc_r+0xfc>
 8007f6a:	f000 f869 	bl	8008040 <__malloc_lock>
 8007f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f72:	461c      	mov	r4, r3
 8007f74:	bb44      	cbnz	r4, 8007fc8 <_malloc_r+0x88>
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff ffbf 	bl	8007efc <sbrk_aligned>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	4604      	mov	r4, r0
 8007f82:	d158      	bne.n	8008036 <_malloc_r+0xf6>
 8007f84:	f8d8 4000 	ldr.w	r4, [r8]
 8007f88:	4627      	mov	r7, r4
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	d143      	bne.n	8008016 <_malloc_r+0xd6>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d04b      	beq.n	800802a <_malloc_r+0xea>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	4639      	mov	r1, r7
 8007f96:	4630      	mov	r0, r6
 8007f98:	eb04 0903 	add.w	r9, r4, r3
 8007f9c:	f000 fdfc 	bl	8008b98 <_sbrk_r>
 8007fa0:	4581      	cmp	r9, r0
 8007fa2:	d142      	bne.n	800802a <_malloc_r+0xea>
 8007fa4:	6821      	ldr	r1, [r4, #0]
 8007fa6:	1a6d      	subs	r5, r5, r1
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffa6 	bl	8007efc <sbrk_aligned>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d03a      	beq.n	800802a <_malloc_r+0xea>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	442b      	add	r3, r5
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	f8d8 3000 	ldr.w	r3, [r8]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	bb62      	cbnz	r2, 800801c <_malloc_r+0xdc>
 8007fc2:	f8c8 7000 	str.w	r7, [r8]
 8007fc6:	e00f      	b.n	8007fe8 <_malloc_r+0xa8>
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	1b52      	subs	r2, r2, r5
 8007fcc:	d420      	bmi.n	8008010 <_malloc_r+0xd0>
 8007fce:	2a0b      	cmp	r2, #11
 8007fd0:	d917      	bls.n	8008002 <_malloc_r+0xc2>
 8007fd2:	1961      	adds	r1, r4, r5
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	6025      	str	r5, [r4, #0]
 8007fd8:	bf18      	it	ne
 8007fda:	6059      	strne	r1, [r3, #4]
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	bf08      	it	eq
 8007fe0:	f8c8 1000 	streq.w	r1, [r8]
 8007fe4:	5162      	str	r2, [r4, r5]
 8007fe6:	604b      	str	r3, [r1, #4]
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 f82f 	bl	800804c <__malloc_unlock>
 8007fee:	f104 000b 	add.w	r0, r4, #11
 8007ff2:	1d23      	adds	r3, r4, #4
 8007ff4:	f020 0007 	bic.w	r0, r0, #7
 8007ff8:	1ac2      	subs	r2, r0, r3
 8007ffa:	bf1c      	itt	ne
 8007ffc:	1a1b      	subne	r3, r3, r0
 8007ffe:	50a3      	strne	r3, [r4, r2]
 8008000:	e7af      	b.n	8007f62 <_malloc_r+0x22>
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	42a3      	cmp	r3, r4
 8008006:	bf0c      	ite	eq
 8008008:	f8c8 2000 	streq.w	r2, [r8]
 800800c:	605a      	strne	r2, [r3, #4]
 800800e:	e7eb      	b.n	8007fe8 <_malloc_r+0xa8>
 8008010:	4623      	mov	r3, r4
 8008012:	6864      	ldr	r4, [r4, #4]
 8008014:	e7ae      	b.n	8007f74 <_malloc_r+0x34>
 8008016:	463c      	mov	r4, r7
 8008018:	687f      	ldr	r7, [r7, #4]
 800801a:	e7b6      	b.n	8007f8a <_malloc_r+0x4a>
 800801c:	461a      	mov	r2, r3
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	42a3      	cmp	r3, r4
 8008022:	d1fb      	bne.n	800801c <_malloc_r+0xdc>
 8008024:	2300      	movs	r3, #0
 8008026:	6053      	str	r3, [r2, #4]
 8008028:	e7de      	b.n	8007fe8 <_malloc_r+0xa8>
 800802a:	230c      	movs	r3, #12
 800802c:	6033      	str	r3, [r6, #0]
 800802e:	4630      	mov	r0, r6
 8008030:	f000 f80c 	bl	800804c <__malloc_unlock>
 8008034:	e794      	b.n	8007f60 <_malloc_r+0x20>
 8008036:	6005      	str	r5, [r0, #0]
 8008038:	e7d6      	b.n	8007fe8 <_malloc_r+0xa8>
 800803a:	bf00      	nop
 800803c:	20000910 	.word	0x20000910

08008040 <__malloc_lock>:
 8008040:	4801      	ldr	r0, [pc, #4]	@ (8008048 <__malloc_lock+0x8>)
 8008042:	f7ff b8ba 	b.w	80071ba <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	20000908 	.word	0x20000908

0800804c <__malloc_unlock>:
 800804c:	4801      	ldr	r0, [pc, #4]	@ (8008054 <__malloc_unlock+0x8>)
 800804e:	f7ff b8b5 	b.w	80071bc <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	20000908 	.word	0x20000908

08008058 <_Balloc>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	69c6      	ldr	r6, [r0, #28]
 800805c:	4604      	mov	r4, r0
 800805e:	460d      	mov	r5, r1
 8008060:	b976      	cbnz	r6, 8008080 <_Balloc+0x28>
 8008062:	2010      	movs	r0, #16
 8008064:	f7ff ff42 	bl	8007eec <malloc>
 8008068:	4602      	mov	r2, r0
 800806a:	61e0      	str	r0, [r4, #28]
 800806c:	b920      	cbnz	r0, 8008078 <_Balloc+0x20>
 800806e:	4b18      	ldr	r3, [pc, #96]	@ (80080d0 <_Balloc+0x78>)
 8008070:	4818      	ldr	r0, [pc, #96]	@ (80080d4 <_Balloc+0x7c>)
 8008072:	216b      	movs	r1, #107	@ 0x6b
 8008074:	f000 fdae 	bl	8008bd4 <__assert_func>
 8008078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800807c:	6006      	str	r6, [r0, #0]
 800807e:	60c6      	str	r6, [r0, #12]
 8008080:	69e6      	ldr	r6, [r4, #28]
 8008082:	68f3      	ldr	r3, [r6, #12]
 8008084:	b183      	cbz	r3, 80080a8 <_Balloc+0x50>
 8008086:	69e3      	ldr	r3, [r4, #28]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800808e:	b9b8      	cbnz	r0, 80080c0 <_Balloc+0x68>
 8008090:	2101      	movs	r1, #1
 8008092:	fa01 f605 	lsl.w	r6, r1, r5
 8008096:	1d72      	adds	r2, r6, #5
 8008098:	0092      	lsls	r2, r2, #2
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fdb8 	bl	8008c10 <_calloc_r>
 80080a0:	b160      	cbz	r0, 80080bc <_Balloc+0x64>
 80080a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080a6:	e00e      	b.n	80080c6 <_Balloc+0x6e>
 80080a8:	2221      	movs	r2, #33	@ 0x21
 80080aa:	2104      	movs	r1, #4
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fdaf 	bl	8008c10 <_calloc_r>
 80080b2:	69e3      	ldr	r3, [r4, #28]
 80080b4:	60f0      	str	r0, [r6, #12]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e4      	bne.n	8008086 <_Balloc+0x2e>
 80080bc:	2000      	movs	r0, #0
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	6802      	ldr	r2, [r0, #0]
 80080c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080c6:	2300      	movs	r3, #0
 80080c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080cc:	e7f7      	b.n	80080be <_Balloc+0x66>
 80080ce:	bf00      	nop
 80080d0:	08009a51 	.word	0x08009a51
 80080d4:	08009ad1 	.word	0x08009ad1

080080d8 <_Bfree>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	69c6      	ldr	r6, [r0, #28]
 80080dc:	4605      	mov	r5, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	b976      	cbnz	r6, 8008100 <_Bfree+0x28>
 80080e2:	2010      	movs	r0, #16
 80080e4:	f7ff ff02 	bl	8007eec <malloc>
 80080e8:	4602      	mov	r2, r0
 80080ea:	61e8      	str	r0, [r5, #28]
 80080ec:	b920      	cbnz	r0, 80080f8 <_Bfree+0x20>
 80080ee:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <_Bfree+0x3c>)
 80080f0:	4809      	ldr	r0, [pc, #36]	@ (8008118 <_Bfree+0x40>)
 80080f2:	218f      	movs	r1, #143	@ 0x8f
 80080f4:	f000 fd6e 	bl	8008bd4 <__assert_func>
 80080f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080fc:	6006      	str	r6, [r0, #0]
 80080fe:	60c6      	str	r6, [r0, #12]
 8008100:	b13c      	cbz	r4, 8008112 <_Bfree+0x3a>
 8008102:	69eb      	ldr	r3, [r5, #28]
 8008104:	6862      	ldr	r2, [r4, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800810c:	6021      	str	r1, [r4, #0]
 800810e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	08009a51 	.word	0x08009a51
 8008118:	08009ad1 	.word	0x08009ad1

0800811c <__multadd>:
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	690d      	ldr	r5, [r1, #16]
 8008122:	4607      	mov	r7, r0
 8008124:	460c      	mov	r4, r1
 8008126:	461e      	mov	r6, r3
 8008128:	f101 0c14 	add.w	ip, r1, #20
 800812c:	2000      	movs	r0, #0
 800812e:	f8dc 3000 	ldr.w	r3, [ip]
 8008132:	b299      	uxth	r1, r3
 8008134:	fb02 6101 	mla	r1, r2, r1, r6
 8008138:	0c1e      	lsrs	r6, r3, #16
 800813a:	0c0b      	lsrs	r3, r1, #16
 800813c:	fb02 3306 	mla	r3, r2, r6, r3
 8008140:	b289      	uxth	r1, r1
 8008142:	3001      	adds	r0, #1
 8008144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008148:	4285      	cmp	r5, r0
 800814a:	f84c 1b04 	str.w	r1, [ip], #4
 800814e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008152:	dcec      	bgt.n	800812e <__multadd+0x12>
 8008154:	b30e      	cbz	r6, 800819a <__multadd+0x7e>
 8008156:	68a3      	ldr	r3, [r4, #8]
 8008158:	42ab      	cmp	r3, r5
 800815a:	dc19      	bgt.n	8008190 <__multadd+0x74>
 800815c:	6861      	ldr	r1, [r4, #4]
 800815e:	4638      	mov	r0, r7
 8008160:	3101      	adds	r1, #1
 8008162:	f7ff ff79 	bl	8008058 <_Balloc>
 8008166:	4680      	mov	r8, r0
 8008168:	b928      	cbnz	r0, 8008176 <__multadd+0x5a>
 800816a:	4602      	mov	r2, r0
 800816c:	4b0c      	ldr	r3, [pc, #48]	@ (80081a0 <__multadd+0x84>)
 800816e:	480d      	ldr	r0, [pc, #52]	@ (80081a4 <__multadd+0x88>)
 8008170:	21ba      	movs	r1, #186	@ 0xba
 8008172:	f000 fd2f 	bl	8008bd4 <__assert_func>
 8008176:	6922      	ldr	r2, [r4, #16]
 8008178:	3202      	adds	r2, #2
 800817a:	f104 010c 	add.w	r1, r4, #12
 800817e:	0092      	lsls	r2, r2, #2
 8008180:	300c      	adds	r0, #12
 8008182:	f000 fd19 	bl	8008bb8 <memcpy>
 8008186:	4621      	mov	r1, r4
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ffa5 	bl	80080d8 <_Bfree>
 800818e:	4644      	mov	r4, r8
 8008190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008194:	3501      	adds	r5, #1
 8008196:	615e      	str	r6, [r3, #20]
 8008198:	6125      	str	r5, [r4, #16]
 800819a:	4620      	mov	r0, r4
 800819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a0:	08009ac0 	.word	0x08009ac0
 80081a4:	08009ad1 	.word	0x08009ad1

080081a8 <__hi0bits>:
 80081a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081ac:	4603      	mov	r3, r0
 80081ae:	bf36      	itet	cc
 80081b0:	0403      	lslcc	r3, r0, #16
 80081b2:	2000      	movcs	r0, #0
 80081b4:	2010      	movcc	r0, #16
 80081b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081ba:	bf3c      	itt	cc
 80081bc:	021b      	lslcc	r3, r3, #8
 80081be:	3008      	addcc	r0, #8
 80081c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081c4:	bf3c      	itt	cc
 80081c6:	011b      	lslcc	r3, r3, #4
 80081c8:	3004      	addcc	r0, #4
 80081ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ce:	bf3c      	itt	cc
 80081d0:	009b      	lslcc	r3, r3, #2
 80081d2:	3002      	addcc	r0, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	db05      	blt.n	80081e4 <__hi0bits+0x3c>
 80081d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081dc:	f100 0001 	add.w	r0, r0, #1
 80081e0:	bf08      	it	eq
 80081e2:	2020      	moveq	r0, #32
 80081e4:	4770      	bx	lr

080081e6 <__lo0bits>:
 80081e6:	6803      	ldr	r3, [r0, #0]
 80081e8:	4602      	mov	r2, r0
 80081ea:	f013 0007 	ands.w	r0, r3, #7
 80081ee:	d00b      	beq.n	8008208 <__lo0bits+0x22>
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d421      	bmi.n	8008238 <__lo0bits+0x52>
 80081f4:	0798      	lsls	r0, r3, #30
 80081f6:	bf49      	itett	mi
 80081f8:	085b      	lsrmi	r3, r3, #1
 80081fa:	089b      	lsrpl	r3, r3, #2
 80081fc:	2001      	movmi	r0, #1
 80081fe:	6013      	strmi	r3, [r2, #0]
 8008200:	bf5c      	itt	pl
 8008202:	6013      	strpl	r3, [r2, #0]
 8008204:	2002      	movpl	r0, #2
 8008206:	4770      	bx	lr
 8008208:	b299      	uxth	r1, r3
 800820a:	b909      	cbnz	r1, 8008210 <__lo0bits+0x2a>
 800820c:	0c1b      	lsrs	r3, r3, #16
 800820e:	2010      	movs	r0, #16
 8008210:	b2d9      	uxtb	r1, r3
 8008212:	b909      	cbnz	r1, 8008218 <__lo0bits+0x32>
 8008214:	3008      	adds	r0, #8
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	0719      	lsls	r1, r3, #28
 800821a:	bf04      	itt	eq
 800821c:	091b      	lsreq	r3, r3, #4
 800821e:	3004      	addeq	r0, #4
 8008220:	0799      	lsls	r1, r3, #30
 8008222:	bf04      	itt	eq
 8008224:	089b      	lsreq	r3, r3, #2
 8008226:	3002      	addeq	r0, #2
 8008228:	07d9      	lsls	r1, r3, #31
 800822a:	d403      	bmi.n	8008234 <__lo0bits+0x4e>
 800822c:	085b      	lsrs	r3, r3, #1
 800822e:	f100 0001 	add.w	r0, r0, #1
 8008232:	d003      	beq.n	800823c <__lo0bits+0x56>
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	4770      	bx	lr
 8008238:	2000      	movs	r0, #0
 800823a:	4770      	bx	lr
 800823c:	2020      	movs	r0, #32
 800823e:	4770      	bx	lr

08008240 <__i2b>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	2101      	movs	r1, #1
 8008246:	f7ff ff07 	bl	8008058 <_Balloc>
 800824a:	4602      	mov	r2, r0
 800824c:	b928      	cbnz	r0, 800825a <__i2b+0x1a>
 800824e:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <__i2b+0x24>)
 8008250:	4805      	ldr	r0, [pc, #20]	@ (8008268 <__i2b+0x28>)
 8008252:	f240 1145 	movw	r1, #325	@ 0x145
 8008256:	f000 fcbd 	bl	8008bd4 <__assert_func>
 800825a:	2301      	movs	r3, #1
 800825c:	6144      	str	r4, [r0, #20]
 800825e:	6103      	str	r3, [r0, #16]
 8008260:	bd10      	pop	{r4, pc}
 8008262:	bf00      	nop
 8008264:	08009ac0 	.word	0x08009ac0
 8008268:	08009ad1 	.word	0x08009ad1

0800826c <__multiply>:
 800826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	4614      	mov	r4, r2
 8008272:	690a      	ldr	r2, [r1, #16]
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	429a      	cmp	r2, r3
 8008278:	bfa8      	it	ge
 800827a:	4623      	movge	r3, r4
 800827c:	460f      	mov	r7, r1
 800827e:	bfa4      	itt	ge
 8008280:	460c      	movge	r4, r1
 8008282:	461f      	movge	r7, r3
 8008284:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008288:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	eb0a 0609 	add.w	r6, sl, r9
 8008294:	42b3      	cmp	r3, r6
 8008296:	b085      	sub	sp, #20
 8008298:	bfb8      	it	lt
 800829a:	3101      	addlt	r1, #1
 800829c:	f7ff fedc 	bl	8008058 <_Balloc>
 80082a0:	b930      	cbnz	r0, 80082b0 <__multiply+0x44>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b44      	ldr	r3, [pc, #272]	@ (80083b8 <__multiply+0x14c>)
 80082a6:	4845      	ldr	r0, [pc, #276]	@ (80083bc <__multiply+0x150>)
 80082a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082ac:	f000 fc92 	bl	8008bd4 <__assert_func>
 80082b0:	f100 0514 	add.w	r5, r0, #20
 80082b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082b8:	462b      	mov	r3, r5
 80082ba:	2200      	movs	r2, #0
 80082bc:	4543      	cmp	r3, r8
 80082be:	d321      	bcc.n	8008304 <__multiply+0x98>
 80082c0:	f107 0114 	add.w	r1, r7, #20
 80082c4:	f104 0214 	add.w	r2, r4, #20
 80082c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082d0:	9302      	str	r3, [sp, #8]
 80082d2:	1b13      	subs	r3, r2, r4
 80082d4:	3b15      	subs	r3, #21
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	3304      	adds	r3, #4
 80082dc:	f104 0715 	add.w	r7, r4, #21
 80082e0:	42ba      	cmp	r2, r7
 80082e2:	bf38      	it	cc
 80082e4:	2304      	movcc	r3, #4
 80082e6:	9301      	str	r3, [sp, #4]
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	9103      	str	r1, [sp, #12]
 80082ec:	428b      	cmp	r3, r1
 80082ee:	d80c      	bhi.n	800830a <__multiply+0x9e>
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	dd03      	ble.n	80082fc <__multiply+0x90>
 80082f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d05b      	beq.n	80083b4 <__multiply+0x148>
 80082fc:	6106      	str	r6, [r0, #16]
 80082fe:	b005      	add	sp, #20
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008304:	f843 2b04 	str.w	r2, [r3], #4
 8008308:	e7d8      	b.n	80082bc <__multiply+0x50>
 800830a:	f8b1 a000 	ldrh.w	sl, [r1]
 800830e:	f1ba 0f00 	cmp.w	sl, #0
 8008312:	d024      	beq.n	800835e <__multiply+0xf2>
 8008314:	f104 0e14 	add.w	lr, r4, #20
 8008318:	46a9      	mov	r9, r5
 800831a:	f04f 0c00 	mov.w	ip, #0
 800831e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008322:	f8d9 3000 	ldr.w	r3, [r9]
 8008326:	fa1f fb87 	uxth.w	fp, r7
 800832a:	b29b      	uxth	r3, r3
 800832c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008330:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008334:	f8d9 7000 	ldr.w	r7, [r9]
 8008338:	4463      	add	r3, ip
 800833a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800833e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008342:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008346:	b29b      	uxth	r3, r3
 8008348:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800834c:	4572      	cmp	r2, lr
 800834e:	f849 3b04 	str.w	r3, [r9], #4
 8008352:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008356:	d8e2      	bhi.n	800831e <__multiply+0xb2>
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	f845 c003 	str.w	ip, [r5, r3]
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008364:	3104      	adds	r1, #4
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	d021      	beq.n	80083b0 <__multiply+0x144>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	f104 0c14 	add.w	ip, r4, #20
 8008372:	46ae      	mov	lr, r5
 8008374:	f04f 0a00 	mov.w	sl, #0
 8008378:	f8bc b000 	ldrh.w	fp, [ip]
 800837c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008380:	fb09 770b 	mla	r7, r9, fp, r7
 8008384:	4457      	add	r7, sl
 8008386:	b29b      	uxth	r3, r3
 8008388:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800838c:	f84e 3b04 	str.w	r3, [lr], #4
 8008390:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008394:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008398:	f8be 3000 	ldrh.w	r3, [lr]
 800839c:	fb09 330a 	mla	r3, r9, sl, r3
 80083a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083a4:	4562      	cmp	r2, ip
 80083a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083aa:	d8e5      	bhi.n	8008378 <__multiply+0x10c>
 80083ac:	9f01      	ldr	r7, [sp, #4]
 80083ae:	51eb      	str	r3, [r5, r7]
 80083b0:	3504      	adds	r5, #4
 80083b2:	e799      	b.n	80082e8 <__multiply+0x7c>
 80083b4:	3e01      	subs	r6, #1
 80083b6:	e79b      	b.n	80082f0 <__multiply+0x84>
 80083b8:	08009ac0 	.word	0x08009ac0
 80083bc:	08009ad1 	.word	0x08009ad1

080083c0 <__pow5mult>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	4615      	mov	r5, r2
 80083c6:	f012 0203 	ands.w	r2, r2, #3
 80083ca:	4607      	mov	r7, r0
 80083cc:	460e      	mov	r6, r1
 80083ce:	d007      	beq.n	80083e0 <__pow5mult+0x20>
 80083d0:	4c25      	ldr	r4, [pc, #148]	@ (8008468 <__pow5mult+0xa8>)
 80083d2:	3a01      	subs	r2, #1
 80083d4:	2300      	movs	r3, #0
 80083d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083da:	f7ff fe9f 	bl	800811c <__multadd>
 80083de:	4606      	mov	r6, r0
 80083e0:	10ad      	asrs	r5, r5, #2
 80083e2:	d03d      	beq.n	8008460 <__pow5mult+0xa0>
 80083e4:	69fc      	ldr	r4, [r7, #28]
 80083e6:	b97c      	cbnz	r4, 8008408 <__pow5mult+0x48>
 80083e8:	2010      	movs	r0, #16
 80083ea:	f7ff fd7f 	bl	8007eec <malloc>
 80083ee:	4602      	mov	r2, r0
 80083f0:	61f8      	str	r0, [r7, #28]
 80083f2:	b928      	cbnz	r0, 8008400 <__pow5mult+0x40>
 80083f4:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <__pow5mult+0xac>)
 80083f6:	481e      	ldr	r0, [pc, #120]	@ (8008470 <__pow5mult+0xb0>)
 80083f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083fc:	f000 fbea 	bl	8008bd4 <__assert_func>
 8008400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008404:	6004      	str	r4, [r0, #0]
 8008406:	60c4      	str	r4, [r0, #12]
 8008408:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800840c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008410:	b94c      	cbnz	r4, 8008426 <__pow5mult+0x66>
 8008412:	f240 2171 	movw	r1, #625	@ 0x271
 8008416:	4638      	mov	r0, r7
 8008418:	f7ff ff12 	bl	8008240 <__i2b>
 800841c:	2300      	movs	r3, #0
 800841e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008422:	4604      	mov	r4, r0
 8008424:	6003      	str	r3, [r0, #0]
 8008426:	f04f 0900 	mov.w	r9, #0
 800842a:	07eb      	lsls	r3, r5, #31
 800842c:	d50a      	bpl.n	8008444 <__pow5mult+0x84>
 800842e:	4631      	mov	r1, r6
 8008430:	4622      	mov	r2, r4
 8008432:	4638      	mov	r0, r7
 8008434:	f7ff ff1a 	bl	800826c <__multiply>
 8008438:	4631      	mov	r1, r6
 800843a:	4680      	mov	r8, r0
 800843c:	4638      	mov	r0, r7
 800843e:	f7ff fe4b 	bl	80080d8 <_Bfree>
 8008442:	4646      	mov	r6, r8
 8008444:	106d      	asrs	r5, r5, #1
 8008446:	d00b      	beq.n	8008460 <__pow5mult+0xa0>
 8008448:	6820      	ldr	r0, [r4, #0]
 800844a:	b938      	cbnz	r0, 800845c <__pow5mult+0x9c>
 800844c:	4622      	mov	r2, r4
 800844e:	4621      	mov	r1, r4
 8008450:	4638      	mov	r0, r7
 8008452:	f7ff ff0b 	bl	800826c <__multiply>
 8008456:	6020      	str	r0, [r4, #0]
 8008458:	f8c0 9000 	str.w	r9, [r0]
 800845c:	4604      	mov	r4, r0
 800845e:	e7e4      	b.n	800842a <__pow5mult+0x6a>
 8008460:	4630      	mov	r0, r6
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	bf00      	nop
 8008468:	08009b2c 	.word	0x08009b2c
 800846c:	08009a51 	.word	0x08009a51
 8008470:	08009ad1 	.word	0x08009ad1

08008474 <__lshift>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	460c      	mov	r4, r1
 800847a:	6849      	ldr	r1, [r1, #4]
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008482:	68a3      	ldr	r3, [r4, #8]
 8008484:	4607      	mov	r7, r0
 8008486:	4691      	mov	r9, r2
 8008488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800848c:	f108 0601 	add.w	r6, r8, #1
 8008490:	42b3      	cmp	r3, r6
 8008492:	db0b      	blt.n	80084ac <__lshift+0x38>
 8008494:	4638      	mov	r0, r7
 8008496:	f7ff fddf 	bl	8008058 <_Balloc>
 800849a:	4605      	mov	r5, r0
 800849c:	b948      	cbnz	r0, 80084b2 <__lshift+0x3e>
 800849e:	4602      	mov	r2, r0
 80084a0:	4b28      	ldr	r3, [pc, #160]	@ (8008544 <__lshift+0xd0>)
 80084a2:	4829      	ldr	r0, [pc, #164]	@ (8008548 <__lshift+0xd4>)
 80084a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084a8:	f000 fb94 	bl	8008bd4 <__assert_func>
 80084ac:	3101      	adds	r1, #1
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	e7ee      	b.n	8008490 <__lshift+0x1c>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f100 0114 	add.w	r1, r0, #20
 80084b8:	f100 0210 	add.w	r2, r0, #16
 80084bc:	4618      	mov	r0, r3
 80084be:	4553      	cmp	r3, sl
 80084c0:	db33      	blt.n	800852a <__lshift+0xb6>
 80084c2:	6920      	ldr	r0, [r4, #16]
 80084c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c8:	f104 0314 	add.w	r3, r4, #20
 80084cc:	f019 091f 	ands.w	r9, r9, #31
 80084d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084d8:	d02b      	beq.n	8008532 <__lshift+0xbe>
 80084da:	f1c9 0e20 	rsb	lr, r9, #32
 80084de:	468a      	mov	sl, r1
 80084e0:	2200      	movs	r2, #0
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	fa00 f009 	lsl.w	r0, r0, r9
 80084e8:	4310      	orrs	r0, r2
 80084ea:	f84a 0b04 	str.w	r0, [sl], #4
 80084ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f2:	459c      	cmp	ip, r3
 80084f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80084f8:	d8f3      	bhi.n	80084e2 <__lshift+0x6e>
 80084fa:	ebac 0304 	sub.w	r3, ip, r4
 80084fe:	3b15      	subs	r3, #21
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	3304      	adds	r3, #4
 8008506:	f104 0015 	add.w	r0, r4, #21
 800850a:	4584      	cmp	ip, r0
 800850c:	bf38      	it	cc
 800850e:	2304      	movcc	r3, #4
 8008510:	50ca      	str	r2, [r1, r3]
 8008512:	b10a      	cbz	r2, 8008518 <__lshift+0xa4>
 8008514:	f108 0602 	add.w	r6, r8, #2
 8008518:	3e01      	subs	r6, #1
 800851a:	4638      	mov	r0, r7
 800851c:	612e      	str	r6, [r5, #16]
 800851e:	4621      	mov	r1, r4
 8008520:	f7ff fdda 	bl	80080d8 <_Bfree>
 8008524:	4628      	mov	r0, r5
 8008526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852a:	f842 0f04 	str.w	r0, [r2, #4]!
 800852e:	3301      	adds	r3, #1
 8008530:	e7c5      	b.n	80084be <__lshift+0x4a>
 8008532:	3904      	subs	r1, #4
 8008534:	f853 2b04 	ldr.w	r2, [r3], #4
 8008538:	f841 2f04 	str.w	r2, [r1, #4]!
 800853c:	459c      	cmp	ip, r3
 800853e:	d8f9      	bhi.n	8008534 <__lshift+0xc0>
 8008540:	e7ea      	b.n	8008518 <__lshift+0xa4>
 8008542:	bf00      	nop
 8008544:	08009ac0 	.word	0x08009ac0
 8008548:	08009ad1 	.word	0x08009ad1

0800854c <__mcmp>:
 800854c:	690a      	ldr	r2, [r1, #16]
 800854e:	4603      	mov	r3, r0
 8008550:	6900      	ldr	r0, [r0, #16]
 8008552:	1a80      	subs	r0, r0, r2
 8008554:	b530      	push	{r4, r5, lr}
 8008556:	d10e      	bne.n	8008576 <__mcmp+0x2a>
 8008558:	3314      	adds	r3, #20
 800855a:	3114      	adds	r1, #20
 800855c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008560:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008564:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008568:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800856c:	4295      	cmp	r5, r2
 800856e:	d003      	beq.n	8008578 <__mcmp+0x2c>
 8008570:	d205      	bcs.n	800857e <__mcmp+0x32>
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	bd30      	pop	{r4, r5, pc}
 8008578:	42a3      	cmp	r3, r4
 800857a:	d3f3      	bcc.n	8008564 <__mcmp+0x18>
 800857c:	e7fb      	b.n	8008576 <__mcmp+0x2a>
 800857e:	2001      	movs	r0, #1
 8008580:	e7f9      	b.n	8008576 <__mcmp+0x2a>
	...

08008584 <__mdiff>:
 8008584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	4689      	mov	r9, r1
 800858a:	4606      	mov	r6, r0
 800858c:	4611      	mov	r1, r2
 800858e:	4648      	mov	r0, r9
 8008590:	4614      	mov	r4, r2
 8008592:	f7ff ffdb 	bl	800854c <__mcmp>
 8008596:	1e05      	subs	r5, r0, #0
 8008598:	d112      	bne.n	80085c0 <__mdiff+0x3c>
 800859a:	4629      	mov	r1, r5
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff fd5b 	bl	8008058 <_Balloc>
 80085a2:	4602      	mov	r2, r0
 80085a4:	b928      	cbnz	r0, 80085b2 <__mdiff+0x2e>
 80085a6:	4b3f      	ldr	r3, [pc, #252]	@ (80086a4 <__mdiff+0x120>)
 80085a8:	f240 2137 	movw	r1, #567	@ 0x237
 80085ac:	483e      	ldr	r0, [pc, #248]	@ (80086a8 <__mdiff+0x124>)
 80085ae:	f000 fb11 	bl	8008bd4 <__assert_func>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085b8:	4610      	mov	r0, r2
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	bfbc      	itt	lt
 80085c2:	464b      	movlt	r3, r9
 80085c4:	46a1      	movlt	r9, r4
 80085c6:	4630      	mov	r0, r6
 80085c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085cc:	bfba      	itte	lt
 80085ce:	461c      	movlt	r4, r3
 80085d0:	2501      	movlt	r5, #1
 80085d2:	2500      	movge	r5, #0
 80085d4:	f7ff fd40 	bl	8008058 <_Balloc>
 80085d8:	4602      	mov	r2, r0
 80085da:	b918      	cbnz	r0, 80085e4 <__mdiff+0x60>
 80085dc:	4b31      	ldr	r3, [pc, #196]	@ (80086a4 <__mdiff+0x120>)
 80085de:	f240 2145 	movw	r1, #581	@ 0x245
 80085e2:	e7e3      	b.n	80085ac <__mdiff+0x28>
 80085e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085e8:	6926      	ldr	r6, [r4, #16]
 80085ea:	60c5      	str	r5, [r0, #12]
 80085ec:	f109 0310 	add.w	r3, r9, #16
 80085f0:	f109 0514 	add.w	r5, r9, #20
 80085f4:	f104 0e14 	add.w	lr, r4, #20
 80085f8:	f100 0b14 	add.w	fp, r0, #20
 80085fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008600:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	46d9      	mov	r9, fp
 8008608:	f04f 0c00 	mov.w	ip, #0
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008612:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	fa1f f38a 	uxth.w	r3, sl
 800861c:	4619      	mov	r1, r3
 800861e:	b283      	uxth	r3, r0
 8008620:	1acb      	subs	r3, r1, r3
 8008622:	0c00      	lsrs	r0, r0, #16
 8008624:	4463      	add	r3, ip
 8008626:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800862a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800862e:	b29b      	uxth	r3, r3
 8008630:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008634:	4576      	cmp	r6, lr
 8008636:	f849 3b04 	str.w	r3, [r9], #4
 800863a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800863e:	d8e5      	bhi.n	800860c <__mdiff+0x88>
 8008640:	1b33      	subs	r3, r6, r4
 8008642:	3b15      	subs	r3, #21
 8008644:	f023 0303 	bic.w	r3, r3, #3
 8008648:	3415      	adds	r4, #21
 800864a:	3304      	adds	r3, #4
 800864c:	42a6      	cmp	r6, r4
 800864e:	bf38      	it	cc
 8008650:	2304      	movcc	r3, #4
 8008652:	441d      	add	r5, r3
 8008654:	445b      	add	r3, fp
 8008656:	461e      	mov	r6, r3
 8008658:	462c      	mov	r4, r5
 800865a:	4544      	cmp	r4, r8
 800865c:	d30e      	bcc.n	800867c <__mdiff+0xf8>
 800865e:	f108 0103 	add.w	r1, r8, #3
 8008662:	1b49      	subs	r1, r1, r5
 8008664:	f021 0103 	bic.w	r1, r1, #3
 8008668:	3d03      	subs	r5, #3
 800866a:	45a8      	cmp	r8, r5
 800866c:	bf38      	it	cc
 800866e:	2100      	movcc	r1, #0
 8008670:	440b      	add	r3, r1
 8008672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008676:	b191      	cbz	r1, 800869e <__mdiff+0x11a>
 8008678:	6117      	str	r7, [r2, #16]
 800867a:	e79d      	b.n	80085b8 <__mdiff+0x34>
 800867c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008680:	46e6      	mov	lr, ip
 8008682:	0c08      	lsrs	r0, r1, #16
 8008684:	fa1c fc81 	uxtah	ip, ip, r1
 8008688:	4471      	add	r1, lr
 800868a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800868e:	b289      	uxth	r1, r1
 8008690:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008694:	f846 1b04 	str.w	r1, [r6], #4
 8008698:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800869c:	e7dd      	b.n	800865a <__mdiff+0xd6>
 800869e:	3f01      	subs	r7, #1
 80086a0:	e7e7      	b.n	8008672 <__mdiff+0xee>
 80086a2:	bf00      	nop
 80086a4:	08009ac0 	.word	0x08009ac0
 80086a8:	08009ad1 	.word	0x08009ad1

080086ac <__d2b>:
 80086ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	460f      	mov	r7, r1
 80086b2:	2101      	movs	r1, #1
 80086b4:	ec59 8b10 	vmov	r8, r9, d0
 80086b8:	4616      	mov	r6, r2
 80086ba:	f7ff fccd 	bl	8008058 <_Balloc>
 80086be:	4604      	mov	r4, r0
 80086c0:	b930      	cbnz	r0, 80086d0 <__d2b+0x24>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4b23      	ldr	r3, [pc, #140]	@ (8008754 <__d2b+0xa8>)
 80086c6:	4824      	ldr	r0, [pc, #144]	@ (8008758 <__d2b+0xac>)
 80086c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80086cc:	f000 fa82 	bl	8008bd4 <__assert_func>
 80086d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086d8:	b10d      	cbz	r5, 80086de <__d2b+0x32>
 80086da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	f1b8 0300 	subs.w	r3, r8, #0
 80086e4:	d023      	beq.n	800872e <__d2b+0x82>
 80086e6:	4668      	mov	r0, sp
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	f7ff fd7c 	bl	80081e6 <__lo0bits>
 80086ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086f2:	b1d0      	cbz	r0, 800872a <__d2b+0x7e>
 80086f4:	f1c0 0320 	rsb	r3, r0, #32
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	430b      	orrs	r3, r1
 80086fe:	40c2      	lsrs	r2, r0
 8008700:	6163      	str	r3, [r4, #20]
 8008702:	9201      	str	r2, [sp, #4]
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	61a3      	str	r3, [r4, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bf0c      	ite	eq
 800870c:	2201      	moveq	r2, #1
 800870e:	2202      	movne	r2, #2
 8008710:	6122      	str	r2, [r4, #16]
 8008712:	b1a5      	cbz	r5, 800873e <__d2b+0x92>
 8008714:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008718:	4405      	add	r5, r0
 800871a:	603d      	str	r5, [r7, #0]
 800871c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008720:	6030      	str	r0, [r6, #0]
 8008722:	4620      	mov	r0, r4
 8008724:	b003      	add	sp, #12
 8008726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800872a:	6161      	str	r1, [r4, #20]
 800872c:	e7ea      	b.n	8008704 <__d2b+0x58>
 800872e:	a801      	add	r0, sp, #4
 8008730:	f7ff fd59 	bl	80081e6 <__lo0bits>
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	3020      	adds	r0, #32
 800873a:	2201      	movs	r2, #1
 800873c:	e7e8      	b.n	8008710 <__d2b+0x64>
 800873e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008742:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008746:	6038      	str	r0, [r7, #0]
 8008748:	6918      	ldr	r0, [r3, #16]
 800874a:	f7ff fd2d 	bl	80081a8 <__hi0bits>
 800874e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008752:	e7e5      	b.n	8008720 <__d2b+0x74>
 8008754:	08009ac0 	.word	0x08009ac0
 8008758:	08009ad1 	.word	0x08009ad1

0800875c <__ssputs_r>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	688e      	ldr	r6, [r1, #8]
 8008762:	461f      	mov	r7, r3
 8008764:	42be      	cmp	r6, r7
 8008766:	680b      	ldr	r3, [r1, #0]
 8008768:	4682      	mov	sl, r0
 800876a:	460c      	mov	r4, r1
 800876c:	4690      	mov	r8, r2
 800876e:	d82d      	bhi.n	80087cc <__ssputs_r+0x70>
 8008770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008778:	d026      	beq.n	80087c8 <__ssputs_r+0x6c>
 800877a:	6965      	ldr	r5, [r4, #20]
 800877c:	6909      	ldr	r1, [r1, #16]
 800877e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008782:	eba3 0901 	sub.w	r9, r3, r1
 8008786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800878a:	1c7b      	adds	r3, r7, #1
 800878c:	444b      	add	r3, r9
 800878e:	106d      	asrs	r5, r5, #1
 8008790:	429d      	cmp	r5, r3
 8008792:	bf38      	it	cc
 8008794:	461d      	movcc	r5, r3
 8008796:	0553      	lsls	r3, r2, #21
 8008798:	d527      	bpl.n	80087ea <__ssputs_r+0x8e>
 800879a:	4629      	mov	r1, r5
 800879c:	f7ff fbd0 	bl	8007f40 <_malloc_r>
 80087a0:	4606      	mov	r6, r0
 80087a2:	b360      	cbz	r0, 80087fe <__ssputs_r+0xa2>
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	464a      	mov	r2, r9
 80087a8:	f000 fa06 	bl	8008bb8 <memcpy>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	6165      	str	r5, [r4, #20]
 80087bc:	444e      	add	r6, r9
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	6026      	str	r6, [r4, #0]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	463e      	mov	r6, r7
 80087c8:	42be      	cmp	r6, r7
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x72>
 80087cc:	463e      	mov	r6, r7
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4641      	mov	r1, r8
 80087d4:	f000 f9c6 	bl	8008b64 <memmove>
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4433      	add	r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	462a      	mov	r2, r5
 80087ec:	f000 fa36 	bl	8008c5c <_realloc_r>
 80087f0:	4606      	mov	r6, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d1e0      	bne.n	80087b8 <__ssputs_r+0x5c>
 80087f6:	6921      	ldr	r1, [r4, #16]
 80087f8:	4650      	mov	r0, sl
 80087fa:	f7ff fb2d 	bl	8007e58 <_free_r>
 80087fe:	230c      	movs	r3, #12
 8008800:	f8ca 3000 	str.w	r3, [sl]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e7e9      	b.n	80087e6 <__ssputs_r+0x8a>
	...

08008814 <_svfiprintf_r>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4698      	mov	r8, r3
 800881a:	898b      	ldrh	r3, [r1, #12]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	b09d      	sub	sp, #116	@ 0x74
 8008820:	4607      	mov	r7, r0
 8008822:	460d      	mov	r5, r1
 8008824:	4614      	mov	r4, r2
 8008826:	d510      	bpl.n	800884a <_svfiprintf_r+0x36>
 8008828:	690b      	ldr	r3, [r1, #16]
 800882a:	b973      	cbnz	r3, 800884a <_svfiprintf_r+0x36>
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	f7ff fb87 	bl	8007f40 <_malloc_r>
 8008832:	6028      	str	r0, [r5, #0]
 8008834:	6128      	str	r0, [r5, #16]
 8008836:	b930      	cbnz	r0, 8008846 <_svfiprintf_r+0x32>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	b01d      	add	sp, #116	@ 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	2340      	movs	r3, #64	@ 0x40
 8008848:	616b      	str	r3, [r5, #20]
 800884a:	2300      	movs	r3, #0
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	2320      	movs	r3, #32
 8008850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008854:	f8cd 800c 	str.w	r8, [sp, #12]
 8008858:	2330      	movs	r3, #48	@ 0x30
 800885a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f8 <_svfiprintf_r+0x1e4>
 800885e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008862:	f04f 0901 	mov.w	r9, #1
 8008866:	4623      	mov	r3, r4
 8008868:	469a      	mov	sl, r3
 800886a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886e:	b10a      	cbz	r2, 8008874 <_svfiprintf_r+0x60>
 8008870:	2a25      	cmp	r2, #37	@ 0x25
 8008872:	d1f9      	bne.n	8008868 <_svfiprintf_r+0x54>
 8008874:	ebba 0b04 	subs.w	fp, sl, r4
 8008878:	d00b      	beq.n	8008892 <_svfiprintf_r+0x7e>
 800887a:	465b      	mov	r3, fp
 800887c:	4622      	mov	r2, r4
 800887e:	4629      	mov	r1, r5
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ff6b 	bl	800875c <__ssputs_r>
 8008886:	3001      	adds	r0, #1
 8008888:	f000 80a7 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800888c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888e:	445a      	add	r2, fp
 8008890:	9209      	str	r2, [sp, #36]	@ 0x24
 8008892:	f89a 3000 	ldrb.w	r3, [sl]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 809f 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800889c:	2300      	movs	r3, #0
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a6:	f10a 0a01 	add.w	sl, sl, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9307      	str	r3, [sp, #28]
 80088ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088b4:	4654      	mov	r4, sl
 80088b6:	2205      	movs	r2, #5
 80088b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088bc:	484e      	ldr	r0, [pc, #312]	@ (80089f8 <_svfiprintf_r+0x1e4>)
 80088be:	f7f7 fc8f 	bl	80001e0 <memchr>
 80088c2:	9a04      	ldr	r2, [sp, #16]
 80088c4:	b9d8      	cbnz	r0, 80088fe <_svfiprintf_r+0xea>
 80088c6:	06d0      	lsls	r0, r2, #27
 80088c8:	bf44      	itt	mi
 80088ca:	2320      	movmi	r3, #32
 80088cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d0:	0711      	lsls	r1, r2, #28
 80088d2:	bf44      	itt	mi
 80088d4:	232b      	movmi	r3, #43	@ 0x2b
 80088d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088da:	f89a 3000 	ldrb.w	r3, [sl]
 80088de:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e0:	d015      	beq.n	800890e <_svfiprintf_r+0xfa>
 80088e2:	9a07      	ldr	r2, [sp, #28]
 80088e4:	4654      	mov	r4, sl
 80088e6:	2000      	movs	r0, #0
 80088e8:	f04f 0c0a 	mov.w	ip, #10
 80088ec:	4621      	mov	r1, r4
 80088ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f2:	3b30      	subs	r3, #48	@ 0x30
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d94b      	bls.n	8008990 <_svfiprintf_r+0x17c>
 80088f8:	b1b0      	cbz	r0, 8008928 <_svfiprintf_r+0x114>
 80088fa:	9207      	str	r2, [sp, #28]
 80088fc:	e014      	b.n	8008928 <_svfiprintf_r+0x114>
 80088fe:	eba0 0308 	sub.w	r3, r0, r8
 8008902:	fa09 f303 	lsl.w	r3, r9, r3
 8008906:	4313      	orrs	r3, r2
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	46a2      	mov	sl, r4
 800890c:	e7d2      	b.n	80088b4 <_svfiprintf_r+0xa0>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	9103      	str	r1, [sp, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfbb      	ittet	lt
 800891a:	425b      	neglt	r3, r3
 800891c:	f042 0202 	orrlt.w	r2, r2, #2
 8008920:	9307      	strge	r3, [sp, #28]
 8008922:	9307      	strlt	r3, [sp, #28]
 8008924:	bfb8      	it	lt
 8008926:	9204      	strlt	r2, [sp, #16]
 8008928:	7823      	ldrb	r3, [r4, #0]
 800892a:	2b2e      	cmp	r3, #46	@ 0x2e
 800892c:	d10a      	bne.n	8008944 <_svfiprintf_r+0x130>
 800892e:	7863      	ldrb	r3, [r4, #1]
 8008930:	2b2a      	cmp	r3, #42	@ 0x2a
 8008932:	d132      	bne.n	800899a <_svfiprintf_r+0x186>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	9203      	str	r2, [sp, #12]
 800893c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008940:	3402      	adds	r4, #2
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a08 <_svfiprintf_r+0x1f4>
 8008948:	7821      	ldrb	r1, [r4, #0]
 800894a:	2203      	movs	r2, #3
 800894c:	4650      	mov	r0, sl
 800894e:	f7f7 fc47 	bl	80001e0 <memchr>
 8008952:	b138      	cbz	r0, 8008964 <_svfiprintf_r+0x150>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	eba0 000a 	sub.w	r0, r0, sl
 800895a:	2240      	movs	r2, #64	@ 0x40
 800895c:	4082      	lsls	r2, r0
 800895e:	4313      	orrs	r3, r2
 8008960:	3401      	adds	r4, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	4824      	ldr	r0, [pc, #144]	@ (80089fc <_svfiprintf_r+0x1e8>)
 800896a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800896e:	2206      	movs	r2, #6
 8008970:	f7f7 fc36 	bl	80001e0 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d036      	beq.n	80089e6 <_svfiprintf_r+0x1d2>
 8008978:	4b21      	ldr	r3, [pc, #132]	@ (8008a00 <_svfiprintf_r+0x1ec>)
 800897a:	bb1b      	cbnz	r3, 80089c4 <_svfiprintf_r+0x1b0>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	3308      	adds	r3, #8
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800898a:	4433      	add	r3, r6
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	e76a      	b.n	8008866 <_svfiprintf_r+0x52>
 8008990:	fb0c 3202 	mla	r2, ip, r2, r3
 8008994:	460c      	mov	r4, r1
 8008996:	2001      	movs	r0, #1
 8008998:	e7a8      	b.n	80088ec <_svfiprintf_r+0xd8>
 800899a:	2300      	movs	r3, #0
 800899c:	3401      	adds	r4, #1
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	3a30      	subs	r2, #48	@ 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_svfiprintf_r+0x1a6>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c6      	beq.n	8008944 <_svfiprintf_r+0x130>
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	e7c4      	b.n	8008944 <_svfiprintf_r+0x130>
 80089ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7f0      	b.n	80089a6 <_svfiprintf_r+0x192>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4638      	mov	r0, r7
 80089d0:	f7fd fe84 	bl	80066dc <_printf_float>
 80089d4:	1c42      	adds	r2, r0, #1
 80089d6:	4606      	mov	r6, r0
 80089d8:	d1d6      	bne.n	8008988 <_svfiprintf_r+0x174>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	065b      	lsls	r3, r3, #25
 80089de:	f53f af2d 	bmi.w	800883c <_svfiprintf_r+0x28>
 80089e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e4:	e72c      	b.n	8008840 <_svfiprintf_r+0x2c>
 80089e6:	ab03      	add	r3, sp, #12
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	462a      	mov	r2, r5
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089ee:	a904      	add	r1, sp, #16
 80089f0:	4638      	mov	r0, r7
 80089f2:	f7fe f90b 	bl	8006c0c <_printf_i>
 80089f6:	e7ed      	b.n	80089d4 <_svfiprintf_r+0x1c0>
 80089f8:	08009c28 	.word	0x08009c28
 80089fc:	08009c32 	.word	0x08009c32
 8008a00:	080066dd 	.word	0x080066dd
 8008a04:	0800875d 	.word	0x0800875d
 8008a08:	08009c2e 	.word	0x08009c2e

08008a0c <__sflush_r>:
 8008a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a14:	0716      	lsls	r6, r2, #28
 8008a16:	4605      	mov	r5, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	d454      	bmi.n	8008ac6 <__sflush_r+0xba>
 8008a1c:	684b      	ldr	r3, [r1, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dc02      	bgt.n	8008a28 <__sflush_r+0x1c>
 8008a22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd48      	ble.n	8008aba <__sflush_r+0xae>
 8008a28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d045      	beq.n	8008aba <__sflush_r+0xae>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a34:	682f      	ldr	r7, [r5, #0]
 8008a36:	6a21      	ldr	r1, [r4, #32]
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	d030      	beq.n	8008a9e <__sflush_r+0x92>
 8008a3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	0759      	lsls	r1, r3, #29
 8008a42:	d505      	bpl.n	8008a50 <__sflush_r+0x44>
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a4a:	b10b      	cbz	r3, 8008a50 <__sflush_r+0x44>
 8008a4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	2300      	movs	r3, #0
 8008a52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a54:	6a21      	ldr	r1, [r4, #32]
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b0      	blx	r6
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	d106      	bne.n	8008a6e <__sflush_r+0x62>
 8008a60:	6829      	ldr	r1, [r5, #0]
 8008a62:	291d      	cmp	r1, #29
 8008a64:	d82b      	bhi.n	8008abe <__sflush_r+0xb2>
 8008a66:	4a2a      	ldr	r2, [pc, #168]	@ (8008b10 <__sflush_r+0x104>)
 8008a68:	410a      	asrs	r2, r1
 8008a6a:	07d6      	lsls	r6, r2, #31
 8008a6c:	d427      	bmi.n	8008abe <__sflush_r+0xb2>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6062      	str	r2, [r4, #4]
 8008a72:	04d9      	lsls	r1, r3, #19
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	d504      	bpl.n	8008a84 <__sflush_r+0x78>
 8008a7a:	1c42      	adds	r2, r0, #1
 8008a7c:	d101      	bne.n	8008a82 <__sflush_r+0x76>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b903      	cbnz	r3, 8008a84 <__sflush_r+0x78>
 8008a82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a86:	602f      	str	r7, [r5, #0]
 8008a88:	b1b9      	cbz	r1, 8008aba <__sflush_r+0xae>
 8008a8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	d002      	beq.n	8008a98 <__sflush_r+0x8c>
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7ff f9e0 	bl	8007e58 <_free_r>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a9c:	e00d      	b.n	8008aba <__sflush_r+0xae>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	1c50      	adds	r0, r2, #1
 8008aa8:	d1c9      	bne.n	8008a3e <__sflush_r+0x32>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0c6      	beq.n	8008a3e <__sflush_r+0x32>
 8008ab0:	2b1d      	cmp	r3, #29
 8008ab2:	d001      	beq.n	8008ab8 <__sflush_r+0xac>
 8008ab4:	2b16      	cmp	r3, #22
 8008ab6:	d11e      	bne.n	8008af6 <__sflush_r+0xea>
 8008ab8:	602f      	str	r7, [r5, #0]
 8008aba:	2000      	movs	r0, #0
 8008abc:	e022      	b.n	8008b04 <__sflush_r+0xf8>
 8008abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac2:	b21b      	sxth	r3, r3
 8008ac4:	e01b      	b.n	8008afe <__sflush_r+0xf2>
 8008ac6:	690f      	ldr	r7, [r1, #16]
 8008ac8:	2f00      	cmp	r7, #0
 8008aca:	d0f6      	beq.n	8008aba <__sflush_r+0xae>
 8008acc:	0793      	lsls	r3, r2, #30
 8008ace:	680e      	ldr	r6, [r1, #0]
 8008ad0:	bf08      	it	eq
 8008ad2:	694b      	ldreq	r3, [r1, #20]
 8008ad4:	600f      	str	r7, [r1, #0]
 8008ad6:	bf18      	it	ne
 8008ad8:	2300      	movne	r3, #0
 8008ada:	eba6 0807 	sub.w	r8, r6, r7
 8008ade:	608b      	str	r3, [r1, #8]
 8008ae0:	f1b8 0f00 	cmp.w	r8, #0
 8008ae4:	dde9      	ble.n	8008aba <__sflush_r+0xae>
 8008ae6:	6a21      	ldr	r1, [r4, #32]
 8008ae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aea:	4643      	mov	r3, r8
 8008aec:	463a      	mov	r2, r7
 8008aee:	4628      	mov	r0, r5
 8008af0:	47b0      	blx	r6
 8008af2:	2800      	cmp	r0, #0
 8008af4:	dc08      	bgt.n	8008b08 <__sflush_r+0xfc>
 8008af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b08:	4407      	add	r7, r0
 8008b0a:	eba8 0800 	sub.w	r8, r8, r0
 8008b0e:	e7e7      	b.n	8008ae0 <__sflush_r+0xd4>
 8008b10:	dfbffffe 	.word	0xdfbffffe

08008b14 <_fflush_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	690b      	ldr	r3, [r1, #16]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b913      	cbnz	r3, 8008b24 <_fflush_r+0x10>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	4628      	mov	r0, r5
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	b118      	cbz	r0, 8008b2e <_fflush_r+0x1a>
 8008b26:	6a03      	ldr	r3, [r0, #32]
 8008b28:	b90b      	cbnz	r3, 8008b2e <_fflush_r+0x1a>
 8008b2a:	f7fe fa1b 	bl	8006f64 <__sinit>
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f3      	beq.n	8008b1e <_fflush_r+0xa>
 8008b36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b38:	07d0      	lsls	r0, r2, #31
 8008b3a:	d404      	bmi.n	8008b46 <_fflush_r+0x32>
 8008b3c:	0599      	lsls	r1, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_fflush_r+0x32>
 8008b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b42:	f7fe fb3a 	bl	80071ba <__retarget_lock_acquire_recursive>
 8008b46:	4628      	mov	r0, r5
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7ff ff5f 	bl	8008a0c <__sflush_r>
 8008b4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b50:	07da      	lsls	r2, r3, #31
 8008b52:	4605      	mov	r5, r0
 8008b54:	d4e4      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d4e1      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5e:	f7fe fb2d 	bl	80071bc <__retarget_lock_release_recursive>
 8008b62:	e7dd      	b.n	8008b20 <_fflush_r+0xc>

08008b64 <memmove>:
 8008b64:	4288      	cmp	r0, r1
 8008b66:	b510      	push	{r4, lr}
 8008b68:	eb01 0402 	add.w	r4, r1, r2
 8008b6c:	d902      	bls.n	8008b74 <memmove+0x10>
 8008b6e:	4284      	cmp	r4, r0
 8008b70:	4623      	mov	r3, r4
 8008b72:	d807      	bhi.n	8008b84 <memmove+0x20>
 8008b74:	1e43      	subs	r3, r0, #1
 8008b76:	42a1      	cmp	r1, r4
 8008b78:	d008      	beq.n	8008b8c <memmove+0x28>
 8008b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b82:	e7f8      	b.n	8008b76 <memmove+0x12>
 8008b84:	4402      	add	r2, r0
 8008b86:	4601      	mov	r1, r0
 8008b88:	428a      	cmp	r2, r1
 8008b8a:	d100      	bne.n	8008b8e <memmove+0x2a>
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b96:	e7f7      	b.n	8008b88 <memmove+0x24>

08008b98 <_sbrk_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d06      	ldr	r5, [pc, #24]	@ (8008bb4 <_sbrk_r+0x1c>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7f9 fad6 	bl	8002154 <_sbrk>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_sbrk_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_sbrk_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	20000904 	.word	0x20000904

08008bb8 <memcpy>:
 8008bb8:	440a      	add	r2, r1
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc0:	d100      	bne.n	8008bc4 <memcpy+0xc>
 8008bc2:	4770      	bx	lr
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bce:	4291      	cmp	r1, r2
 8008bd0:	d1f9      	bne.n	8008bc6 <memcpy+0xe>
 8008bd2:	bd10      	pop	{r4, pc}

08008bd4 <__assert_func>:
 8008bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <__assert_func+0x2c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4605      	mov	r5, r0
 8008be0:	68d8      	ldr	r0, [r3, #12]
 8008be2:	b954      	cbnz	r4, 8008bfa <__assert_func+0x26>
 8008be4:	4b07      	ldr	r3, [pc, #28]	@ (8008c04 <__assert_func+0x30>)
 8008be6:	461c      	mov	r4, r3
 8008be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bec:	9100      	str	r1, [sp, #0]
 8008bee:	462b      	mov	r3, r5
 8008bf0:	4905      	ldr	r1, [pc, #20]	@ (8008c08 <__assert_func+0x34>)
 8008bf2:	f000 f86f 	bl	8008cd4 <fiprintf>
 8008bf6:	f000 f87f 	bl	8008cf8 <abort>
 8008bfa:	4b04      	ldr	r3, [pc, #16]	@ (8008c0c <__assert_func+0x38>)
 8008bfc:	e7f4      	b.n	8008be8 <__assert_func+0x14>
 8008bfe:	bf00      	nop
 8008c00:	20000020 	.word	0x20000020
 8008c04:	08009c7e 	.word	0x08009c7e
 8008c08:	08009c50 	.word	0x08009c50
 8008c0c:	08009c43 	.word	0x08009c43

08008c10 <_calloc_r>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	fba1 5402 	umull	r5, r4, r1, r2
 8008c16:	b93c      	cbnz	r4, 8008c28 <_calloc_r+0x18>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7ff f991 	bl	8007f40 <_malloc_r>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	b928      	cbnz	r0, 8008c2e <_calloc_r+0x1e>
 8008c22:	2600      	movs	r6, #0
 8008c24:	4630      	mov	r0, r6
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	220c      	movs	r2, #12
 8008c2a:	6002      	str	r2, [r0, #0]
 8008c2c:	e7f9      	b.n	8008c22 <_calloc_r+0x12>
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4621      	mov	r1, r4
 8008c32:	f7fe fa44 	bl	80070be <memset>
 8008c36:	e7f5      	b.n	8008c24 <_calloc_r+0x14>

08008c38 <__ascii_mbtowc>:
 8008c38:	b082      	sub	sp, #8
 8008c3a:	b901      	cbnz	r1, 8008c3e <__ascii_mbtowc+0x6>
 8008c3c:	a901      	add	r1, sp, #4
 8008c3e:	b142      	cbz	r2, 8008c52 <__ascii_mbtowc+0x1a>
 8008c40:	b14b      	cbz	r3, 8008c56 <__ascii_mbtowc+0x1e>
 8008c42:	7813      	ldrb	r3, [r2, #0]
 8008c44:	600b      	str	r3, [r1, #0]
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	1e10      	subs	r0, r2, #0
 8008c4a:	bf18      	it	ne
 8008c4c:	2001      	movne	r0, #1
 8008c4e:	b002      	add	sp, #8
 8008c50:	4770      	bx	lr
 8008c52:	4610      	mov	r0, r2
 8008c54:	e7fb      	b.n	8008c4e <__ascii_mbtowc+0x16>
 8008c56:	f06f 0001 	mvn.w	r0, #1
 8008c5a:	e7f8      	b.n	8008c4e <__ascii_mbtowc+0x16>

08008c5c <_realloc_r>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	4680      	mov	r8, r0
 8008c62:	4615      	mov	r5, r2
 8008c64:	460c      	mov	r4, r1
 8008c66:	b921      	cbnz	r1, 8008c72 <_realloc_r+0x16>
 8008c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	f7ff b967 	b.w	8007f40 <_malloc_r>
 8008c72:	b92a      	cbnz	r2, 8008c80 <_realloc_r+0x24>
 8008c74:	f7ff f8f0 	bl	8007e58 <_free_r>
 8008c78:	2400      	movs	r4, #0
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c80:	f000 f841 	bl	8008d06 <_malloc_usable_size_r>
 8008c84:	4285      	cmp	r5, r0
 8008c86:	4606      	mov	r6, r0
 8008c88:	d802      	bhi.n	8008c90 <_realloc_r+0x34>
 8008c8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c8e:	d8f4      	bhi.n	8008c7a <_realloc_r+0x1e>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4640      	mov	r0, r8
 8008c94:	f7ff f954 	bl	8007f40 <_malloc_r>
 8008c98:	4607      	mov	r7, r0
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d0ec      	beq.n	8008c78 <_realloc_r+0x1c>
 8008c9e:	42b5      	cmp	r5, r6
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	bf28      	it	cs
 8008ca6:	4632      	movcs	r2, r6
 8008ca8:	f7ff ff86 	bl	8008bb8 <memcpy>
 8008cac:	4621      	mov	r1, r4
 8008cae:	4640      	mov	r0, r8
 8008cb0:	f7ff f8d2 	bl	8007e58 <_free_r>
 8008cb4:	463c      	mov	r4, r7
 8008cb6:	e7e0      	b.n	8008c7a <_realloc_r+0x1e>

08008cb8 <__ascii_wctomb>:
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4608      	mov	r0, r1
 8008cbc:	b141      	cbz	r1, 8008cd0 <__ascii_wctomb+0x18>
 8008cbe:	2aff      	cmp	r2, #255	@ 0xff
 8008cc0:	d904      	bls.n	8008ccc <__ascii_wctomb+0x14>
 8008cc2:	228a      	movs	r2, #138	@ 0x8a
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	4770      	bx	lr
 8008ccc:	700a      	strb	r2, [r1, #0]
 8008cce:	2001      	movs	r0, #1
 8008cd0:	4770      	bx	lr
	...

08008cd4 <fiprintf>:
 8008cd4:	b40e      	push	{r1, r2, r3}
 8008cd6:	b503      	push	{r0, r1, lr}
 8008cd8:	4601      	mov	r1, r0
 8008cda:	ab03      	add	r3, sp, #12
 8008cdc:	4805      	ldr	r0, [pc, #20]	@ (8008cf4 <fiprintf+0x20>)
 8008cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce2:	6800      	ldr	r0, [r0, #0]
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	f000 f83f 	bl	8008d68 <_vfiprintf_r>
 8008cea:	b002      	add	sp, #8
 8008cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cf0:	b003      	add	sp, #12
 8008cf2:	4770      	bx	lr
 8008cf4:	20000020 	.word	0x20000020

08008cf8 <abort>:
 8008cf8:	b508      	push	{r3, lr}
 8008cfa:	2006      	movs	r0, #6
 8008cfc:	f000 fa08 	bl	8009110 <raise>
 8008d00:	2001      	movs	r0, #1
 8008d02:	f7f9 f9af 	bl	8002064 <_exit>

08008d06 <_malloc_usable_size_r>:
 8008d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d0a:	1f18      	subs	r0, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfbc      	itt	lt
 8008d10:	580b      	ldrlt	r3, [r1, r0]
 8008d12:	18c0      	addlt	r0, r0, r3
 8008d14:	4770      	bx	lr

08008d16 <__sfputc_r>:
 8008d16:	6893      	ldr	r3, [r2, #8]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	b410      	push	{r4}
 8008d1e:	6093      	str	r3, [r2, #8]
 8008d20:	da08      	bge.n	8008d34 <__sfputc_r+0x1e>
 8008d22:	6994      	ldr	r4, [r2, #24]
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	db01      	blt.n	8008d2c <__sfputc_r+0x16>
 8008d28:	290a      	cmp	r1, #10
 8008d2a:	d103      	bne.n	8008d34 <__sfputc_r+0x1e>
 8008d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d30:	f000 b932 	b.w	8008f98 <__swbuf_r>
 8008d34:	6813      	ldr	r3, [r2, #0]
 8008d36:	1c58      	adds	r0, r3, #1
 8008d38:	6010      	str	r0, [r2, #0]
 8008d3a:	7019      	strb	r1, [r3, #0]
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <__sfputs_r>:
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d46:	4606      	mov	r6, r0
 8008d48:	460f      	mov	r7, r1
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	18d5      	adds	r5, r2, r3
 8008d4e:	42ac      	cmp	r4, r5
 8008d50:	d101      	bne.n	8008d56 <__sfputs_r+0x12>
 8008d52:	2000      	movs	r0, #0
 8008d54:	e007      	b.n	8008d66 <__sfputs_r+0x22>
 8008d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ffda 	bl	8008d16 <__sfputc_r>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d1f3      	bne.n	8008d4e <__sfputs_r+0xa>
 8008d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d68 <_vfiprintf_r>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	b09d      	sub	sp, #116	@ 0x74
 8008d70:	4614      	mov	r4, r2
 8008d72:	4698      	mov	r8, r3
 8008d74:	4606      	mov	r6, r0
 8008d76:	b118      	cbz	r0, 8008d80 <_vfiprintf_r+0x18>
 8008d78:	6a03      	ldr	r3, [r0, #32]
 8008d7a:	b90b      	cbnz	r3, 8008d80 <_vfiprintf_r+0x18>
 8008d7c:	f7fe f8f2 	bl	8006f64 <__sinit>
 8008d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d82:	07d9      	lsls	r1, r3, #31
 8008d84:	d405      	bmi.n	8008d92 <_vfiprintf_r+0x2a>
 8008d86:	89ab      	ldrh	r3, [r5, #12]
 8008d88:	059a      	lsls	r2, r3, #22
 8008d8a:	d402      	bmi.n	8008d92 <_vfiprintf_r+0x2a>
 8008d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d8e:	f7fe fa14 	bl	80071ba <__retarget_lock_acquire_recursive>
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	071b      	lsls	r3, r3, #28
 8008d96:	d501      	bpl.n	8008d9c <_vfiprintf_r+0x34>
 8008d98:	692b      	ldr	r3, [r5, #16]
 8008d9a:	b99b      	cbnz	r3, 8008dc4 <_vfiprintf_r+0x5c>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f000 f938 	bl	8009014 <__swsetup_r>
 8008da4:	b170      	cbz	r0, 8008dc4 <_vfiprintf_r+0x5c>
 8008da6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008da8:	07dc      	lsls	r4, r3, #31
 8008daa:	d504      	bpl.n	8008db6 <_vfiprintf_r+0x4e>
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	b01d      	add	sp, #116	@ 0x74
 8008db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	0598      	lsls	r0, r3, #22
 8008dba:	d4f7      	bmi.n	8008dac <_vfiprintf_r+0x44>
 8008dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dbe:	f7fe f9fd 	bl	80071bc <__retarget_lock_release_recursive>
 8008dc2:	e7f3      	b.n	8008dac <_vfiprintf_r+0x44>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd2:	2330      	movs	r3, #48	@ 0x30
 8008dd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f84 <_vfiprintf_r+0x21c>
 8008dd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ddc:	f04f 0901 	mov.w	r9, #1
 8008de0:	4623      	mov	r3, r4
 8008de2:	469a      	mov	sl, r3
 8008de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de8:	b10a      	cbz	r2, 8008dee <_vfiprintf_r+0x86>
 8008dea:	2a25      	cmp	r2, #37	@ 0x25
 8008dec:	d1f9      	bne.n	8008de2 <_vfiprintf_r+0x7a>
 8008dee:	ebba 0b04 	subs.w	fp, sl, r4
 8008df2:	d00b      	beq.n	8008e0c <_vfiprintf_r+0xa4>
 8008df4:	465b      	mov	r3, fp
 8008df6:	4622      	mov	r2, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff ffa2 	bl	8008d44 <__sfputs_r>
 8008e00:	3001      	adds	r0, #1
 8008e02:	f000 80a7 	beq.w	8008f54 <_vfiprintf_r+0x1ec>
 8008e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e08:	445a      	add	r2, fp
 8008e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 809f 	beq.w	8008f54 <_vfiprintf_r+0x1ec>
 8008e16:	2300      	movs	r3, #0
 8008e18:	f04f 32ff 	mov.w	r2, #4294967295
 8008e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e20:	f10a 0a01 	add.w	sl, sl, #1
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	9307      	str	r3, [sp, #28]
 8008e28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e2e:	4654      	mov	r4, sl
 8008e30:	2205      	movs	r2, #5
 8008e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e36:	4853      	ldr	r0, [pc, #332]	@ (8008f84 <_vfiprintf_r+0x21c>)
 8008e38:	f7f7 f9d2 	bl	80001e0 <memchr>
 8008e3c:	9a04      	ldr	r2, [sp, #16]
 8008e3e:	b9d8      	cbnz	r0, 8008e78 <_vfiprintf_r+0x110>
 8008e40:	06d1      	lsls	r1, r2, #27
 8008e42:	bf44      	itt	mi
 8008e44:	2320      	movmi	r3, #32
 8008e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4a:	0713      	lsls	r3, r2, #28
 8008e4c:	bf44      	itt	mi
 8008e4e:	232b      	movmi	r3, #43	@ 0x2b
 8008e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e54:	f89a 3000 	ldrb.w	r3, [sl]
 8008e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e5a:	d015      	beq.n	8008e88 <_vfiprintf_r+0x120>
 8008e5c:	9a07      	ldr	r2, [sp, #28]
 8008e5e:	4654      	mov	r4, sl
 8008e60:	2000      	movs	r0, #0
 8008e62:	f04f 0c0a 	mov.w	ip, #10
 8008e66:	4621      	mov	r1, r4
 8008e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e6c:	3b30      	subs	r3, #48	@ 0x30
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d94b      	bls.n	8008f0a <_vfiprintf_r+0x1a2>
 8008e72:	b1b0      	cbz	r0, 8008ea2 <_vfiprintf_r+0x13a>
 8008e74:	9207      	str	r2, [sp, #28]
 8008e76:	e014      	b.n	8008ea2 <_vfiprintf_r+0x13a>
 8008e78:	eba0 0308 	sub.w	r3, r0, r8
 8008e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e80:	4313      	orrs	r3, r2
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	46a2      	mov	sl, r4
 8008e86:	e7d2      	b.n	8008e2e <_vfiprintf_r+0xc6>
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	1d19      	adds	r1, r3, #4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	9103      	str	r1, [sp, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bfbb      	ittet	lt
 8008e94:	425b      	neglt	r3, r3
 8008e96:	f042 0202 	orrlt.w	r2, r2, #2
 8008e9a:	9307      	strge	r3, [sp, #28]
 8008e9c:	9307      	strlt	r3, [sp, #28]
 8008e9e:	bfb8      	it	lt
 8008ea0:	9204      	strlt	r2, [sp, #16]
 8008ea2:	7823      	ldrb	r3, [r4, #0]
 8008ea4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ea6:	d10a      	bne.n	8008ebe <_vfiprintf_r+0x156>
 8008ea8:	7863      	ldrb	r3, [r4, #1]
 8008eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eac:	d132      	bne.n	8008f14 <_vfiprintf_r+0x1ac>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	1d1a      	adds	r2, r3, #4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	9203      	str	r2, [sp, #12]
 8008eb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eba:	3402      	adds	r4, #2
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f94 <_vfiprintf_r+0x22c>
 8008ec2:	7821      	ldrb	r1, [r4, #0]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	f7f7 f98a 	bl	80001e0 <memchr>
 8008ecc:	b138      	cbz	r0, 8008ede <_vfiprintf_r+0x176>
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	eba0 000a 	sub.w	r0, r0, sl
 8008ed4:	2240      	movs	r2, #64	@ 0x40
 8008ed6:	4082      	lsls	r2, r0
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	3401      	adds	r4, #1
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	4829      	ldr	r0, [pc, #164]	@ (8008f88 <_vfiprintf_r+0x220>)
 8008ee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ee8:	2206      	movs	r2, #6
 8008eea:	f7f7 f979 	bl	80001e0 <memchr>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d03f      	beq.n	8008f72 <_vfiprintf_r+0x20a>
 8008ef2:	4b26      	ldr	r3, [pc, #152]	@ (8008f8c <_vfiprintf_r+0x224>)
 8008ef4:	bb1b      	cbnz	r3, 8008f3e <_vfiprintf_r+0x1d6>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	3307      	adds	r3, #7
 8008efa:	f023 0307 	bic.w	r3, r3, #7
 8008efe:	3308      	adds	r3, #8
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f04:	443b      	add	r3, r7
 8008f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f08:	e76a      	b.n	8008de0 <_vfiprintf_r+0x78>
 8008f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f0e:	460c      	mov	r4, r1
 8008f10:	2001      	movs	r0, #1
 8008f12:	e7a8      	b.n	8008e66 <_vfiprintf_r+0xfe>
 8008f14:	2300      	movs	r3, #0
 8008f16:	3401      	adds	r4, #1
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f04f 0c0a 	mov.w	ip, #10
 8008f20:	4620      	mov	r0, r4
 8008f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f26:	3a30      	subs	r2, #48	@ 0x30
 8008f28:	2a09      	cmp	r2, #9
 8008f2a:	d903      	bls.n	8008f34 <_vfiprintf_r+0x1cc>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0c6      	beq.n	8008ebe <_vfiprintf_r+0x156>
 8008f30:	9105      	str	r1, [sp, #20]
 8008f32:	e7c4      	b.n	8008ebe <_vfiprintf_r+0x156>
 8008f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f38:	4604      	mov	r4, r0
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e7f0      	b.n	8008f20 <_vfiprintf_r+0x1b8>
 8008f3e:	ab03      	add	r3, sp, #12
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	462a      	mov	r2, r5
 8008f44:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <_vfiprintf_r+0x228>)
 8008f46:	a904      	add	r1, sp, #16
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7fd fbc7 	bl	80066dc <_printf_float>
 8008f4e:	4607      	mov	r7, r0
 8008f50:	1c78      	adds	r0, r7, #1
 8008f52:	d1d6      	bne.n	8008f02 <_vfiprintf_r+0x19a>
 8008f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f56:	07d9      	lsls	r1, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_vfiprintf_r+0x1fe>
 8008f5a:	89ab      	ldrh	r3, [r5, #12]
 8008f5c:	059a      	lsls	r2, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_vfiprintf_r+0x1fe>
 8008f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f62:	f7fe f92b 	bl	80071bc <__retarget_lock_release_recursive>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	065b      	lsls	r3, r3, #25
 8008f6a:	f53f af1f 	bmi.w	8008dac <_vfiprintf_r+0x44>
 8008f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f70:	e71e      	b.n	8008db0 <_vfiprintf_r+0x48>
 8008f72:	ab03      	add	r3, sp, #12
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4b05      	ldr	r3, [pc, #20]	@ (8008f90 <_vfiprintf_r+0x228>)
 8008f7a:	a904      	add	r1, sp, #16
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7fd fe45 	bl	8006c0c <_printf_i>
 8008f82:	e7e4      	b.n	8008f4e <_vfiprintf_r+0x1e6>
 8008f84:	08009c28 	.word	0x08009c28
 8008f88:	08009c32 	.word	0x08009c32
 8008f8c:	080066dd 	.word	0x080066dd
 8008f90:	08008d45 	.word	0x08008d45
 8008f94:	08009c2e 	.word	0x08009c2e

08008f98 <__swbuf_r>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	460e      	mov	r6, r1
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	b118      	cbz	r0, 8008faa <__swbuf_r+0x12>
 8008fa2:	6a03      	ldr	r3, [r0, #32]
 8008fa4:	b90b      	cbnz	r3, 8008faa <__swbuf_r+0x12>
 8008fa6:	f7fd ffdd 	bl	8006f64 <__sinit>
 8008faa:	69a3      	ldr	r3, [r4, #24]
 8008fac:	60a3      	str	r3, [r4, #8]
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	071a      	lsls	r2, r3, #28
 8008fb2:	d501      	bpl.n	8008fb8 <__swbuf_r+0x20>
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	b943      	cbnz	r3, 8008fca <__swbuf_r+0x32>
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 f82a 	bl	8009014 <__swsetup_r>
 8008fc0:	b118      	cbz	r0, 8008fca <__swbuf_r+0x32>
 8008fc2:	f04f 37ff 	mov.w	r7, #4294967295
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	6922      	ldr	r2, [r4, #16]
 8008fce:	1a98      	subs	r0, r3, r2
 8008fd0:	6963      	ldr	r3, [r4, #20]
 8008fd2:	b2f6      	uxtb	r6, r6
 8008fd4:	4283      	cmp	r3, r0
 8008fd6:	4637      	mov	r7, r6
 8008fd8:	dc05      	bgt.n	8008fe6 <__swbuf_r+0x4e>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7ff fd99 	bl	8008b14 <_fflush_r>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1ed      	bne.n	8008fc2 <__swbuf_r+0x2a>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	60a3      	str	r3, [r4, #8]
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	701e      	strb	r6, [r3, #0]
 8008ff4:	6962      	ldr	r2, [r4, #20]
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d004      	beq.n	8009006 <__swbuf_r+0x6e>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	07db      	lsls	r3, r3, #31
 8009000:	d5e1      	bpl.n	8008fc6 <__swbuf_r+0x2e>
 8009002:	2e0a      	cmp	r6, #10
 8009004:	d1df      	bne.n	8008fc6 <__swbuf_r+0x2e>
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f7ff fd83 	bl	8008b14 <_fflush_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	d0d9      	beq.n	8008fc6 <__swbuf_r+0x2e>
 8009012:	e7d6      	b.n	8008fc2 <__swbuf_r+0x2a>

08009014 <__swsetup_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4b29      	ldr	r3, [pc, #164]	@ (80090bc <__swsetup_r+0xa8>)
 8009018:	4605      	mov	r5, r0
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	460c      	mov	r4, r1
 800901e:	b118      	cbz	r0, 8009028 <__swsetup_r+0x14>
 8009020:	6a03      	ldr	r3, [r0, #32]
 8009022:	b90b      	cbnz	r3, 8009028 <__swsetup_r+0x14>
 8009024:	f7fd ff9e 	bl	8006f64 <__sinit>
 8009028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902c:	0719      	lsls	r1, r3, #28
 800902e:	d422      	bmi.n	8009076 <__swsetup_r+0x62>
 8009030:	06da      	lsls	r2, r3, #27
 8009032:	d407      	bmi.n	8009044 <__swsetup_r+0x30>
 8009034:	2209      	movs	r2, #9
 8009036:	602a      	str	r2, [r5, #0]
 8009038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	f04f 30ff 	mov.w	r0, #4294967295
 8009042:	e033      	b.n	80090ac <__swsetup_r+0x98>
 8009044:	0758      	lsls	r0, r3, #29
 8009046:	d512      	bpl.n	800906e <__swsetup_r+0x5a>
 8009048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800904a:	b141      	cbz	r1, 800905e <__swsetup_r+0x4a>
 800904c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009050:	4299      	cmp	r1, r3
 8009052:	d002      	beq.n	800905a <__swsetup_r+0x46>
 8009054:	4628      	mov	r0, r5
 8009056:	f7fe feff 	bl	8007e58 <_free_r>
 800905a:	2300      	movs	r3, #0
 800905c:	6363      	str	r3, [r4, #52]	@ 0x34
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	2300      	movs	r3, #0
 8009068:	6063      	str	r3, [r4, #4]
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f043 0308 	orr.w	r3, r3, #8
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	6923      	ldr	r3, [r4, #16]
 8009078:	b94b      	cbnz	r3, 800908e <__swsetup_r+0x7a>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009084:	d003      	beq.n	800908e <__swsetup_r+0x7a>
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f000 f883 	bl	8009194 <__smakebuf_r>
 800908e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009092:	f013 0201 	ands.w	r2, r3, #1
 8009096:	d00a      	beq.n	80090ae <__swsetup_r+0x9a>
 8009098:	2200      	movs	r2, #0
 800909a:	60a2      	str	r2, [r4, #8]
 800909c:	6962      	ldr	r2, [r4, #20]
 800909e:	4252      	negs	r2, r2
 80090a0:	61a2      	str	r2, [r4, #24]
 80090a2:	6922      	ldr	r2, [r4, #16]
 80090a4:	b942      	cbnz	r2, 80090b8 <__swsetup_r+0xa4>
 80090a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090aa:	d1c5      	bne.n	8009038 <__swsetup_r+0x24>
 80090ac:	bd38      	pop	{r3, r4, r5, pc}
 80090ae:	0799      	lsls	r1, r3, #30
 80090b0:	bf58      	it	pl
 80090b2:	6962      	ldrpl	r2, [r4, #20]
 80090b4:	60a2      	str	r2, [r4, #8]
 80090b6:	e7f4      	b.n	80090a2 <__swsetup_r+0x8e>
 80090b8:	2000      	movs	r0, #0
 80090ba:	e7f7      	b.n	80090ac <__swsetup_r+0x98>
 80090bc:	20000020 	.word	0x20000020

080090c0 <_raise_r>:
 80090c0:	291f      	cmp	r1, #31
 80090c2:	b538      	push	{r3, r4, r5, lr}
 80090c4:	4605      	mov	r5, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	d904      	bls.n	80090d4 <_raise_r+0x14>
 80090ca:	2316      	movs	r3, #22
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090d6:	b112      	cbz	r2, 80090de <_raise_r+0x1e>
 80090d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090dc:	b94b      	cbnz	r3, 80090f2 <_raise_r+0x32>
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f830 	bl	8009144 <_getpid_r>
 80090e4:	4622      	mov	r2, r4
 80090e6:	4601      	mov	r1, r0
 80090e8:	4628      	mov	r0, r5
 80090ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ee:	f000 b817 	b.w	8009120 <_kill_r>
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d00a      	beq.n	800910c <_raise_r+0x4c>
 80090f6:	1c59      	adds	r1, r3, #1
 80090f8:	d103      	bne.n	8009102 <_raise_r+0x42>
 80090fa:	2316      	movs	r3, #22
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	2001      	movs	r0, #1
 8009100:	e7e7      	b.n	80090d2 <_raise_r+0x12>
 8009102:	2100      	movs	r1, #0
 8009104:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009108:	4620      	mov	r0, r4
 800910a:	4798      	blx	r3
 800910c:	2000      	movs	r0, #0
 800910e:	e7e0      	b.n	80090d2 <_raise_r+0x12>

08009110 <raise>:
 8009110:	4b02      	ldr	r3, [pc, #8]	@ (800911c <raise+0xc>)
 8009112:	4601      	mov	r1, r0
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f7ff bfd3 	b.w	80090c0 <_raise_r>
 800911a:	bf00      	nop
 800911c:	20000020 	.word	0x20000020

08009120 <_kill_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d07      	ldr	r5, [pc, #28]	@ (8009140 <_kill_r+0x20>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	f7f8 ff89 	bl	8002044 <_kill>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	d102      	bne.n	800913c <_kill_r+0x1c>
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b103      	cbz	r3, 800913c <_kill_r+0x1c>
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	20000904 	.word	0x20000904

08009144 <_getpid_r>:
 8009144:	f7f8 bf76 	b.w	8002034 <_getpid>

08009148 <__swhatbuf_r>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	2900      	cmp	r1, #0
 8009152:	b096      	sub	sp, #88	@ 0x58
 8009154:	4615      	mov	r5, r2
 8009156:	461e      	mov	r6, r3
 8009158:	da0d      	bge.n	8009176 <__swhatbuf_r+0x2e>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009160:	f04f 0100 	mov.w	r1, #0
 8009164:	bf14      	ite	ne
 8009166:	2340      	movne	r3, #64	@ 0x40
 8009168:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800916c:	2000      	movs	r0, #0
 800916e:	6031      	str	r1, [r6, #0]
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	b016      	add	sp, #88	@ 0x58
 8009174:	bd70      	pop	{r4, r5, r6, pc}
 8009176:	466a      	mov	r2, sp
 8009178:	f000 f848 	bl	800920c <_fstat_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	dbec      	blt.n	800915a <__swhatbuf_r+0x12>
 8009180:	9901      	ldr	r1, [sp, #4]
 8009182:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009186:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800918a:	4259      	negs	r1, r3
 800918c:	4159      	adcs	r1, r3
 800918e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009192:	e7eb      	b.n	800916c <__swhatbuf_r+0x24>

08009194 <__smakebuf_r>:
 8009194:	898b      	ldrh	r3, [r1, #12]
 8009196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009198:	079d      	lsls	r5, r3, #30
 800919a:	4606      	mov	r6, r0
 800919c:	460c      	mov	r4, r1
 800919e:	d507      	bpl.n	80091b0 <__smakebuf_r+0x1c>
 80091a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	2301      	movs	r3, #1
 80091aa:	6163      	str	r3, [r4, #20]
 80091ac:	b003      	add	sp, #12
 80091ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b0:	ab01      	add	r3, sp, #4
 80091b2:	466a      	mov	r2, sp
 80091b4:	f7ff ffc8 	bl	8009148 <__swhatbuf_r>
 80091b8:	9f00      	ldr	r7, [sp, #0]
 80091ba:	4605      	mov	r5, r0
 80091bc:	4639      	mov	r1, r7
 80091be:	4630      	mov	r0, r6
 80091c0:	f7fe febe 	bl	8007f40 <_malloc_r>
 80091c4:	b948      	cbnz	r0, 80091da <__smakebuf_r+0x46>
 80091c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ca:	059a      	lsls	r2, r3, #22
 80091cc:	d4ee      	bmi.n	80091ac <__smakebuf_r+0x18>
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	f043 0302 	orr.w	r3, r3, #2
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	e7e2      	b.n	80091a0 <__smakebuf_r+0xc>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	6020      	str	r0, [r4, #0]
 80091de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091ea:	b15b      	cbz	r3, 8009204 <__smakebuf_r+0x70>
 80091ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f0:	4630      	mov	r0, r6
 80091f2:	f000 f81d 	bl	8009230 <_isatty_r>
 80091f6:	b128      	cbz	r0, 8009204 <__smakebuf_r+0x70>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f023 0303 	bic.w	r3, r3, #3
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	431d      	orrs	r5, r3
 8009208:	81a5      	strh	r5, [r4, #12]
 800920a:	e7cf      	b.n	80091ac <__smakebuf_r+0x18>

0800920c <_fstat_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d07      	ldr	r5, [pc, #28]	@ (800922c <_fstat_r+0x20>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	4611      	mov	r1, r2
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	f7f8 ff73 	bl	8002104 <_fstat>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	d102      	bne.n	8009228 <_fstat_r+0x1c>
 8009222:	682b      	ldr	r3, [r5, #0]
 8009224:	b103      	cbz	r3, 8009228 <_fstat_r+0x1c>
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	bd38      	pop	{r3, r4, r5, pc}
 800922a:	bf00      	nop
 800922c:	20000904 	.word	0x20000904

08009230 <_isatty_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d06      	ldr	r5, [pc, #24]	@ (800924c <_isatty_r+0x1c>)
 8009234:	2300      	movs	r3, #0
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f8 ff72 	bl	8002124 <_isatty>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_isatty_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_isatty_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000904 	.word	0x20000904

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
